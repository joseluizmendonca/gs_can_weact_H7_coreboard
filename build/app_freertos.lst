ARM GAS  /tmp/ccprV2Zd.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"app_freertos.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  19              		.align	1
  20              		.global	vApplicationGetIdleTaskMemory
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	vApplicationGetIdleTaskMemory:
  26              	.LVL0:
  27              	.LFB145:
  28              		.file 1 "../../Core/Src/app_freertos.c"
   1:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN Header */
   2:../../Core/Src/app_freertos.c **** /**
   3:../../Core/Src/app_freertos.c ****   ******************************************************************************
   4:../../Core/Src/app_freertos.c ****   * @file    app_freertos.c
   5:../../Core/Src/app_freertos.c ****   * @author  MCD Application Team
   6:../../Core/Src/app_freertos.c ****   * @brief   Code for freertos applications
   7:../../Core/Src/app_freertos.c ****   ******************************************************************************
   8:../../Core/Src/app_freertos.c ****   * @attention
   9:../../Core/Src/app_freertos.c ****   *
  10:../../Core/Src/app_freertos.c ****   * Copyright (c) 2020 STMicroelectronics.
  11:../../Core/Src/app_freertos.c ****   * All rights reserved.
  12:../../Core/Src/app_freertos.c ****   *
  13:../../Core/Src/app_freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:../../Core/Src/app_freertos.c ****   * in the root directory of this software component.
  15:../../Core/Src/app_freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:../../Core/Src/app_freertos.c ****   *
  17:../../Core/Src/app_freertos.c ****   ******************************************************************************
  18:../../Core/Src/app_freertos.c ****   */
  19:../../Core/Src/app_freertos.c **** /* USER CODE END Header */
  20:../../Core/Src/app_freertos.c **** 
  21:../../Core/Src/app_freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:../../Core/Src/app_freertos.c **** #include "FreeRTOS.h"
  23:../../Core/Src/app_freertos.c **** #include "task.h"
  24:../../Core/Src/app_freertos.c **** #include "main.h"
  25:../../Core/Src/app_freertos.c **** 
  26:../../Core/Src/app_freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN Includes */
  28:../../Core/Src/app_freertos.c **** 
  29:../../Core/Src/app_freertos.c **** /* USER CODE END Includes */
  30:../../Core/Src/app_freertos.c **** 
ARM GAS  /tmp/ccprV2Zd.s 			page 2


  31:../../Core/Src/app_freertos.c **** /* Private typedef -----------------------------------------------------------*/
  32:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN PTD */
  33:../../Core/Src/app_freertos.c **** 
  34:../../Core/Src/app_freertos.c **** /* USER CODE END PTD */
  35:../../Core/Src/app_freertos.c **** 
  36:../../Core/Src/app_freertos.c **** /* Private define ------------------------------------------------------------*/
  37:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN PD */
  38:../../Core/Src/app_freertos.c **** 
  39:../../Core/Src/app_freertos.c **** /* USER CODE END PD */
  40:../../Core/Src/app_freertos.c **** 
  41:../../Core/Src/app_freertos.c **** /* Private macro -------------------------------------------------------------*/
  42:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN PM */
  43:../../Core/Src/app_freertos.c **** 
  44:../../Core/Src/app_freertos.c **** /* USER CODE END PM */
  45:../../Core/Src/app_freertos.c **** 
  46:../../Core/Src/app_freertos.c **** /* Private variables ---------------------------------------------------------*/
  47:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN Variables */
  48:../../Core/Src/app_freertos.c **** 
  49:../../Core/Src/app_freertos.c **** /* USER CODE END Variables */
  50:../../Core/Src/app_freertos.c **** 
  51:../../Core/Src/app_freertos.c **** /* Private function prototypes -----------------------------------------------*/
  52:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  53:../../Core/Src/app_freertos.c **** 
  54:../../Core/Src/app_freertos.c **** /* USER CODE END FunctionPrototypes */
  55:../../Core/Src/app_freertos.c **** 
  56:../../Core/Src/app_freertos.c **** /* Private application code --------------------------------------------------*/
  57:../../Core/Src/app_freertos.c **** /* USER CODE BEGIN Application */
  58:../../Core/Src/app_freertos.c **** /* configSUPPORT_STATIC_ALLOCATION is set to 1, so the application must provide an
  59:../../Core/Src/app_freertos.c ****  * implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
  60:../../Core/Src/app_freertos.c ****  * used by the Idle task. */
  61:../../Core/Src/app_freertos.c **** void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskSt
  62:../../Core/Src/app_freertos.c **** {
  29              		.loc 1 62 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  63:../../Core/Src/app_freertos.c **** 	/* If the buffers to be provided to the Idle task are declared inside this
  64:../../Core/Src/app_freertos.c **** 	 * function then they must be declared static - otherwise they will be allocated on
  65:../../Core/Src/app_freertos.c **** 	 * the stack and so not exists after this function exits. */
  66:../../Core/Src/app_freertos.c **** 	static StaticTask_t xIdleTaskTCB;
  34              		.loc 1 66 2 view .LVU1
  67:../../Core/Src/app_freertos.c **** 	static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];
  35              		.loc 1 67 2 view .LVU2
  68:../../Core/Src/app_freertos.c **** 
  69:../../Core/Src/app_freertos.c **** 	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  70:../../Core/Src/app_freertos.c **** 		state will be stored. */
  71:../../Core/Src/app_freertos.c **** 	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
  36              		.loc 1 71 2 view .LVU3
  37              		.loc 1 71 24 is_stmt 0 view .LVU4
  38 0000 034B     		ldr	r3, .L2
  39 0002 0360     		str	r3, [r0]
  72:../../Core/Src/app_freertos.c **** 
  73:../../Core/Src/app_freertos.c **** 	/* Pass out the array that will be used as the Idle task's stack. */
  74:../../Core/Src/app_freertos.c **** 	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
  40              		.loc 1 74 2 is_stmt 1 view .LVU5
  41              		.loc 1 74 26 is_stmt 0 view .LVU6
ARM GAS  /tmp/ccprV2Zd.s 			page 3


  42 0004 034B     		ldr	r3, .L2+4
  43 0006 0B60     		str	r3, [r1]
  75:../../Core/Src/app_freertos.c **** 
  76:../../Core/Src/app_freertos.c **** 	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  77:../../Core/Src/app_freertos.c **** 		Note that, as the array is necessarily of type StackType_t,
  78:../../Core/Src/app_freertos.c **** 		configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  79:../../Core/Src/app_freertos.c **** 	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  44              		.loc 1 79 2 is_stmt 1 view .LVU7
  45              		.loc 1 79 24 is_stmt 0 view .LVU8
  46 0008 8223     		movs	r3, #130
  47 000a 1360     		str	r3, [r2]
  80:../../Core/Src/app_freertos.c **** }
  48              		.loc 1 80 1 view .LVU9
  49 000c 7047     		bx	lr
  50              	.L3:
  51 000e 00BF     		.align	2
  52              	.L2:
  53 0010 00000000 		.word	.LANCHOR0
  54 0014 00000000 		.word	.LANCHOR1
  55              		.cfi_endproc
  56              	.LFE145:
  58              		.section	.text.vApplicationGetTimerTaskMemory,"ax",%progbits
  59              		.align	1
  60              		.global	vApplicationGetTimerTaskMemory
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	vApplicationGetTimerTaskMemory:
  66              	.LVL1:
  67              	.LFB146:
  81:../../Core/Src/app_freertos.c **** 
  82:../../Core/Src/app_freertos.c **** /* configSUPPORT_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
  83:../../Core/Src/app_freertos.c ****  * application must provide an implementation of vApplicationGetTimerTaskMemory()
  84:../../Core/Src/app_freertos.c ****  * to provide the memory that is used by the Timer service task. */
  85:../../Core/Src/app_freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
  86:../../Core/Src/app_freertos.c **** {
  68              		.loc 1 86 1 is_stmt 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  87:../../Core/Src/app_freertos.c **** 	/* If the buffers to be provided to the Timer task are declared inside this
  88:../../Core/Src/app_freertos.c **** 	 * function then they must be declared static - otherwise they will be allocated on
  89:../../Core/Src/app_freertos.c **** 	 * the stack and so not exists after this function exits. */
  90:../../Core/Src/app_freertos.c **** 	static StaticTask_t xTimerTaskTCB;
  73              		.loc 1 90 2 view .LVU11
  91:../../Core/Src/app_freertos.c **** 	static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];
  74              		.loc 1 91 2 view .LVU12
  92:../../Core/Src/app_freertos.c **** 
  93:../../Core/Src/app_freertos.c **** 	/* Pass out a pointer to the StaticTask_t structure in which the Timer
  94:../../Core/Src/app_freertos.c **** 		task's state will be stored. */
  95:../../Core/Src/app_freertos.c **** 	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
  75              		.loc 1 95 2 view .LVU13
  76              		.loc 1 95 25 is_stmt 0 view .LVU14
  77 0000 034B     		ldr	r3, .L5
  78 0002 0360     		str	r3, [r0]
  96:../../Core/Src/app_freertos.c **** 
ARM GAS  /tmp/ccprV2Zd.s 			page 4


  97:../../Core/Src/app_freertos.c **** 	/* Pass out the array that will be used as the Timer task's stack. */
  98:../../Core/Src/app_freertos.c **** 	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
  79              		.loc 1 98 2 is_stmt 1 view .LVU15
  80              		.loc 1 98 27 is_stmt 0 view .LVU16
  81 0004 034B     		ldr	r3, .L5+4
  82 0006 0B60     		str	r3, [r1]
  99:../../Core/Src/app_freertos.c **** 
 100:../../Core/Src/app_freertos.c **** 	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
 101:../../Core/Src/app_freertos.c **** 		Note that, as the array is necessarily of type StackType_t,
 102:../../Core/Src/app_freertos.c **** 		configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
 103:../../Core/Src/app_freertos.c **** 	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
  83              		.loc 1 103 2 is_stmt 1 view .LVU17
  84              		.loc 1 103 25 is_stmt 0 view .LVU18
  85 0008 4FF48073 		mov	r3, #256
  86 000c 1360     		str	r3, [r2]
 104:../../Core/Src/app_freertos.c **** }
  87              		.loc 1 104 1 view .LVU19
  88 000e 7047     		bx	lr
  89              	.L6:
  90              		.align	2
  91              	.L5:
  92 0010 00000000 		.word	.LANCHOR2
  93 0014 00000000 		.word	.LANCHOR3
  94              		.cfi_endproc
  95              	.LFE146:
  97              		.section	.bss.uxIdleTaskStack.2,"aw",%nobits
  98              		.align	2
  99              		.set	.LANCHOR1,. + 0
 102              	uxIdleTaskStack.2:
 103 0000 00000000 		.space	520
 103      00000000 
 103      00000000 
 103      00000000 
 103      00000000 
 104              		.section	.bss.uxTimerTaskStack.0,"aw",%nobits
 105              		.align	2
 106              		.set	.LANCHOR3,. + 0
 109              	uxTimerTaskStack.0:
 110 0000 00000000 		.space	1024
 110      00000000 
 110      00000000 
 110      00000000 
 110      00000000 
 111              		.section	.bss.xIdleTaskTCB.3,"aw",%nobits
 112              		.align	2
 113              		.set	.LANCHOR0,. + 0
 116              	xIdleTaskTCB.3:
 117 0000 00000000 		.space	84
 117      00000000 
 117      00000000 
 117      00000000 
 117      00000000 
 118              		.section	.bss.xTimerTaskTCB.1,"aw",%nobits
 119              		.align	2
 120              		.set	.LANCHOR2,. + 0
 123              	xTimerTaskTCB.1:
 124 0000 00000000 		.space	84
ARM GAS  /tmp/ccprV2Zd.s 			page 5


 124      00000000 
 124      00000000 
 124      00000000 
 124      00000000 
 125              		.text
 126              	.Letext0:
 127              		.file 2 "/home/joseluiz/Programs/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/arm-none-eabi/include
 128              		.file 3 "/home/joseluiz/Programs/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/arm-none-eabi/include
 129              		.file 4 "../../Middlewares/Third_Party/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
 130              		.file 5 "../../Middlewares/Third_Party/FreeRTOS/include/FreeRTOS.h"
ARM GAS  /tmp/ccprV2Zd.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 app_freertos.c
     /tmp/ccprV2Zd.s:19     .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/ccprV2Zd.s:25     .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/ccprV2Zd.s:53     .text.vApplicationGetIdleTaskMemory:0000000000000010 $d
     /tmp/ccprV2Zd.s:59     .text.vApplicationGetTimerTaskMemory:0000000000000000 $t
     /tmp/ccprV2Zd.s:65     .text.vApplicationGetTimerTaskMemory:0000000000000000 vApplicationGetTimerTaskMemory
     /tmp/ccprV2Zd.s:92     .text.vApplicationGetTimerTaskMemory:0000000000000010 $d
     /tmp/ccprV2Zd.s:98     .bss.uxIdleTaskStack.2:0000000000000000 $d
     /tmp/ccprV2Zd.s:102    .bss.uxIdleTaskStack.2:0000000000000000 uxIdleTaskStack.2
     /tmp/ccprV2Zd.s:105    .bss.uxTimerTaskStack.0:0000000000000000 $d
     /tmp/ccprV2Zd.s:109    .bss.uxTimerTaskStack.0:0000000000000000 uxTimerTaskStack.0
     /tmp/ccprV2Zd.s:112    .bss.xIdleTaskTCB.3:0000000000000000 $d
     /tmp/ccprV2Zd.s:116    .bss.xIdleTaskTCB.3:0000000000000000 xIdleTaskTCB.3
     /tmp/ccprV2Zd.s:119    .bss.xTimerTaskTCB.1:0000000000000000 $d
     /tmp/ccprV2Zd.s:123    .bss.xTimerTaskTCB.1:0000000000000000 xTimerTaskTCB.1

NO UNDEFINED SYMBOLS
