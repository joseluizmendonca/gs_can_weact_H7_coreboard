ARM GAS  /tmp/ccewlP9t.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_hal_pwr_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_PWREx_ConfigSupply,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_PWREx_ConfigSupply
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	HAL_PWREx_ConfigSupply:
  26              	.LVL0:
  27              	.LFB141:
  28              		.file 1 "../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c"
   1:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
   2:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
   3:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @file    stm32h7xx_hal_pwr_ex.c
   4:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:
   8:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  10:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @attention
  11:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  12:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * Copyright (c) 2017 STMicroelectronics.
  13:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * All rights reserved.
  14:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  15:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file
  16:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * in the root directory of this software component.
  17:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  18:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  19:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  20:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   @verbatim
  21:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  22:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                         ##### How to use this driver #####
  23:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  24:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   [..]
  25:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigSupply() function to configure the regulator supply
  26:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        with the following different setups according to hardware (support SMPS):
  27:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_DIRECT_SMPS_SUPPLY
  28:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_LDO
  29:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_LDO
  30:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO
ARM GAS  /tmp/ccewlP9t.s 			page 2


  31:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO
  32:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT
  33:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT
  34:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_LDO_SUPPLY
  35:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_EXTERNAL_SOURCE_SUPPLY
  36:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  37:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetSupplyConfig() function to get the current supply setup.
  38:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  39:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlVoltageScaling() function to configure the main
  40:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        internal regulator output voltage. The voltage scaling could be one of
  41:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        the following scales :
  42:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE0
  43:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE1
  44:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE2
  45:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE3
  46:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  47:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetVoltageRange() function to get the current output
  48:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        voltage applied to the main regulator.
  49:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  50:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlStopModeVoltageScaling() function to configure the
  51:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        main internal regulator output voltage in STOP mode. The voltage scaling
  52:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        in STOP mode could be one of the following scales :
  53:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE3
  54:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE4
  55:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE5
  56:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  57:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetStopModeVoltageRange() function to get the current
  58:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        output voltage applied to the main regulator in STOP mode.
  59:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  60:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOP2Mode() function to enter the system in STOP mode
  61:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        with core domain in D2STOP mode. This API is used only for STM32H7Axxx
  62:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        and STM32H7Bxxx devices.
  63:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  64:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  65:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  66:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  67:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOPMode() function to enter the selected domain in
  68:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        DSTOP mode. Call this API with all available power domains to enter the
  69:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        system in STOP mode.
  70:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  71:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  72:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  73:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  74:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearPendingEvent() function always before entring the
  75:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        Cortex-Mx in any low power mode (SLEEP/DEEP-SLEEP) using WFE entry.
  76:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  77:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTANDBYMode() function to enter the selected domain
  78:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DSTANDBY mode. Call this API with all available power domains to enter
  79:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        the system in STANDBY mode.
  80:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  81:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigD3Domain() function to setup the D3/SRD domain state
  82:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (RUN/STOP) when the system enter to low power mode.
  83:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  84:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearDomainFlags() function to clear the CPU flags for the
  85:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        selected power domain. This API is used only for dual core devices.
  86:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  87:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_HoldCore() and HAL_PWREx_ReleaseCore() functions to hold
ARM GAS  /tmp/ccewlP9t.s 			page 3


  88:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        and release the selected CPU and and their domain peripherals when
  89:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        exiting STOP mode. These APIs are used only for dual core devices.
  90:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  91:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableFlashPowerDown() and
  92:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableFlashPowerDown() functions to enable and disable the
  93:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        Flash Power Down in STOP mode.
  94:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  95:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMemoryShutOff() and
  96:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableMemoryShutOff() functions to enable and disable the
  97:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        memory block shut-off in DStop or DStop2. These APIs are used only for
  98:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines.
  99:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 100:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableWakeUpPin() and HAL_PWREx_DisableWakeUpPin()
 101:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the Wake-up pin functionality for
 102:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        the selected pin.
 103:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 104:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetWakeupFlag() and HAL_PWREx_ClearWakeupFlag()
 105:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to manage wake-up flag for the selected pin.
 106:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 107:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_WAKEUP_PIN_IRQHandler() function to handle all wake-up
 108:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        pins interrupts.
 109:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 110:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBkUpReg() and HAL_PWREx_DisableBkUpReg() functions
 111:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        to enable and disable the backup domain regulator.
 112:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 113:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableUSBReg(), HAL_PWREx_DisableUSBReg(),
 114:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_EnableUSBVoltageDetector() and
 115:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableUSBVoltageDetector() functions to manage USB power
 116:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        regulation functionalities.
 117:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 118:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBatteryCharging() and
 119:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableBatteryCharging() functions to enable and disable the
 120:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        battery charging feature with the selected resistor.
 121:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 122:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableAnalogBooster() and
 123:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableAnalogBooster() functions to enable and disable the
 124:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD boost feature when the VDD supply voltage is below 2V7.
 125:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 126:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMonitoring() and HAL_PWREx_DisableMonitoring()
 127:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the VBAT and Temperature monitoring.
 128:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        When VBAT and Temperature monitoring feature is enables, use
 129:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_GetTemperatureLevel() and HAL_PWREx_GetVBATLevel() to get
 130:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        respectively the Temperature level and VBAT level.
 131:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 132:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetMMCVoltage() and HAL_PWREx_DisableMonitoring()
 133:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        function to get VDDMMC voltage level. This API is used only for
 134:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines
 135:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 136:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigAVD() after setting parameter to be configured
 137:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (event mode and voltage threshold) in order to set up the Analog Voltage
 138:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        Detector then use HAL_PWREx_EnableAVD() and  HAL_PWREx_DisableAVD()
 139:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to start and stop the AVD detection.
 140:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) AVD level could be one of the following values :
 141:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 1V7
 142:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V1
 143:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V5
 144:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V8
ARM GAS  /tmp/ccewlP9t.s 			page 4


 145:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 146:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_PVD_AVD_IRQHandler() function to handle the PWR PVD and
 147:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD interrupt request.
 148:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 149:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   @endverbatim
 150:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 151:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 152:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
 153:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #include "stm32h7xx_hal.h"
 154:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 155:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
 156:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 157:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 158:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 159:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
 160:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR Extended HAL module driver
 161:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 162:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 163:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 164:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
 165:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 166:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
 167:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
 168:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 169:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
 170:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 171:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 172:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 173:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_AVD_Mode_Mask PWR Extended AVD Mode Mask
 174:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 175:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 176:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_IT              (0x00010000U)
 177:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_EVT             (0x00020000U)
 178:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_EDGE          (0x00000001U)
 179:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_FALLING_EDGE         (0x00000002U)
 180:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_FALLING_EDGE  (0x00000003U)
 181:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 182:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 183:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 184:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 185:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_REG_SET_TIMEOUT PWR Extended Flag Setting Time Out Value
 186:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 187:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 188:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY   (1000U)
 189:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 190:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 191:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 192:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 193:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_WakeUp_Pins_Offsets PWREx Wake-Up Pins masks and offsets
 194:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 195:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 196:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins EXTI register mask */
 197:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (EXTI_IMR2_IM57)
 198:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 199:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM57 | EXTI_IMR2_IM58 |\
 200:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM59 | EXTI_IMR2_IM60)
 201:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
ARM GAS  /tmp/ccewlP9t.s 			page 5


 202:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 203:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM58 | EXTI_IMR2_IM60)
 204:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (EXTI_IMR2_IM57) */
 205:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 206:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins PWR Pin Pull shift offsets */
 207:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET (2U)
 208:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 209:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 210:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 211:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 212:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 213:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 214:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 215:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 216:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
 217:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
 218:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
 219:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
 220:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported types ------------------------------------------------------------*/
 221:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
 222:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 223:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
 224:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 225:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 226:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 227:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Power Supply Control Functions
 228:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power supply control functions
 229:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 230:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 231:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 232:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                   ##### Power supply control functions #####
 233:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 234:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 235:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) When the system is powered on, the POR monitors VDD supply. Once VDD is
 236:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        above the POR threshold level, the voltage regulator is enabled in the
 237:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        default supply configuration:
 238:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The Voltage converter output level is set at 1V0 in accordance with
 239:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           the VOS3 level configured in PWR (D3/SRD) domain control register
 240:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (PWR_D3CR/PWR_SRDCR).
 241:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The system is kept in reset mode as long as VCORE is not ok.
 242:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once VCORE is ok, the system is taken out of reset and the HSI
 243:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           oscillator is enabled.
 244:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the oscillator is stable, the system is initialized: Flash memory
 245:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           and option bytes are loaded and the CPU starts in Run* mode.
 246:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The software shall then initialize the system including supply
 247:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           configuration programming using the HAL_PWREx_ConfigSupply().
 248:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the supply configuration has been configured, the
 249:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ConfigSupply() function checks the ACTVOSRDY bit in PWR
 250:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           control status register 1 (PWR_CSR1) to guarantee a valid voltage
 251:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels:
 252:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) As long as ACTVOSRDY indicates that voltage levels are invalid, the
 253:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             system is in limited Run* mode, write accesses to the RAMs are not
 254:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             permitted and VOS shall not be changed.
 255:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Once ACTVOSRDY indicates that voltage levels are valid, the system
 256:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             is in normal Run mode, write accesses to RAMs are allowed and VOS
 257:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             can be changed.
 258:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccewlP9t.s 			page 6


 259:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 260:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 261:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 262:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 263:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 264:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the system Power Supply.
 265:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  SupplySource : Specifies the Power Supply source to set after a
 266:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        system startup.
 267:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values :
 268:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_DIRECT_SMPS_SUPPLY : The SMPS supplies the Vcore Power
 269:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                          Domains. The LDO is Bypassed.
 270:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_LDO : The SMPS 1.8V output supplies
 271:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 272:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 273:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_LDO : The SMPS 2.5V output supplies
 274:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 275:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 276:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO : The SMPS 1.8V output
 277:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 278:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 279:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 280:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 281:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 282:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO : The SMPS 2.5V output
 283:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 284:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 285:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 286:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 287:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 288:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT : The SMPS 1.8V output supplies
 289:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 290:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 291:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 292:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 293:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT : The SMPS 2.5V output supplies
 294:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 295:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 296:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 297:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 298:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LDO_SUPPLY : The LDO regulator supplies the Vcore Power
 299:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                  Domains. The SMPS regulator is Bypassed.
 300:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_EXTERNAL_SOURCE_SUPPLY : The SMPS and the LDO are
 301:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Bypassed. The Vcore Power
 302:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Domains are supplied from
 303:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              external source.
 304:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_LDO_SUPPLY and PWR_EXTERNAL_SOURCE_SUPPLY are used by all
 305:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         H7 lines.
 306:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         The PWR_DIRECT_SMPS_SUPPLY, PWR_SMPS_1V8_SUPPLIES_LDO,
 307:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_LDO, PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO,
 308:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO, PWR_SMPS_1V8_SUPPLIES_EXT and
 309:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
 310:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator.
 311:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 312:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 313:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
 314:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
  29              		.loc 1 314 1 view -0
ARM GAS  /tmp/ccewlP9t.s 			page 7


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
 315:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  33              		.loc 1 315 3 view .LVU1
 316:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 317:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 318:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_SUPPLY (SupplySource));
  34              		.loc 1 318 3 view .LVU2
 319:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 320:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if supply source was configured */
 321:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_FLAG_SCUEN)
 322:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
  35              		.loc 1 322 3 view .LVU3
  36              		.loc 1 322 7 is_stmt 0 view .LVU4
  37 0000 134B     		ldr	r3, .L12
  38 0002 DB68     		ldr	r3, [r3, #12]
  39              		.loc 1 322 6 view .LVU5
  40 0004 13F0040F 		tst	r3, #4
  41 0008 07D1     		bne	.L2
 323:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 324:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_L
 325:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_FLAG_SCUEN) */
 326:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 327:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check supply configuration */
 328:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
  42              		.loc 1 328 5 is_stmt 1 view .LVU6
  43              		.loc 1 328 13 is_stmt 0 view .LVU7
  44 000a 114B     		ldr	r3, .L12
  45 000c DB68     		ldr	r3, [r3, #12]
  46              		.loc 1 328 19 view .LVU8
  47 000e 03F00703 		and	r3, r3, #7
  48              		.loc 1 328 8 view .LVU9
  49 0012 8342     		cmp	r3, r0
  50 0014 1AD0     		beq	.L6
 329:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 330:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, can't apply a new supply config */
 331:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  51              		.loc 1 331 14 view .LVU10
  52 0016 0120     		movs	r0, #1
  53              	.LVL1:
  54              		.loc 1 331 14 view .LVU11
  55 0018 7047     		bx	lr
  56              	.LVL2:
  57              	.L2:
 314:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  58              		.loc 1 314 1 view .LVU12
  59 001a 10B5     		push	{r4, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 4, -8
  63              		.cfi_offset 14, -4
 332:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 333:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 334:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 335:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, but new supply configuration
 336:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          matches with old supply configuration : nothing to do
ARM GAS  /tmp/ccewlP9t.s 			page 8


 337:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 338:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_OK;
 339:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 340:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 341:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 342:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 343:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
  64              		.loc 1 343 3 is_stmt 1 view .LVU13
  65 001c 0C4A     		ldr	r2, .L12
  66 001e D368     		ldr	r3, [r2, #12]
  67 0020 23F00703 		bic	r3, r3, #7
  68 0024 1843     		orrs	r0, r0, r3
  69              	.LVL3:
  70              		.loc 1 343 3 is_stmt 0 view .LVU14
  71 0026 D060     		str	r0, [r2, #12]
 344:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 345:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 346:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
  72              		.loc 1 346 3 is_stmt 1 view .LVU15
  73              		.loc 1 346 15 is_stmt 0 view .LVU16
  74 0028 FFF7FEFF 		bl	HAL_GetTick
  75              	.LVL4:
  76 002c 0446     		mov	r4, r0
  77              	.LVL5:
 347:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 348:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 349:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
  78              		.loc 1 349 3 is_stmt 1 view .LVU17
  79              	.L4:
  80              		.loc 1 349 9 view .LVU18
  81              		.loc 1 349 10 is_stmt 0 view .LVU19
  82 002e 084B     		ldr	r3, .L12
  83 0030 5B68     		ldr	r3, [r3, #4]
  84              		.loc 1 349 9 view .LVU20
  85 0032 13F4005F 		tst	r3, #8192
  86 0036 07D1     		bne	.L11
 350:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 351:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
  87              		.loc 1 351 5 is_stmt 1 view .LVU21
  88              		.loc 1 351 10 is_stmt 0 view .LVU22
  89 0038 FFF7FEFF 		bl	HAL_GetTick
  90              	.LVL6:
  91              		.loc 1 351 25 view .LVU23
  92 003c 001B     		subs	r0, r0, r4
  93              		.loc 1 351 8 view .LVU24
  94 003e B0F57A7F 		cmp	r0, #1000
  95 0042 F4D9     		bls	.L4
 352:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 353:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  96              		.loc 1 353 14 view .LVU25
  97 0044 0120     		movs	r0, #1
  98 0046 00E0     		b	.L3
  99              	.L11:
 354:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 355:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 356:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 357:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (SMPS)
ARM GAS  /tmp/ccewlP9t.s 			page 9


 358:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
 359:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 360:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 361:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 362:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 363:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 364:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Get the current tick number */
 365:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick ();
 366:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 367:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Wait till SMPS external supply ready flag is set */
 368:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 369:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 370:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 371:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 372:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         return HAL_ERROR;
 373:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 374:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 375:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 376:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SMPS) */
 377:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 378:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 100              		.loc 1 378 10 view .LVU26
 101 0048 0020     		movs	r0, #0
 102              	.L3:
 379:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 103              		.loc 1 379 1 view .LVU27
 104 004a 10BD     		pop	{r4, pc}
 105              	.LVL7:
 106              	.L6:
 107              	.LCFI1:
 108              		.cfi_def_cfa_offset 0
 109              		.cfi_restore 4
 110              		.cfi_restore 14
 338:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 111              		.loc 1 338 14 view .LVU28
 112 004c 0020     		movs	r0, #0
 113              	.LVL8:
 114              		.loc 1 379 1 view .LVU29
 115 004e 7047     		bx	lr
 116              	.L13:
 117              		.align	2
 118              	.L12:
 119 0050 00480258 		.word	1476544512
 120              		.cfi_endproc
 121              	.LFE141:
 123              		.section	.text.HAL_PWREx_GetSupplyConfig,"ax",%progbits
 124              		.align	1
 125              		.global	HAL_PWREx_GetSupplyConfig
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 130              	HAL_PWREx_GetSupplyConfig:
 131              	.LFB142:
 380:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 381:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 382:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the power supply configuration.
 383:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The supply configuration.
ARM GAS  /tmp/ccewlP9t.s 			page 10


 384:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 385:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetSupplyConfig (void)
 386:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 132              		.loc 1 386 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 387:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
 137              		.loc 1 387 3 view .LVU31
 138              		.loc 1 387 14 is_stmt 0 view .LVU32
 139 0000 024B     		ldr	r3, .L15
 140 0002 D868     		ldr	r0, [r3, #12]
 388:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 141              		.loc 1 388 1 view .LVU33
 142 0004 00F00700 		and	r0, r0, #7
 143 0008 7047     		bx	lr
 144              	.L16:
 145 000a 00BF     		.align	2
 146              	.L15:
 147 000c 00480258 		.word	1476544512
 148              		.cfi_endproc
 149              	.LFE142:
 151              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 152              		.align	1
 153              		.global	HAL_PWREx_ControlVoltageScaling
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	HAL_PWREx_ControlVoltageScaling:
 159              	.LVL9:
 160              	.LFB143:
 389:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 390:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 391:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage.
 392:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage to achieve
 393:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          a tradeoff between performance and power
 394:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          consumption.
 395:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
 396:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE0 : Regulator voltage output
 397:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                Scale 0 mode.
 398:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1 : Regulator voltage output
 399:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 1 mode.
 400:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE2 : Regulator voltage output
 401:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 2 mode.
 402:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE3 : Regulator voltage output
 403:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 3 mode.
 404:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For STM32H74x and STM32H75x lines, configuring Voltage Scale 0 is
 405:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only possible when Vcore is supplied from LDO (Low DropOut). The
 406:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SYSCFG Clock must be enabled through __HAL_RCC_SYSCFG_CLK_ENABLE()
 407:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         macro before configuring Voltage Scale 0.
 408:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         To enter low power mode , and if current regulator voltage is
 409:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
 410:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         low power mode.
 411:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status
 412:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 413:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
ARM GAS  /tmp/ccewlP9t.s 			page 11


 414:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 161              		.loc 1 414 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		.loc 1 414 1 is_stmt 0 view .LVU35
 166 0000 38B5     		push	{r3, r4, r5, lr}
 167              	.LCFI2:
 168              		.cfi_def_cfa_offset 16
 169              		.cfi_offset 3, -16
 170              		.cfi_offset 4, -12
 171              		.cfi_offset 5, -8
 172              		.cfi_offset 14, -4
 415:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 173              		.loc 1 415 3 is_stmt 1 view .LVU36
 416:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 417:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 418:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));
 174              		.loc 1 418 3 view .LVU37
 419:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 420:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the voltage scaling  */
 421:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
 175              		.loc 1 421 3 view .LVU38
 176              		.loc 1 421 11 is_stmt 0 view .LVU39
 177 0002 324B     		ldr	r3, .L38
 178 0004 5B68     		ldr	r3, [r3, #4]
 179              		.loc 1 421 18 view .LVU40
 180 0006 03F44043 		and	r3, r3, #49152
 181              		.loc 1 421 6 view .LVU41
 182 000a 8342     		cmp	r3, r0
 183 000c 5CD0     		beq	.L28
 184 000e 0446     		mov	r4, r0
 422:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 423:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Old and new voltage scaling configuration match : nothing to do */
 424:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_OK;
 425:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 426:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 427:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_SRDCR_VOS)
 428:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 429:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
 430:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 431:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
 432:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
 185              		.loc 1 432 3 is_stmt 1 view .LVU42
 186              		.loc 1 432 6 is_stmt 0 view .LVU43
 187 0010 08BB     		cbnz	r0, .L19
 433:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 434:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
 188              		.loc 1 434 5 is_stmt 1 view .LVU44
 189              		.loc 1 434 13 is_stmt 0 view .LVU45
 190 0012 2E4B     		ldr	r3, .L38
 191 0014 DB68     		ldr	r3, [r3, #12]
 192              		.loc 1 434 8 view .LVU46
 193 0016 13F0020F 		tst	r3, #2
 194 001a 01D1     		bne	.L34
 435:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 436:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set the voltage range */
ARM GAS  /tmp/ccewlP9t.s 			page 12


 437:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 438:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 439:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Get tick */
 440:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       tickstart = HAL_GetTick ();
 441:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 442:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Wait till voltage level flag is set */
 443:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 444:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 446:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 447:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           return HAL_ERROR;
 448:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 449:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 450:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 451:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Enable the PWR overdrive */
 452:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 453:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 454:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 455:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 456:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* The voltage scale 0 is only possible when LDO regulator is enabled */
 457:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 195              		.loc 1 457 14 view .LVU47
 196 001c 0120     		movs	r0, #1
 197              	.LVL10:
 198              		.loc 1 457 14 view .LVU48
 199 001e 52E0     		b	.L18
 200              	.LVL11:
 201              	.L34:
 437:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 202              		.loc 1 437 7 is_stmt 1 view .LVU49
 203 0020 2A4A     		ldr	r2, .L38
 204 0022 9369     		ldr	r3, [r2, #24]
 205 0024 43F44043 		orr	r3, r3, #49152
 206 0028 9361     		str	r3, [r2, #24]
 440:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 207              		.loc 1 440 7 view .LVU50
 440:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 208              		.loc 1 440 19 is_stmt 0 view .LVU51
 209 002a FFF7FEFF 		bl	HAL_GetTick
 210              	.LVL12:
 440:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 211              		.loc 1 440 19 view .LVU52
 212 002e 0446     		mov	r4, r0
 213              	.LVL13:
 443:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 214              		.loc 1 443 7 is_stmt 1 view .LVU53
 215              	.L20:
 443:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 216              		.loc 1 443 13 view .LVU54
 443:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 217              		.loc 1 443 14 is_stmt 0 view .LVU55
 218 0030 264B     		ldr	r3, .L38
 219 0032 5B68     		ldr	r3, [r3, #4]
 443:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 220              		.loc 1 443 13 view .LVU56
 221 0034 13F4005F 		tst	r3, #8192
 222 0038 07D1     		bne	.L35
ARM GAS  /tmp/ccewlP9t.s 			page 13


 445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 223              		.loc 1 445 9 is_stmt 1 view .LVU57
 445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 224              		.loc 1 445 14 is_stmt 0 view .LVU58
 225 003a FFF7FEFF 		bl	HAL_GetTick
 226              	.LVL14:
 445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 227              		.loc 1 445 29 view .LVU59
 228 003e 001B     		subs	r0, r0, r4
 445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 229              		.loc 1 445 12 view .LVU60
 230 0040 B0F57A7F 		cmp	r0, #1000
 231 0044 F4D9     		bls	.L20
 447:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 232              		.loc 1 447 18 view .LVU61
 233 0046 0120     		movs	r0, #1
 234 0048 3DE0     		b	.L18
 235              	.L35:
 452:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 236              		.loc 1 452 7 is_stmt 1 view .LVU62
 237 004a 214A     		ldr	r2, .L38+4
 238 004c D36A     		ldr	r3, [r2, #44]
 239 004e 43F00103 		orr	r3, r3, #1
 240 0052 D362     		str	r3, [r2, #44]
 241 0054 0CE0     		b	.L22
 242              	.LVL15:
 243              	.L19:
 458:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 459:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 460:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 461:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 462:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 244              		.loc 1 462 5 view .LVU63
 245              		.loc 1 462 13 is_stmt 0 view .LVU64
 246 0056 1D4B     		ldr	r3, .L38
 247 0058 5B68     		ldr	r3, [r3, #4]
 248              		.loc 1 462 20 view .LVU65
 249 005a 03F44043 		and	r3, r3, #49152
 250              		.loc 1 462 8 view .LVU66
 251 005e B3F5404F 		cmp	r3, #49152
 252 0062 15D0     		beq	.L36
 253              	.LVL16:
 254              	.L23:
 463:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 464:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
 465:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 466:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Disable the PWR overdrive */
 467:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 468:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 469:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Get tick */
 470:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         tickstart = HAL_GetTick ();
 471:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 472:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Wait till voltage level flag is set */
 473:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 474:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 475:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 476:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
ARM GAS  /tmp/ccewlP9t.s 			page 14


 477:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             return HAL_ERROR;
 478:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 479:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 480:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 481:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 482:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 483:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set the voltage range */
 484:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 255              		.loc 1 484 5 is_stmt 1 view .LVU67
 256 0064 194B     		ldr	r3, .L38
 257 0066 9869     		ldr	r0, [r3, #24]
 258 0068 20F44040 		bic	r0, r0, #49152
 259 006c 0443     		orrs	r4, r4, r0
 260              	.LVL17:
 261              		.loc 1 484 5 is_stmt 0 view .LVU68
 262 006e 9C61     		str	r4, [r3, #24]
 263              	.L22:
 485:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 486:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #else  /* STM32H72xxx and STM32H73xxx lines */
 487:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 488:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 489:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SYSCFG_PWRCR_ODEN) */
 490:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_SRDCR_VOS) */
 491:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 492:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 493:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 264              		.loc 1 493 3 is_stmt 1 view .LVU69
 265              		.loc 1 493 15 is_stmt 0 view .LVU70
 266 0070 FFF7FEFF 		bl	HAL_GetTick
 267              	.LVL18:
 268 0074 0446     		mov	r4, r0
 269              	.LVL19:
 494:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 495:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 496:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 270              		.loc 1 496 3 is_stmt 1 view .LVU71
 271              	.L26:
 272              		.loc 1 496 9 view .LVU72
 273              		.loc 1 496 10 is_stmt 0 view .LVU73
 274 0076 154B     		ldr	r3, .L38
 275 0078 5B68     		ldr	r3, [r3, #4]
 276              		.loc 1 496 9 view .LVU74
 277 007a 13F4005F 		tst	r3, #8192
 278 007e 21D1     		bne	.L37
 497:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 498:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 279              		.loc 1 498 5 is_stmt 1 view .LVU75
 280              		.loc 1 498 10 is_stmt 0 view .LVU76
 281 0080 FFF7FEFF 		bl	HAL_GetTick
 282              	.LVL20:
 283              		.loc 1 498 24 view .LVU77
 284 0084 001B     		subs	r0, r0, r4
 285              		.loc 1 498 8 view .LVU78
 286 0086 B0F57A7F 		cmp	r0, #1000
 287 008a F4D9     		bls	.L26
 499:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 500:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
ARM GAS  /tmp/ccewlP9t.s 			page 15


 288              		.loc 1 500 14 view .LVU79
 289 008c 0120     		movs	r0, #1
 290 008e 1AE0     		b	.L18
 291              	.LVL21:
 292              	.L36:
 464:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 293              		.loc 1 464 7 is_stmt 1 view .LVU80
 464:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 294              		.loc 1 464 18 is_stmt 0 view .LVU81
 295 0090 0F4B     		ldr	r3, .L38+4
 296 0092 DB6A     		ldr	r3, [r3, #44]
 464:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 297              		.loc 1 464 10 view .LVU82
 298 0094 13F0010F 		tst	r3, #1
 299 0098 E4D0     		beq	.L23
 467:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 300              		.loc 1 467 9 is_stmt 1 view .LVU83
 301 009a 0D4A     		ldr	r2, .L38+4
 302 009c D36A     		ldr	r3, [r2, #44]
 303 009e 23F00103 		bic	r3, r3, #1
 304 00a2 D362     		str	r3, [r2, #44]
 470:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 305              		.loc 1 470 9 view .LVU84
 470:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 306              		.loc 1 470 21 is_stmt 0 view .LVU85
 307 00a4 FFF7FEFF 		bl	HAL_GetTick
 308              	.LVL22:
 470:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 309              		.loc 1 470 21 view .LVU86
 310 00a8 0546     		mov	r5, r0
 311              	.LVL23:
 473:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 312              		.loc 1 473 9 is_stmt 1 view .LVU87
 313              	.L24:
 473:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 314              		.loc 1 473 15 view .LVU88
 473:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 315              		.loc 1 473 16 is_stmt 0 view .LVU89
 316 00aa 084B     		ldr	r3, .L38
 317 00ac 5B68     		ldr	r3, [r3, #4]
 473:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 318              		.loc 1 473 15 view .LVU90
 319 00ae 13F4005F 		tst	r3, #8192
 320 00b2 D7D1     		bne	.L23
 475:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 321              		.loc 1 475 11 is_stmt 1 view .LVU91
 475:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 322              		.loc 1 475 16 is_stmt 0 view .LVU92
 323 00b4 FFF7FEFF 		bl	HAL_GetTick
 324              	.LVL24:
 475:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 325              		.loc 1 475 31 view .LVU93
 326 00b8 401B     		subs	r0, r0, r5
 475:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 327              		.loc 1 475 14 view .LVU94
 328 00ba B0F57A7F 		cmp	r0, #1000
 329 00be F4D9     		bls	.L24
ARM GAS  /tmp/ccewlP9t.s 			page 16


 477:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 330              		.loc 1 477 20 view .LVU95
 331 00c0 0120     		movs	r0, #1
 332 00c2 00E0     		b	.L18
 333              	.LVL25:
 334              	.L37:
 501:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 502:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 503:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 504:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 335              		.loc 1 504 10 view .LVU96
 336 00c4 0020     		movs	r0, #0
 337              	.LVL26:
 338              	.L18:
 505:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 339              		.loc 1 505 1 view .LVU97
 340 00c6 38BD     		pop	{r3, r4, r5, pc}
 341              	.LVL27:
 342              	.L28:
 424:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 343              		.loc 1 424 12 view .LVU98
 344 00c8 0020     		movs	r0, #0
 345              	.LVL28:
 424:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 346              		.loc 1 424 12 view .LVU99
 347 00ca FCE7     		b	.L18
 348              	.L39:
 349              		.align	2
 350              	.L38:
 351 00cc 00480258 		.word	1476544512
 352 00d0 00040058 		.word	1476396032
 353              		.cfi_endproc
 354              	.LFE143:
 356              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 357              		.align	1
 358              		.global	HAL_PWREx_GetVoltageRange
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	HAL_PWREx_GetVoltageRange:
 364              	.LFB144:
 506:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 507:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 508:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage. Reflecting the last
 509:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        VOS value applied to the PMU.
 510:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The current applied VOS selection.
 511:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 512:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange (void)
 513:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 365              		.loc 1 513 1 is_stmt 1 view -0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 514:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the active voltage scaling */
 515:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CSR1 & PWR_CSR1_ACTVOS);
 370              		.loc 1 515 3 view .LVU101
ARM GAS  /tmp/ccewlP9t.s 			page 17


 371              		.loc 1 515 14 is_stmt 0 view .LVU102
 372 0000 024B     		ldr	r3, .L41
 373 0002 5868     		ldr	r0, [r3, #4]
 516:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 374              		.loc 1 516 1 view .LVU103
 375 0004 00F44040 		and	r0, r0, #49152
 376 0008 7047     		bx	lr
 377              	.L42:
 378 000a 00BF     		.align	2
 379              	.L41:
 380 000c 00480258 		.word	1476544512
 381              		.cfi_endproc
 382              	.LFE144:
 384              		.section	.text.HAL_PWREx_ControlStopModeVoltageScaling,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_PWREx_ControlStopModeVoltageScaling
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 391              	HAL_PWREx_ControlStopModeVoltageScaling:
 392              	.LVL29:
 393              	.LFB145:
 517:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 518:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 519:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage in STOP mode.
 520:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage when the
 521:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         system enters Stop mode to achieve a tradeoff between performance
 522:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and power consumption.
 523:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 524:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE3 : Regulator voltage output range
 525:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             3 mode.
 526:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE4 : Regulator voltage output range
 527:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             4 mode.
 528:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE5 : Regulator voltage output range
 529:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             5 mode.
 530:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The Stop mode voltage scaling for SVOS4 and SVOS5 sets the voltage
 531:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator in Low-power (LP) mode to further reduce power consumption.
 532:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When preselecting SVOS3, the use of the voltage regulator low-power
 533:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode (LP) can be selected by LPDS register bit.
 534:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
 535:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         when exiting from system Stop mode.
 536:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status.
 537:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 538:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
 539:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 394              		.loc 1 539 1 is_stmt 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 540:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 541:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));
 399              		.loc 1 541 3 view .LVU105
 542:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 543:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop mode voltage range */
 544:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
 400              		.loc 1 544 3 view .LVU106
ARM GAS  /tmp/ccewlP9t.s 			page 18


 401 0000 034A     		ldr	r2, .L44
 402 0002 1368     		ldr	r3, [r2]
 403 0004 23F44043 		bic	r3, r3, #49152
 404 0008 0343     		orrs	r3, r3, r0
 405 000a 1360     		str	r3, [r2]
 545:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 546:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 406              		.loc 1 546 3 view .LVU107
 547:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 407              		.loc 1 547 1 is_stmt 0 view .LVU108
 408 000c 0020     		movs	r0, #0
 409              	.LVL30:
 410              		.loc 1 547 1 view .LVU109
 411 000e 7047     		bx	lr
 412              	.L45:
 413              		.align	2
 414              	.L44:
 415 0010 00480258 		.word	1476544512
 416              		.cfi_endproc
 417              	.LFE145:
 419              		.section	.text.HAL_PWREx_GetStopModeVoltageRange,"ax",%progbits
 420              		.align	1
 421              		.global	HAL_PWREx_GetStopModeVoltageRange
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 426              	HAL_PWREx_GetStopModeVoltageRange:
 427              	.LFB146:
 548:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 549:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 550:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage in STOP mode.
 551:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The actual applied VOS selection.
 552:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 553:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
 554:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 428              		.loc 1 554 1 is_stmt 1 view -0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 555:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop voltage scaling */
 556:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_CR1_SVOS);
 433              		.loc 1 556 3 view .LVU111
 434              		.loc 1 556 14 is_stmt 0 view .LVU112
 435 0000 024B     		ldr	r3, .L47
 436 0002 1868     		ldr	r0, [r3]
 557:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 437              		.loc 1 557 1 view .LVU113
 438 0004 00F44040 		and	r0, r0, #49152
 439 0008 7047     		bx	lr
 440              	.L48:
 441 000a 00BF     		.align	2
 442              	.L47:
 443 000c 00480258 		.word	1476544512
 444              		.cfi_endproc
 445              	.LFE146:
 447              		.section	.text.HAL_PWREx_EnterSTOPMode,"ax",%progbits
ARM GAS  /tmp/ccewlP9t.s 			page 19


 448              		.align	1
 449              		.global	HAL_PWREx_EnterSTOPMode
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 454              	HAL_PWREx_EnterSTOPMode:
 455              	.LVL31:
 456              	.LFB147:
 558:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 559:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 560:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 561:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 562:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group2 Low Power Control Functions
 563:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Low power control functions
 564:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 565:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 566:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 567:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                      ##### Low power control functions #####
 568:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 569:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 570:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Domains Low Power modes configuration ***
 571:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================================
 572:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 573:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       This section provides the extended low power mode control APIs.
 574:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       The system presents 3 principles domains (D1, D2 and D3) that can be
 575:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       operated in low-power modes (DSTOP or DSTANDBY mode):
 576:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 577:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTOP mode to enters a domain to STOP mode:
 578:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D1 domain and/or D2 domain enters DSTOP mode only when the CPU
 579:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             subsystem is in CSTOP mode and has allocated peripheral in the
 580:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             domain.
 581:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             In DSTOP mode the domain bus matrix clock is stopped.
 582:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STOP mode using one of the following scenarios:
 583:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 domain enters DSTANDBY mode (powered off) and D2, D3 domains
 584:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 585:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 domain enters DSTANDBY mode (powered off) and D1, D3 domains
 586:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 587:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D3 domain enters DSTANDBY mode (powered off) and D1, D2 domains
 588:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 589:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D2 domains enter DSTANDBY mode (powered off) and D3 domain
 590:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 591:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D3 domains enter DSTANDBY mode (powered off) and D2 domain
 592:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 593:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 and D3 domains enter DSTANDBY mode (powered off) and D1 domain
 594:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 595:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1, D2 and D3 domains enter DSTOP mode.
 596:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) When the system enters STOP mode, the clocks are stopped and the
 597:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             regulator is running in main or low power mode.
 598:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D3 domain can be kept in Run mode regardless of the CPU status when
 599:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             enter STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function.
 600:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 601:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTANDBY mode to enters a domain to STANDBY mode:
 602:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The DSTANDBY mode is entered when the PDDS_Dn bit in PWR CPU control
 603:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             register (PWR_CPUCR) for the Dn domain selects Standby mode.
 604:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STANDBY mode only when D1, D2 and D3 domains enter
 605:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             DSTANDBY mode. Consequently the VCORE supply regulator is powered
 606:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             off.
ARM GAS  /tmp/ccewlP9t.s 			page 20


 607:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 608:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTOP mode ***
 609:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    ==================
 610:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 611:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode the domain bus matrix clock is stopped.
 612:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       The Flash memory can enter low-power Stop mode when it is enabled through
 613:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       FLPS in PWR_CR1 register. This allows a trade-off between domain DStop
 614:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       restart time and low power consumption.
 615:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 616:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode domain peripherals using the LSI or LSE clock and
 617:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       peripherals having a kernel clock request are still able to operate.
 618:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 619:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 620:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 621:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 622:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 623:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 624:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTOP mode is entered using the HAL_PWREx_EnterSTOPMode(Regulator,
 625:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          STOPEntry, Domain) function with:
 626:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Regulator:
 627:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_MAINREGULATOR_ON     : Main regulator ON.
 628:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_LOWPOWERREGULATOR_ON : Low Power regulator ON.
 629:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) STOPEntry:
 630:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFI : enter STOP mode with WFI instruction
 631:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFE : enter STOP mode with WFE instruction
 632:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Domain:
 633:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTOP mode.
 634:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTOP mode.
 635:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTOP mode.
 636:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 637:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 638:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 639:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 640:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTANDBY mode ***
 641:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    =====================
 642:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 643:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStandby mode:
 644:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain bus matrix clock is stopped.
 645:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain is powered down and the domain RAM and register contents
 646:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             are lost.
 647:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 648:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTANDBY mode it is recommended to call SCB_CleanDCache
 649:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 650:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 651:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 652:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 653:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTANDBY mode is entered using the HAL_PWREx_EnterSTANDBYMode
 654:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          (Domain) function with:
 655:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Domain:
 656:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTANDBY mode.
 657:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTANDBY mode.
 658:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTANDBY mode.
 659:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 660:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 661:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B), RTC
 662:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         wakeup, tamper event, time stamp event, external reset in NRST pin,
 663:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         IWDG reset.
ARM GAS  /tmp/ccewlP9t.s 			page 21


 664:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 665:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** Keep D3/SRD in RUN mode ***
 666:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****    ===============================
 667:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 668:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       D3/SRD domain can be kept in Run mode regardless of the CPU status when
 669:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       entering STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function
 670:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       with :
 671:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) D3State:
 672:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_STOP : D3/SDR domain follows the CPU sub-system
 673:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                                   mode.
 674:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_RUN : D3/SRD domain remains in Run mode regardless
 675:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                                  of CPU subsystem mode.
 676:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 677:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
 678:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     =======================================
 679:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 680:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       By setting the FLPS bit in the PWR_CR1 register using the
 681:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       HAL_PWREx_EnableFlashPowerDown() function, the Flash memory also enters
 682:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       power down mode when the device enters STOP mode. When the Flash memory is
 683:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       in power down mode, an additional startup delay is incurred when waking up
 684:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       from STOP mode.
 685:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 686:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Wakeup Pins configuration ****
 687:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
 688:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 689:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       Wakeup pins allow the system to exit from Standby mode. The configuration
 690:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       of wakeup pins is done with the HAL_PWREx_EnableWakeUpPin(sPinParams)
 691:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       function with:
 692:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) sPinParams: structure to enable and configure a wakeup pin:
 693:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) WakeUpPin: Wakeup pin to be enabled.
 694:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPolarity: Wakeup pin polarity (rising or falling edge).
 695:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPull: Wakeup pin pull (no pull, pull-up or pull-down).
 696:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 697:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       The wakeup pins are internally connected to the EXTI lines [55-60] to
 698:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       generate an interrupt if enabled. The EXTI lines configuration is done by
 699:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_EXTI_Dx_EventInputConfig() functions defined in the stm32h7xxhal.c
 700:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       file.
 701:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 702:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       When a wakeup pin event is received the HAL_PWREx_WAKEUP_PIN_IRQHandler is
 703:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       called and the appropriate flag is set in the PWR_WKUPFR register. Then in
 704:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_PWREx_WAKEUP_PIN_IRQHandler function the wakeup pin flag will be
 705:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       cleared and the appropriate user callback will be called. The user can add
 706:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       his own code by customization of function pointer HAL_PWREx_WKUPx_Callback.
 707:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 708:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 709:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 710:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 711:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 712:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_RETDS_CD)
 713:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 714:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter the system to STOP mode with main domain in DSTOP2.
 715:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, the domain bus matrix clock is stalled.
 716:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, memories and registers are maintained and peripherals
 717:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in CPU domain are no longer operational.
 718:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   All clocks in the VCORE domain are stopped, the PLL, the HSI and the
 719:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         HSE oscillators are disabled. Only Peripherals that have wakeup
 720:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         capability can switch on the HSI to receive a frame, and switch off
ARM GAS  /tmp/ccewlP9t.s 			page 22


 721:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI after receiving the frame if it is not a wakeup frame. In
 722:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         this case the HSI clock is propagated only to the peripheral
 723:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         requesting it.
 724:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When exiting STOP mode by issuing an interrupt or a wakeup event,
 725:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in
 726:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         RCC_CFGR register is set.
 727:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 728:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 729:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 730:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 731:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 732:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 733:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 734:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 735:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 736:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 737:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 738:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 739:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP2Mode (uint32_t Regulator, uint8_t STOPEntry)
 740:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 741:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 742:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 743:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 744:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 745:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 746:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 747:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 748:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Go to DStop2 mode (deep retention) when CPU domain enters Deepsleep */
 749:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CPUCR, PWR_CPUCR_RETDS_CD);
 750:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 751:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep DSTOP mode when SmartRun domain enters Deepsleep */
 752:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_SRD);
 753:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 754:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 755:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 756:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 757:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Ensure that all instructions are done before entering STOP mode */
 758:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   __ISB ();
 759:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   __DSB ();
 760:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 761:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select Stop mode entry */
 762:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 763:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 764:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 765:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 766:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 767:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 768:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 769:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Event */
 770:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 771:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 772:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 773:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 774:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 775:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 776:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_RETDS_CD) */
 777:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccewlP9t.s 			page 23


 778:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 779:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTOP mode.
 780:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain STOP
 781:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode. For dual core lines, this API should be executed with the
 782:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         corresponding Cortex-Mx to enter domain to DSTOP mode. When it is
 783:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         executed by all available Cortex-Mx, the system enter to STOP mode.
 784:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with domain parameter set to
 785:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_D1_DOMAIN (D1/CD), the whole system will enter in STOP mode
 786:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         independently of PWR_CPUCR_PDDS_Dx bits values if RUN_D3 bit in the
 787:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         CPUCR_RUN_D3 is cleared.
 788:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop mode the domain bus matrix clock is stopped.
 789:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enter Stop mode only when the CPU subsystem
 790:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         is in CStop mode, the EXTI wakeup sources are inactive and at least
 791:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         one PDDS_Dn bit in PWR CPU control register (PWR_CPUCR) for
 792:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         any domain request Stop.
 793:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 794:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         function in order to clean the D-Cache and guarantee the data
 795:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         integrity for the SRAM memories.
 796:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In System Stop mode, the domain peripherals that use the LSI or LSE
 797:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         clock, and the peripherals that have a kernel clock request to
 798:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         select HSI or CSI as source, are still able to operate.
 799:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 800:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 801:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 802:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 803:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 804:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 805:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 806:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 807:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 808:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 809:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter in DSTOP mode.
 810:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 811:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN : Enter D1/CD Domain to DSTOP mode.
 812:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
 813:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
 814:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 815:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 816:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
 817:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 457              		.loc 1 817 1 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462              		.loc 1 817 1 is_stmt 0 view .LVU115
 463 0000 10B4     		push	{r4}
 464              	.LCFI3:
 465              		.cfi_def_cfa_offset 4
 466              		.cfi_offset 4, -4
 818:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 819:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 467              		.loc 1 819 3 is_stmt 1 view .LVU116
 820:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 468              		.loc 1 820 3 view .LVU117
 821:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 469              		.loc 1 821 3 view .LVU118
ARM GAS  /tmp/ccewlP9t.s 			page 24


 822:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 823:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 824:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 470              		.loc 1 824 3 view .LVU119
 471 0002 174C     		ldr	r4, .L58
 472 0004 2368     		ldr	r3, [r4]
 473 0006 23F00103 		bic	r3, r3, #1
 474 000a 0343     		orrs	r3, r3, r0
 475 000c 2360     		str	r3, [r4]
 825:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 826:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 827:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 476              		.loc 1 827 3 view .LVU120
 477              		.loc 1 827 6 is_stmt 0 view .LVU121
 478 000e CAB9     		cbnz	r2, .L50
 828:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 829:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 830:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 831:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 832:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 833:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 834:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 835:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 836:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 837:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 838:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 839:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 840:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 841:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
 842:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 479              		.loc 1 842 5 is_stmt 1 view .LVU122
 480 0010 2369     		ldr	r3, [r4, #16]
 481 0012 23F00103 		bic	r3, r3, #1
 482 0016 2361     		str	r3, [r4, #16]
 843:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 844:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 845:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 483              		.loc 1 845 5 view .LVU123
 484 0018 124A     		ldr	r2, .L58+4
 485              	.LVL32:
 486              		.loc 1 845 5 is_stmt 0 view .LVU124
 487 001a 1369     		ldr	r3, [r2, #16]
 488 001c 43F00403 		orr	r3, r3, #4
 489 0020 1361     		str	r3, [r2, #16]
 846:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 847:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 848:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 490              		.loc 1 848 5 is_stmt 1 view .LVU125
 491              	.LBB14:
 492              	.LBI14:
 493              		.file 2 "../../Drivers/CMSIS/Include/cmsis_gcc.h"
   1:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  /tmp/ccewlP9t.s 			page 25


   7:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccewlP9t.s 			page 26


  64:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/ccewlP9t.s 			page 27


 121:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
ARM GAS  /tmp/ccewlP9t.s 			page 28


 178:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccewlP9t.s 			page 29


 235:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
ARM GAS  /tmp/ccewlP9t.s 			page 30


 292:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccewlP9t.s 			page 31


 349:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccewlP9t.s 			page 32


 406:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccewlP9t.s 			page 33


 463:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccewlP9t.s 			page 34


 520:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/ccewlP9t.s 			page 35


 577:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   
ARM GAS  /tmp/ccewlP9t.s 			page 36


 634:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccewlP9t.s 			page 37


 691:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccewlP9t.s 			page 38


 748:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:../../Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:../../Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:../../Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:../../Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccewlP9t.s 			page 39


 805:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:../../Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
ARM GAS  /tmp/ccewlP9t.s 			page 40


 862:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 494              		.loc 2 877 27 view .LVU126
 495              	.LBB15:
 878:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 496              		.loc 2 879 3 view .LVU127
 497              		.syntax unified
 498              	@ 879 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 499 0022 BFF34F8F 		dsb 0xF
 500              	@ 0 "" 2
 501              		.thumb
 502              		.syntax unified
 503              	.LBE15:
 504              	.LBE14:
 849:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 505              		.loc 1 849 5 view .LVU128
 506              	.LBB16:
 507              	.LBI16:
 866:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508              		.loc 2 866 27 view .LVU129
 509              	.LBB17:
 868:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510              		.loc 2 868 3 view .LVU130
 511              		.syntax unified
 512              	@ 868 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 513 0026 BFF36F8F 		isb 0xF
 514              	@ 0 "" 2
 515              		.thumb
 516              		.syntax unified
 517              	.LBE17:
 518              	.LBE16:
 850:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 851:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 852:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 519              		.loc 1 852 5 view .LVU131
 520              		.loc 1 852 8 is_stmt 0 view .LVU132
 521 002a 0129     		cmp	r1, #1
 522 002c 08D0     		beq	.L56
 853:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 854:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 855:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 856:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
ARM GAS  /tmp/ccewlP9t.s 			page 41


 857:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 858:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 859:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 860:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 523              		.loc 1 860 7 is_stmt 1 view .LVU133
 524              		.syntax unified
 525              	@ 860 "../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 526 002e 20BF     		wfe
 527              	@ 0 "" 2
 528              		.thumb
 529              		.syntax unified
 530              	.L52:
 861:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 862:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 863:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 864:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 531              		.loc 1 864 5 view .LVU134
 532 0030 0C4A     		ldr	r2, .L58+4
 533 0032 1369     		ldr	r3, [r2, #16]
 534 0034 23F00403 		bic	r3, r3, #4
 535 0038 1361     		str	r3, [r2, #16]
 536              	.L49:
 865:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 866:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
 867:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 868:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 869:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 870:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 871:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
 872:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 873:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 874:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 875:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 876:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 877:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 878:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 879:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 880:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 881:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 882:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 883:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 884:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 885:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 886:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 887:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 888:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 889:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 890:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 891:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 892:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 893:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 894:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 895:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 896:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 897:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 898:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 899:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
ARM GAS  /tmp/ccewlP9t.s 			page 42


 900:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 901:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 902:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 903:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 904:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 905:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 906:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 907:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 908:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 909:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
 910:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 911:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 912:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 913:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 914:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
 915:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 916:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 917:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 918:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 919:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 920:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 921:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 922:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 923:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 924:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 925:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
 926:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 927:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 928:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 929:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 537              		.loc 1 929 1 is_stmt 0 view .LVU135
 538 003a 5DF8044B 		ldr	r4, [sp], #4
 539              	.LCFI4:
 540              		.cfi_remember_state
 541              		.cfi_restore 4
 542              		.cfi_def_cfa_offset 0
 543 003e 7047     		bx	lr
 544              	.L56:
 545              	.LCFI5:
 546              		.cfi_restore_state
 855:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 547              		.loc 1 855 7 is_stmt 1 view .LVU136
 548              		.syntax unified
 549              	@ 855 "../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 550 0040 30BF     		wfi
 551              	@ 0 "" 2
 552              		.thumb
 553              		.syntax unified
 554 0042 F5E7     		b	.L52
 555              	.LVL33:
 556              	.L50:
 867:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 557              		.loc 1 867 8 view .LVU137
 867:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 558              		.loc 1 867 11 is_stmt 0 view .LVU138
 559 0044 012A     		cmp	r2, #1
 560 0046 05D0     		beq	.L57
ARM GAS  /tmp/ccewlP9t.s 			page 43


 926:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 561              		.loc 1 926 5 is_stmt 1 view .LVU139
 562 0048 054A     		ldr	r2, .L58
 563              	.LVL34:
 926:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 564              		.loc 1 926 5 is_stmt 0 view .LVU140
 565 004a 1369     		ldr	r3, [r2, #16]
 566 004c 23F00403 		bic	r3, r3, #4
 567 0050 1361     		str	r3, [r2, #16]
 568              		.loc 1 929 1 view .LVU141
 569 0052 F2E7     		b	.L49
 570              	.LVL35:
 571              	.L57:
 906:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 572              		.loc 1 906 5 is_stmt 1 view .LVU142
 573 0054 024A     		ldr	r2, .L58
 574              	.LVL36:
 906:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 575              		.loc 1 906 5 is_stmt 0 view .LVU143
 576 0056 1369     		ldr	r3, [r2, #16]
 577 0058 23F00203 		bic	r3, r3, #2
 578 005c 1361     		str	r3, [r2, #16]
 579 005e ECE7     		b	.L49
 580              	.L59:
 581              		.align	2
 582              	.L58:
 583 0060 00480258 		.word	1476544512
 584 0064 00ED00E0 		.word	-536810240
 585              		.cfi_endproc
 586              	.LFE147:
 588              		.section	.text.HAL_PWREx_ClearPendingEvent,"ax",%progbits
 589              		.align	1
 590              		.global	HAL_PWREx_ClearPendingEvent
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 595              	HAL_PWREx_ClearPendingEvent:
 596              	.LFB148:
 930:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 931:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 932:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear pending event.
 933:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API clears the pending event in order to enter a given CPU
 934:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to CSLEEP or CSTOP. It should be called just before APIs performing
 935:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         enter low power mode using Wait For Event request.
 936:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
 937:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 938:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 939:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearPendingEvent (void)
 940:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 597              		.loc 1 940 1 is_stmt 1 view -0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 941:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 942:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the current Core */
 943:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (HAL_GetCurrentCPUID () == CM7_CPUID)
ARM GAS  /tmp/ccewlP9t.s 			page 44


 944:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 945:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 946:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 947:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 948:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 949:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __SEV ();
 950:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 951:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 952:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 953:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   __WFE ();
 602              		.loc 1 953 3 view .LVU145
 603              		.syntax unified
 604              	@ 953 "../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 605 0000 20BF     		wfe
 606              	@ 0 "" 2
 954:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 955:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 607              		.loc 1 955 1 is_stmt 0 view .LVU146
 608              		.thumb
 609              		.syntax unified
 610 0002 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE148:
 614              		.section	.text.HAL_PWREx_EnterSTANDBYMode,"ax",%progbits
 615              		.align	1
 616              		.global	HAL_PWREx_EnterSTANDBYMode
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 621              	HAL_PWREx_EnterSTANDBYMode:
 622              	.LVL37:
 623              	.LFB149:
 956:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 957:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 958:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTANDBY mode.
 959:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain
 960:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         STANDBY mode. For dual core lines, this API should be executed with
 961:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the corresponding Cortex-Mx to enter domain to DSTANDBY mode. When
 962:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         it is executed by all available Cortex-Mx, the system enter STANDBY
 963:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode.
 964:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with D1/SRD the selected
 965:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain will enter the whole system in STOP if PWR_CPUCR_PDDS_D3 = 0
 966:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and enter the whole system in STANDBY if PWR_CPUCR_PDDS_D3 = 1.
 967:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The DStandby mode is entered when all PDDS_Dn bits in PWR_CPUCR for
 968:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the Dn domain select Standby mode. When the system enters Standby
 969:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode, the voltage regulator is disabled.
 970:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When D2 or D3 domain is in DStandby mode and the CPU sets the
 971:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain PDDS_Dn bit to select Stop mode, the domain remains in
 972:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         DStandby mode. The domain will only exit DStandby when the CPU
 973:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         allocates a peripheral in the domain.
 974:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enters Standby mode only when the D1 and D2
 975:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain are in DStandby.
 976:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTANDBY mode it is recommended to call
 977:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SCB_CleanDCache function in order to clean the D-Cache and guarantee
 978:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the data integrity for the SRAM memories.
 979:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter to STANDBY mode.
 980:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccewlP9t.s 			page 45


 981:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN: Enter D1/CD Domain to DSTANDBY mode.
 982:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
 983:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
 984:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 985:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 986:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
 987:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 624              		.loc 1 987 1 is_stmt 1 view -0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 988:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 989:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 629              		.loc 1 989 3 view .LVU148
 990:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 991:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 992:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 630              		.loc 1 992 3 view .LVU149
 631              		.loc 1 992 6 is_stmt 0 view .LVU150
 632 0000 58B9     		cbnz	r0, .L62
 993:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 994:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 995:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 996:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 997:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 998:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 999:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1000:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1001:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1002:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1003:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1004:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1005:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1006:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1007:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
 633              		.loc 1 1007 5 is_stmt 1 view .LVU151
 634 0002 0D4A     		ldr	r2, .L66
 635 0004 1369     		ldr	r3, [r2, #16]
 636 0006 43F00103 		orr	r3, r3, #1
 637 000a 1361     		str	r3, [r2, #16]
1008:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1009:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1010:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1011:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
1012:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
1013:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1014:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1015:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 638              		.loc 1 1015 5 view .LVU152
 639 000c 0B4A     		ldr	r2, .L66+4
 640 000e 1369     		ldr	r3, [r2, #16]
 641 0010 43F00403 		orr	r3, r3, #4
 642 0014 1361     		str	r3, [r2, #16]
1016:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1017:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1018:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
ARM GAS  /tmp/ccewlP9t.s 			page 46


1019:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1020:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1021:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1022:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1023:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 643              		.loc 1 1023 5 view .LVU153
 644              		.syntax unified
 645              	@ 1023 "../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 646 0016 30BF     		wfi
 647              	@ 0 "" 2
 648              		.thumb
 649              		.syntax unified
 650 0018 7047     		bx	lr
 651              	.L62:
1024:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1025:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
1026:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 652              		.loc 1 1026 8 view .LVU154
 653              		.loc 1 1026 11 is_stmt 0 view .LVU155
 654 001a 0128     		cmp	r0, #1
 655 001c 05D0     		beq	.L65
1027:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1028:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1029:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
1030:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1031:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1032:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
1033:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
1034:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1035:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
1036:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1037:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1038:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1039:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1040:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1041:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1042:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1043:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D2);
1044:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1045:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1046:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1047:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1048:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1049:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1050:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1051:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1052:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1053:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1054:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
1055:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1056:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1057:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
1058:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1059:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1060:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1061:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 656              		.loc 1 1061 5 is_stmt 1 view .LVU156
ARM GAS  /tmp/ccewlP9t.s 			page 47


 657 001e 064A     		ldr	r2, .L66
 658 0020 1369     		ldr	r3, [r2, #16]
 659 0022 43F00403 		orr	r3, r3, #4
 660 0026 1361     		str	r3, [r2, #16]
1062:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1063:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1064:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1065:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
1066:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1067:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1068:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 661              		.loc 1 1068 1 is_stmt 0 view .LVU157
 662 0028 7047     		bx	lr
 663              	.L65:
1029:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 664              		.loc 1 1029 5 is_stmt 1 view .LVU158
 665 002a 034A     		ldr	r2, .L66
 666 002c 1369     		ldr	r3, [r2, #16]
 667 002e 43F00203 		orr	r3, r3, #2
 668 0032 1361     		str	r3, [r2, #16]
 669 0034 7047     		bx	lr
 670              	.L67:
 671 0036 00BF     		.align	2
 672              	.L66:
 673 0038 00480258 		.word	1476544512
 674 003c 00ED00E0 		.word	-536810240
 675              		.cfi_endproc
 676              	.LFE149:
 678              		.section	.text.HAL_PWREx_ConfigD3Domain,"ax",%progbits
 679              		.align	1
 680              		.global	HAL_PWREx_ConfigD3Domain
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 685              	HAL_PWREx_ConfigD3Domain:
 686              	.LVL38:
 687              	.LFB150:
1069:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1070:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1071:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the D3/SRD Domain state when the System in low power mode.
1072:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  D3State : Specifies the D3/SRD state.
1073:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1074:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_STOP : D3/SRD domain will follow the most deep
1075:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      CPU sub-system low power mode.
1076:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_RUN : D3/SRD domain will stay in RUN mode
1077:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     regardless of the CPU sub-system low
1078:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     power mode.
1079:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1080:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1081:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
1082:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 688              		.loc 1 1082 1 view -0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692              		@ link register save eliminated.
1083:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
ARM GAS  /tmp/ccewlP9t.s 			page 48


1084:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_D3_STATE (D3State));
 693              		.loc 1 1084 3 view .LVU160
1085:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1086:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep D3/SRD in run mode */
1087:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
 694              		.loc 1 1087 3 view .LVU161
 695 0000 034A     		ldr	r2, .L69
 696 0002 1369     		ldr	r3, [r2, #16]
 697 0004 23F40063 		bic	r3, r3, #2048
 698 0008 0343     		orrs	r3, r3, r0
 699 000a 1361     		str	r3, [r2, #16]
1088:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 700              		.loc 1 1088 1 is_stmt 0 view .LVU162
 701 000c 7047     		bx	lr
 702              	.L70:
 703 000e 00BF     		.align	2
 704              	.L69:
 705 0010 00480258 		.word	1476544512
 706              		.cfi_endproc
 707              	.LFE150:
 709              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 710              		.align	1
 711              		.global	HAL_PWREx_EnableFlashPowerDown
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 716              	HAL_PWREx_EnableFlashPowerDown:
 717              	.LFB151:
1089:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1090:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1091:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1092:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear HOLD2F, HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2 flags for a
1093:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        given domain.
1094:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  DomainFlags : Specifies the Domain flags to be cleared.
1095:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1096:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN_FLAGS : Clear D1 Domain flags.
1097:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN_FLAGS : Clear D2 Domain flags.
1098:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_ALL_DOMAIN_FLAGS : Clear D1 and D2 Domain flags.
1099:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1100:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1101:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearDomainFlags (uint32_t DomainFlags)
1102:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1103:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1104:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN_FLAG (DomainFlags));
1105:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1106:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D1 CPU flags */
1107:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (DomainFlags == PWR_D1_DOMAIN_FLAGS)
1108:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1109:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1110:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
1111:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1112:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D2 CPU flags */
1113:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (DomainFlags == PWR_D2_DOMAIN_FLAGS)
1114:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1115:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1116:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1117:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccewlP9t.s 			page 49


1118:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1119:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1120:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1121:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
1122:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1123:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1124:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1125:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1126:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1127:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1128:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Hold the CPU and their domain peripherals when exiting STOP mode.
1129:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU : Specifies the core to be held.
1130:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1131:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU1: Hold CPU1 and set CPU2 as master.
1132:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU2: Hold CPU2 and set CPU1 as master.
1133:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1134:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1135:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_HoldCore (uint32_t CPU)
1136:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1137:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1138:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1139:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1140:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1141:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1142:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1143:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
1144:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1145:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU1 is not held */
1146:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPU2CR & PWR_CPU2CR_HOLD1) != PWR_CPU2CR_HOLD1)
1147:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1148:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD2 bit */
1149:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
1150:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1151:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1152:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1153:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1154:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1155:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1156:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1157:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1158:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU2 is not held */
1159:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPUCR & PWR_CPUCR_HOLD2) != PWR_CPUCR_HOLD2)
1160:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1161:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD1 bit */
1162:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1163:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1164:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1165:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1166:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1167:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1168:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1169:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1170:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return status;
1171:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1172:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1173:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1174:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Release the CPU and their domain peripherals after a wake-up from
ARM GAS  /tmp/ccewlP9t.s 			page 50


1175:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        STOP mode.
1176:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU: Specifies the core to be released.
1177:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1178:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU1: Release the CPU1 and their domain
1179:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1180:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU2: Release the CPU2 and their domain
1181:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1182:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1183:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1184:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ReleaseCore (uint32_t CPU)
1185:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1186:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1187:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1188:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1189:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1190:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
1191:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1192:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD2 bit */
1193:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
1194:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1195:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1196:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1197:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD1 bit */
1198:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1199:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1200:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1201:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1202:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1203:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1204:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1205:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Flash Power Down in Stop mode.
1206:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is enabled  the Flash memory enters low-power
1207:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode when D1/SRD domain is in DStop mode. This feature allows to
1208:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         obtain the best trade-off between low-power consumption and restart
1209:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         time when exiting from DStop mode.
1210:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1211:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1212:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown (void)
1213:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 718              		.loc 1 1213 1 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
1214:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Flash Power Down */
1215:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 723              		.loc 1 1215 3 view .LVU164
 724 0000 024A     		ldr	r2, .L72
 725 0002 1368     		ldr	r3, [r2]
 726 0004 43F40073 		orr	r3, r3, #512
 727 0008 1360     		str	r3, [r2]
1216:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 728              		.loc 1 1216 1 is_stmt 0 view .LVU165
 729 000a 7047     		bx	lr
 730              	.L73:
 731              		.align	2
 732              	.L72:
ARM GAS  /tmp/ccewlP9t.s 			page 51


 733 000c 00480258 		.word	1476544512
 734              		.cfi_endproc
 735              	.LFE151:
 737              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 738              		.align	1
 739              		.global	HAL_PWREx_DisableFlashPowerDown
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 744              	HAL_PWREx_DisableFlashPowerDown:
 745              	.LFB152:
1217:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1218:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1219:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Flash Power Down in Stop mode.
1220:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is disabled  the Flash memory is kept on
1221:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         normal mode when D1/SRD domain is in DStop mode. This feature allows
1222:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to obtain the best trade-off between low-power consumption and
1223:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         restart time when exiting from DStop mode.
1224:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1225:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1226:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown (void)
1227:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 746              		.loc 1 1227 1 is_stmt 1 view -0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              		@ link register save eliminated.
1228:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Flash Power Down */
1229:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
 751              		.loc 1 1229 3 view .LVU167
 752 0000 024A     		ldr	r2, .L75
 753 0002 1368     		ldr	r3, [r2]
 754 0004 23F40073 		bic	r3, r3, #512
 755 0008 1360     		str	r3, [r2]
1230:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 756              		.loc 1 1230 1 is_stmt 0 view .LVU168
 757 000a 7047     		bx	lr
 758              	.L76:
 759              		.align	2
 760              	.L75:
 761 000c 00480258 		.word	1476544512
 762              		.cfi_endproc
 763              	.LFE152:
 765              		.section	.text.HAL_PWREx_EnableWakeUpPin,"ax",%progbits
 766              		.align	1
 767              		.global	HAL_PWREx_EnableWakeUpPin
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 772              	HAL_PWREx_EnableWakeUpPin:
 773              	.LVL39:
 774              	.LFB153:
1231:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1232:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_SRDRAMSO)
1233:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1234:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable memory block shut-off in DStop or DStop2 modes
1235:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop or DStop2 mode, the content of the memory blocks is
ARM GAS  /tmp/ccewlP9t.s 			page 52


1236:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         maintained. Further power optimization can be obtained by switching
1237:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         off some memory blocks. This optimization implies loss of the memory
1238:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         content. The user can select which memory is discarded during STOP
1239:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode by means of xxSO bits.
1240:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to shut-off during DStop or
1241:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop2 mode.
1242:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1243:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1244:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1245:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1246:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1247:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1248:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1249:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1250:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1251:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1252:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1253:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1254:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1255:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMemoryShutOff (uint32_t MemoryBlock)
1256:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1257:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1258:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1259:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1260:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable memory block shut-off */
1261:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, MemoryBlock);
1262:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1263:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1264:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1265:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable memory block shut-off in DStop or DStop2 modes
1266:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to keep content during
1267:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop or DStop2 mode.
1268:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1269:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1270:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1271:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1272:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1273:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1274:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1275:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1276:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1277:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1278:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1279:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1280:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1281:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMemoryShutOff (uint32_t MemoryBlock)
1282:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1283:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1284:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1285:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1286:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable memory block shut-off */
1287:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, MemoryBlock);
1288:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1289:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_SRDRAMSO) */
1290:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1291:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1292:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Wake-up PINx functionality.
ARM GAS  /tmp/ccewlP9t.s 			page 53


1293:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sPinParams : Pointer to a PWREx_WakeupPinTypeDef structure that
1294:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      contains the configuration information for the wake-up
1295:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      Pin.
1296:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1297:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx. All combination are allowed: wake up only
1298:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
1299:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M4.
1300:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1301:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1302:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
1303:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 775              		.loc 1 1303 1 is_stmt 1 view -0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780              		.loc 1 1303 1 is_stmt 0 view .LVU170
 781 0000 10B4     		push	{r4}
 782              	.LCFI6:
 783              		.cfi_def_cfa_offset 4
 784              		.cfi_offset 4, -4
1304:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t pinConfig;
 785              		.loc 1 1304 3 is_stmt 1 view .LVU171
1305:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regMask;
 786              		.loc 1 1305 3 view .LVU172
1306:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
 787              		.loc 1 1306 3 view .LVU173
 788              	.LVL40:
1307:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1308:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1309:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
 789              		.loc 1 1309 3 view .LVU174
1310:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
 790              		.loc 1 1310 3 view .LVU175
1311:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));
 791              		.loc 1 1311 3 view .LVU176
1312:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1313:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   pinConfig = sPinParams->WakeUpPin | \
 792              		.loc 1 1313 3 view .LVU177
 793              		.loc 1 1313 25 is_stmt 0 view .LVU178
 794 0002 0368     		ldr	r3, [r0]
1314:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 795              		.loc 1 1314 26 view .LVU179
 796 0004 4168     		ldr	r1, [r0, #4]
 797              	.LVL41:
 798              	.LBB18:
 799              	.LBI18:
 880:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccewlP9t.s 			page 54


 890:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccewlP9t.s 			page 55


 947:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:../../Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 800              		.loc 2 981 31 is_stmt 1 view .LVU180
 801              	.LBB19:
 982:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 802              		.loc 2 983 3 view .LVU181
 984:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 803              		.loc 2 988 4 view .LVU182
 804              		.syntax unified
 805              	@ 988 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 806 0006 93FAA3F2 		rbit r2, r3
 807              	@ 0 "" 2
 808              	.LVL42:
 989:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /tmp/ccewlP9t.s 			page 56


 995:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 809              		.loc 2 1001 3 view .LVU183
 810              		.loc 2 1001 3 is_stmt 0 view .LVU184
 811              		.thumb
 812              		.syntax unified
 813              	.LBE19:
 814              	.LBE18:
 815              		.loc 1 1314 45 view .LVU185
 816 000a B2FA82F2 		clz	r2, r2
 817              		.loc 1 1314 81 view .LVU186
 818 000e 0832     		adds	r2, r2, #8
 819              		.loc 1 1314 107 view .LVU187
 820 0010 02F01F02 		and	r2, r2, #31
 821              		.loc 1 1314 40 view .LVU188
 822 0014 01FA02F2 		lsl	r2, r1, r2
1313:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 823              		.loc 1 1313 37 view .LVU189
 824 0018 43EA0201 		orr	r1, r3, r2
 825              	.LVL43:
 826              	.LBB20:
 827              	.LBI20:
 981:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 828              		.loc 2 981 31 is_stmt 1 view .LVU190
 829              	.LBB21:
 983:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 830              		.loc 2 983 3 view .LVU191
 988:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 831              		.loc 2 988 4 view .LVU192
 832              		.syntax unified
 833              	@ 988 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 834 001c 93FAA3F2 		rbit r2, r3
 835              	@ 0 "" 2
 836              	.LVL44:
 837              		.loc 2 1001 3 view .LVU193
 838              		.loc 2 1001 3 is_stmt 0 view .LVU194
 839              		.thumb
 840              		.syntax unified
 841              	.LBE21:
 842              	.LBE20:
1315:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL
 843              		.loc 1 1315 42 view .LVU195
 844 0020 B2FA82F2 		clz	r2, r2
 845              		.loc 1 1315 115 view .LVU196
 846 0024 0832     		adds	r2, r2, #8
 847 0026 5200     		lsls	r2, r2, #1
 848              		.loc 1 1315 144 view .LVU197
 849 0028 02F01E02 		and	r2, r2, #30
 850              		.loc 1 1315 36 view .LVU198
 851 002c 8468     		ldr	r4, [r0, #8]
 852 002e 04FA02F2 		lsl	r2, r4, r2
1313:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
ARM GAS  /tmp/ccewlP9t.s 			page 57


 853              		.loc 1 1313 13 view .LVU199
 854 0032 0A43     		orrs	r2, r2, r1
 855              	.LVL45:
1316:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1317:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   regMask   = sPinParams->WakeUpPin | \
 856              		.loc 1 1317 3 is_stmt 1 view .LVU200
 857              	.LBB22:
 858              	.LBI22:
 981:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 859              		.loc 2 981 31 view .LVU201
 860              	.LBB23:
 983:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 861              		.loc 2 983 3 view .LVU202
 988:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 862              		.loc 2 988 4 view .LVU203
 863              		.syntax unified
 864              	@ 988 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 865 0034 93FAA3F1 		rbit r1, r3
 866              	@ 0 "" 2
 867              	.LVL46:
 868              		.loc 2 1001 3 view .LVU204
 869              		.loc 2 1001 3 is_stmt 0 view .LVU205
 870              		.thumb
 871              		.syntax unified
 872              	.LBE23:
 873              	.LBE22:
1318:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 874              		.loc 1 1318 75 view .LVU206
 875 0038 B1FA81F1 		clz	r1, r1
 876 003c 01F01F0C 		and	ip, r1, #31
 877              		.loc 1 1318 35 view .LVU207
 878 0040 4FF48071 		mov	r1, #256
 879 0044 01FA0CF1 		lsl	r1, r1, ip
1317:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 880              		.loc 1 1317 37 view .LVU208
 881 0048 1943     		orrs	r1, r1, r3
 882              	.LVL47:
 883              	.LBB24:
 884              	.LBI24:
 981:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 885              		.loc 2 981 31 is_stmt 1 view .LVU209
 886              	.LBB25:
 983:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 887              		.loc 2 983 3 view .LVU210
 988:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 888              		.loc 2 988 4 view .LVU211
 889              		.syntax unified
 890              	@ 988 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 891 004a 93FAA3F3 		rbit r3, r3
 892              	@ 0 "" 2
 893              	.LVL48:
 894              		.loc 2 1001 3 view .LVU212
 895              		.loc 2 1001 3 is_stmt 0 view .LVU213
 896              		.thumb
 897              		.syntax unified
 898              	.LBE25:
 899              	.LBE24:
ARM GAS  /tmp/ccewlP9t.s 			page 58


1319:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSE
 900              		.loc 1 1319 30 view .LVU214
 901 004e B3FA83F3 		clz	r3, r3
 902              		.loc 1 1319 66 view .LVU215
 903 0052 5B00     		lsls	r3, r3, #1
 904              		.loc 1 1319 103 view .LVU216
 905 0054 03F01E03 		and	r3, r3, #30
 906              		.loc 1 1319 25 view .LVU217
 907 0058 4FF4403C 		mov	ip, #196608
 908 005c 0CFA03F3 		lsl	r3, ip, r3
1317:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 909              		.loc 1 1317 13 view .LVU218
 910 0060 0B43     		orrs	r3, r3, r1
 911              	.LVL49:
1320:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1321:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable and Specify the Wake-Up pin polarity and the pull configuration
1322:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****      for the event detection (rising or falling edge) */
1323:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
 912              		.loc 1 1323 3 is_stmt 1 view .LVU219
 913 0062 0A4C     		ldr	r4, .L79
 914 0064 A16A     		ldr	r1, [r4, #40]
 915 0066 21EA0303 		bic	r3, r1, r3
 916              	.LVL50:
 917              		.loc 1 1323 3 is_stmt 0 view .LVU220
 918 006a 1A43     		orrs	r2, r2, r3
 919              	.LVL51:
 920              		.loc 1 1323 3 view .LVU221
 921 006c A262     		str	r2, [r4, #40]
1324:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifndef DUAL_CORE
1325:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the Wakeup Pin EXTI Line */
1326:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos))
 922              		.loc 1 1326 3 is_stmt 1 view .LVU222
 923 006e 4FF0B042 		mov	r2, #1476395008
 924 0072 D2F89030 		ldr	r3, [r2, #144]
 925 0076 23F0FC53 		bic	r3, r3, #528482304
 926 007a 0168     		ldr	r1, [r0]
 927 007c 43EAC153 		orr	r3, r3, r1, lsl #23
 928 0080 C2F89030 		str	r3, [r2, #144]
1327:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !DUAL_CORE */
1328:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 929              		.loc 1 1328 1 is_stmt 0 view .LVU223
 930 0084 5DF8044B 		ldr	r4, [sp], #4
 931              	.LCFI7:
 932              		.cfi_restore 4
 933              		.cfi_def_cfa_offset 0
 934 0088 7047     		bx	lr
 935              	.L80:
 936 008a 00BF     		.align	2
 937              	.L79:
 938 008c 00480258 		.word	1476544512
 939              		.cfi_endproc
 940              	.LFE153:
 942              		.section	.text.HAL_PWREx_DisableWakeUpPin,"ax",%progbits
 943              		.align	1
 944              		.global	HAL_PWREx_DisableWakeUpPin
 945              		.syntax unified
 946              		.thumb
ARM GAS  /tmp/ccewlP9t.s 			page 59


 947              		.thumb_func
 949              	HAL_PWREx_DisableWakeUpPin:
 950              	.LVL52:
 951              	.LFB154:
1329:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1330:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1331:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Wake-up PINx functionality.
1332:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpPin : Specifies the Wake-Up pin to be disabled.
1333:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1334:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN1 : Disable PA0  wake-up PIN.
1335:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN2 : Disable PA2  wake-up PIN.
1336:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN3 : Disable PI8  wake-up PIN.
1337:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN4 : Disable PC13 wake-up PIN.
1338:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN5 : Disable PI11 wake-up PIN.
1339:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN6 : Disable PC1  wake-up PIN.
1340:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
1341:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1342:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1343:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1344:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
1345:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 952              		.loc 1 1345 1 is_stmt 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
1346:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1347:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));
 957              		.loc 1 1347 3 view .LVU225
1348:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1349:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the WakeUpPin */
1350:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
 958              		.loc 1 1350 3 view .LVU226
 959 0000 024A     		ldr	r2, .L82
 960 0002 936A     		ldr	r3, [r2, #40]
 961 0004 23EA0003 		bic	r3, r3, r0
 962 0008 9362     		str	r3, [r2, #40]
1351:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 963              		.loc 1 1351 1 is_stmt 0 view .LVU227
 964 000a 7047     		bx	lr
 965              	.L83:
 966              		.align	2
 967              	.L82:
 968 000c 00480258 		.word	1476544512
 969              		.cfi_endproc
 970              	.LFE154:
 972              		.section	.text.HAL_PWREx_GetWakeupFlag,"ax",%progbits
 973              		.align	1
 974              		.global	HAL_PWREx_GetWakeupFlag
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 979              	HAL_PWREx_GetWakeupFlag:
 980              	.LVL53:
 981              	.LFB155:
1352:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1353:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
ARM GAS  /tmp/ccewlP9t.s 			page 60


1354:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the Wake-Up Pin pending flags.
1355:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag : Specifies the Wake-Up PIN flag to be checked.
1356:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1357:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1    : Get wakeup event received from PA0.
1358:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2    : Get wakeup event received from PA2.
1359:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3    : Get wakeup event received from PI8.
1360:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4    : Get wakeup event received from PC13.
1361:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5    : Get wakeup event received from PI11.
1362:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6    : Get wakeup event received from PC1.
1363:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Get Wakeup event received from all
1364:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      wake up pins.
1365:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1366:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1367:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The Wake-Up pin flag.
1368:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1369:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
1370:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 982              		.loc 1 1370 1 is_stmt 1 view -0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986              		@ link register save eliminated.
1371:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1372:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 987              		.loc 1 1372 3 view .LVU229
1373:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1374:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the wake up pin flag */
1375:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->WKUPFR & WakeUpFlag);
 988              		.loc 1 1375 3 view .LVU230
 989              		.loc 1 1375 14 is_stmt 0 view .LVU231
 990 0000 014B     		ldr	r3, .L85
 991 0002 5B6A     		ldr	r3, [r3, #36]
1376:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 992              		.loc 1 1376 1 view .LVU232
 993 0004 1840     		ands	r0, r0, r3
 994              	.LVL54:
 995              		.loc 1 1376 1 view .LVU233
 996 0006 7047     		bx	lr
 997              	.L86:
 998              		.align	2
 999              	.L85:
 1000 0008 00480258 		.word	1476544512
 1001              		.cfi_endproc
 1002              	.LFE155:
 1004              		.section	.text.HAL_PWREx_ClearWakeupFlag,"ax",%progbits
 1005              		.align	1
 1006              		.global	HAL_PWREx_ClearWakeupFlag
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1011              	HAL_PWREx_ClearWakeupFlag:
 1012              	.LVL55:
 1013              	.LFB156:
1377:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1378:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1379:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear the Wake-Up pin pending flag.
1380:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
ARM GAS  /tmp/ccewlP9t.s 			page 61


1381:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1382:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1 : Clear the wakeup event received from PA0.
1383:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2 : Clear the wakeup event received from PA2.
1384:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3 : Clear the wakeup event received from PI8.
1385:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4 : Clear the wakeup event received from PC13.
1386:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5 : Clear the wakeup event received from PI11.
1387:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6 : Clear the wakeup event received from PC1.
1388:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Clear the wakeup events received from
1389:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      all wake up pins.
1390:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1391:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1392:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1393:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1394:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
1395:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1014              		.loc 1 1395 1 is_stmt 1 view -0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
1396:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1397:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 1019              		.loc 1 1397 3 view .LVU235
1398:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1399:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear the wake up event received from wake up pin x */
1400:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->WKUPCR, WakeUpFlag);
 1020              		.loc 1 1400 3 view .LVU236
 1021 0000 054B     		ldr	r3, .L90
 1022 0002 1A6A     		ldr	r2, [r3, #32]
 1023 0004 0243     		orrs	r2, r2, r0
 1024 0006 1A62     		str	r2, [r3, #32]
1401:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1402:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the wake up event is well cleared */
1403:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->WKUPFR & WakeUpFlag) != 0U)
 1025              		.loc 1 1403 3 view .LVU237
 1026              		.loc 1 1403 11 is_stmt 0 view .LVU238
 1027 0008 5B6A     		ldr	r3, [r3, #36]
 1028              		.loc 1 1403 6 view .LVU239
 1029 000a 0342     		tst	r3, r0
 1030 000c 01D1     		bne	.L89
1404:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1405:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_ERROR;
1406:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1407:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1408:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1031              		.loc 1 1408 10 view .LVU240
 1032 000e 0020     		movs	r0, #0
 1033              	.LVL56:
 1034              		.loc 1 1408 10 view .LVU241
 1035 0010 7047     		bx	lr
 1036              	.LVL57:
 1037              	.L89:
1405:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1038              		.loc 1 1405 12 view .LVU242
 1039 0012 0120     		movs	r0, #1
 1040              	.LVL58:
1409:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/ccewlP9t.s 			page 62


 1041              		.loc 1 1409 1 view .LVU243
 1042 0014 7047     		bx	lr
 1043              	.L91:
 1044 0016 00BF     		.align	2
 1045              	.L90:
 1046 0018 00480258 		.word	1476544512
 1047              		.cfi_endproc
 1048              	.LFE156:
 1050              		.section	.text.HAL_PWREx_WKUP1_Callback,"ax",%progbits
 1051              		.align	1
 1052              		.weak	HAL_PWREx_WKUP1_Callback
 1053              		.syntax unified
 1054              		.thumb
 1055              		.thumb_func
 1057              	HAL_PWREx_WKUP1_Callback:
 1058              	.LFB158:
1410:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1411:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1412:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief This function handles the PWR WAKEUP PIN interrupt request.
1413:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
1414:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1415:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1416:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
1417:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1418:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
1419:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
1420:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1421:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF1 flag */
1422:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
1423:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1424:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP1 interrupt user callback */
1425:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP1_Callback ();
1426:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1427:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
1428:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1429:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF2 flag */
1430:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
1431:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1432:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP2 interrupt user callback */
1433:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP2_Callback ();
1434:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1435:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1436:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
1437:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1438:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF3 flag */
1439:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
1440:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1441:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP3 interrupt user callback */
1442:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP3_Callback ();
1443:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1444:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
1446:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1447:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF4 flag */
1448:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
1449:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1450:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP4 interrupt user callback */
ARM GAS  /tmp/ccewlP9t.s 			page 63


1451:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP4_Callback ();
1452:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1453:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1454:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
1455:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1456:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF5 flag */
1457:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
1458:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1459:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP5 interrupt user callback */
1460:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP5_Callback ();
1461:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1462:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1463:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1464:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1465:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF6 flag */
1466:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
1467:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1468:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP6 interrupt user callback */
1469:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP6_Callback ();
1470:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1471:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1472:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1473:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1474:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP1 interrupt callback.
1475:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1476:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1477:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP1_Callback (void)
1478:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1059              		.loc 1 1478 1 is_stmt 1 view -0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              		@ link register save eliminated.
1479:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1480:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP1Callback can be implemented in the user file
1481:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1482:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1064              		.loc 1 1482 1 view .LVU245
 1065 0000 7047     		bx	lr
 1066              		.cfi_endproc
 1067              	.LFE158:
 1069              		.section	.text.HAL_PWREx_WKUP2_Callback,"ax",%progbits
 1070              		.align	1
 1071              		.weak	HAL_PWREx_WKUP2_Callback
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1076              	HAL_PWREx_WKUP2_Callback:
 1077              	.LFB159:
1483:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1484:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1485:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP2 interrupt callback.
1486:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1487:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1488:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP2_Callback (void)
1489:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1078              		.loc 1 1489 1 view -0
ARM GAS  /tmp/ccewlP9t.s 			page 64


 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
1490:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1491:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP2Callback can be implemented in the user file
1492:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1493:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1083              		.loc 1 1493 1 view .LVU247
 1084 0000 7047     		bx	lr
 1085              		.cfi_endproc
 1086              	.LFE159:
 1088              		.section	.text.HAL_PWREx_WKUP3_Callback,"ax",%progbits
 1089              		.align	1
 1090              		.weak	HAL_PWREx_WKUP3_Callback
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1095              	HAL_PWREx_WKUP3_Callback:
 1096              	.LFB160:
1494:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1495:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1496:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1497:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP3 interrupt callback.
1498:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1499:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1500:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP3_Callback (void)
1501:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1097              		.loc 1 1501 1 view -0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 0
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101              		@ link register save eliminated.
1502:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1503:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP3Callback can be implemented in the user file
1504:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1505:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1102              		.loc 1 1505 1 view .LVU249
 1103 0000 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE160:
 1107              		.section	.text.HAL_PWREx_WKUP4_Callback,"ax",%progbits
 1108              		.align	1
 1109              		.weak	HAL_PWREx_WKUP4_Callback
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1114              	HAL_PWREx_WKUP4_Callback:
 1115              	.LFB161:
1506:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1507:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1508:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1509:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP4 interrupt callback.
1510:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1511:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1512:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP4_Callback (void)
1513:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
ARM GAS  /tmp/ccewlP9t.s 			page 65


 1116              		.loc 1 1513 1 view -0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
1514:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1515:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP4Callback can be implemented in the user file
1516:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1517:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1121              		.loc 1 1517 1 view .LVU251
 1122 0000 7047     		bx	lr
 1123              		.cfi_endproc
 1124              	.LFE161:
 1126              		.section	.text.HAL_PWREx_WKUP5_Callback,"ax",%progbits
 1127              		.align	1
 1128              		.weak	HAL_PWREx_WKUP5_Callback
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1133              	HAL_PWREx_WKUP5_Callback:
 1134              	.LFB162:
1518:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1519:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1520:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1521:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP5 interrupt callback.
1522:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1523:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1524:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP5_Callback (void)
1525:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1135              		.loc 1 1525 1 view -0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 0
 1138              		@ frame_needed = 0, uses_anonymous_args = 0
 1139              		@ link register save eliminated.
1526:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1527:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP5Callback can be implemented in the user file
1528:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1529:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1140              		.loc 1 1529 1 view .LVU253
 1141 0000 7047     		bx	lr
 1142              		.cfi_endproc
 1143              	.LFE162:
 1145              		.section	.text.HAL_PWREx_WKUP6_Callback,"ax",%progbits
 1146              		.align	1
 1147              		.weak	HAL_PWREx_WKUP6_Callback
 1148              		.syntax unified
 1149              		.thumb
 1150              		.thumb_func
 1152              	HAL_PWREx_WKUP6_Callback:
 1153              	.LFB163:
1530:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1531:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1532:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1533:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP6 interrupt callback.
1534:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1535:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1536:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP6_Callback (void)
ARM GAS  /tmp/ccewlP9t.s 			page 66


1537:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1154              		.loc 1 1537 1 view -0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
1538:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1539:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP6Callback can be implemented in the user file
1540:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1541:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1159              		.loc 1 1541 1 view .LVU255
 1160 0000 7047     		bx	lr
 1161              		.cfi_endproc
 1162              	.LFE163:
 1164              		.section	.text.HAL_PWREx_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1165              		.align	1
 1166              		.global	HAL_PWREx_WAKEUP_PIN_IRQHandler
 1167              		.syntax unified
 1168              		.thumb
 1169              		.thumb_func
 1171              	HAL_PWREx_WAKEUP_PIN_IRQHandler:
 1172              	.LFB157:
1417:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
 1173              		.loc 1 1417 1 view -0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 0
 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177 0000 08B5     		push	{r3, lr}
 1178              	.LCFI8:
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 3, -8
 1181              		.cfi_offset 14, -4
1419:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1182              		.loc 1 1419 3 view .LVU257
1419:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1183              		.loc 1 1419 7 is_stmt 0 view .LVU258
 1184 0002 244B     		ldr	r3, .L110
 1185 0004 5B6A     		ldr	r3, [r3, #36]
1419:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1186              		.loc 1 1419 6 view .LVU259
 1187 0006 13F0010F 		tst	r3, #1
 1188 000a 1BD1     		bne	.L106
1427:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1189              		.loc 1 1427 8 is_stmt 1 view .LVU260
1427:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1190              		.loc 1 1427 12 is_stmt 0 view .LVU261
 1191 000c 214B     		ldr	r3, .L110
 1192 000e 5B6A     		ldr	r3, [r3, #36]
1427:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1193              		.loc 1 1427 11 view .LVU262
 1194 0010 13F0020F 		tst	r3, #2
 1195 0014 1ED1     		bne	.L107
1436:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1196              		.loc 1 1436 8 is_stmt 1 view .LVU263
1436:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1197              		.loc 1 1436 12 is_stmt 0 view .LVU264
 1198 0016 1F4B     		ldr	r3, .L110
ARM GAS  /tmp/ccewlP9t.s 			page 67


 1199 0018 5B6A     		ldr	r3, [r3, #36]
1436:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1200              		.loc 1 1436 11 view .LVU265
 1201 001a 13F0040F 		tst	r3, #4
 1202 001e 21D1     		bne	.L108
1445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1203              		.loc 1 1445 8 is_stmt 1 view .LVU266
1445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1204              		.loc 1 1445 12 is_stmt 0 view .LVU267
 1205 0020 1C4B     		ldr	r3, .L110
 1206 0022 5B6A     		ldr	r3, [r3, #36]
1445:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1207              		.loc 1 1445 11 view .LVU268
 1208 0024 13F0080F 		tst	r3, #8
 1209 0028 24D1     		bne	.L109
1454:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1210              		.loc 1 1454 8 is_stmt 1 view .LVU269
1454:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1211              		.loc 1 1454 12 is_stmt 0 view .LVU270
 1212 002a 1A4B     		ldr	r3, .L110
 1213 002c 5B6A     		ldr	r3, [r3, #36]
1454:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1214              		.loc 1 1454 11 view .LVU271
 1215 002e 13F0100F 		tst	r3, #16
 1216 0032 27D0     		beq	.L104
1457:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1217              		.loc 1 1457 5 is_stmt 1 view .LVU272
 1218 0034 174A     		ldr	r2, .L110
 1219 0036 136A     		ldr	r3, [r2, #32]
 1220 0038 43F01003 		orr	r3, r3, #16
 1221 003c 1362     		str	r3, [r2, #32]
1460:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1222              		.loc 1 1460 5 view .LVU273
 1223 003e FFF7FEFF 		bl	HAL_PWREx_WKUP5_Callback
 1224              	.LVL59:
 1225 0042 06E0     		b	.L98
 1226              	.L106:
1422:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1227              		.loc 1 1422 5 view .LVU274
 1228 0044 134A     		ldr	r2, .L110
 1229 0046 136A     		ldr	r3, [r2, #32]
 1230 0048 43F00103 		orr	r3, r3, #1
 1231 004c 1362     		str	r3, [r2, #32]
1425:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1232              		.loc 1 1425 5 view .LVU275
 1233 004e FFF7FEFF 		bl	HAL_PWREx_WKUP1_Callback
 1234              	.LVL60:
 1235              	.L98:
1471:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1236              		.loc 1 1471 1 is_stmt 0 view .LVU276
 1237 0052 08BD     		pop	{r3, pc}
 1238              	.L107:
1430:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1239              		.loc 1 1430 5 is_stmt 1 view .LVU277
 1240 0054 0F4A     		ldr	r2, .L110
 1241 0056 136A     		ldr	r3, [r2, #32]
 1242 0058 43F00203 		orr	r3, r3, #2
ARM GAS  /tmp/ccewlP9t.s 			page 68


 1243 005c 1362     		str	r3, [r2, #32]
1433:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1244              		.loc 1 1433 5 view .LVU278
 1245 005e FFF7FEFF 		bl	HAL_PWREx_WKUP2_Callback
 1246              	.LVL61:
 1247 0062 F6E7     		b	.L98
 1248              	.L108:
1439:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1249              		.loc 1 1439 5 view .LVU279
 1250 0064 0B4A     		ldr	r2, .L110
 1251 0066 136A     		ldr	r3, [r2, #32]
 1252 0068 43F00403 		orr	r3, r3, #4
 1253 006c 1362     		str	r3, [r2, #32]
1442:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1254              		.loc 1 1442 5 view .LVU280
 1255 006e FFF7FEFF 		bl	HAL_PWREx_WKUP3_Callback
 1256              	.LVL62:
 1257 0072 EEE7     		b	.L98
 1258              	.L109:
1448:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1259              		.loc 1 1448 5 view .LVU281
 1260 0074 074A     		ldr	r2, .L110
 1261 0076 136A     		ldr	r3, [r2, #32]
 1262 0078 43F00803 		orr	r3, r3, #8
 1263 007c 1362     		str	r3, [r2, #32]
1451:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1264              		.loc 1 1451 5 view .LVU282
 1265 007e FFF7FEFF 		bl	HAL_PWREx_WKUP4_Callback
 1266              	.LVL63:
 1267 0082 E6E7     		b	.L98
 1268              	.L104:
1466:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1269              		.loc 1 1466 5 view .LVU283
 1270 0084 034A     		ldr	r2, .L110
 1271 0086 136A     		ldr	r3, [r2, #32]
 1272 0088 43F02003 		orr	r3, r3, #32
 1273 008c 1362     		str	r3, [r2, #32]
1469:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1274              		.loc 1 1469 5 view .LVU284
 1275 008e FFF7FEFF 		bl	HAL_PWREx_WKUP6_Callback
 1276              	.LVL64:
1471:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1277              		.loc 1 1471 1 is_stmt 0 view .LVU285
 1278 0092 DEE7     		b	.L98
 1279              	.L111:
 1280              		.align	2
 1281              	.L110:
 1282 0094 00480258 		.word	1476544512
 1283              		.cfi_endproc
 1284              	.LFE157:
 1286              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
 1287              		.align	1
 1288              		.global	HAL_PWREx_EnableBkUpReg
 1289              		.syntax unified
 1290              		.thumb
 1291              		.thumb_func
 1293              	HAL_PWREx_EnableBkUpReg:
ARM GAS  /tmp/ccewlP9t.s 			page 69


 1294              	.LFB164:
1542:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1543:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1544:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1545:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1546:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group3 Peripherals control functions
1547:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Peripherals control functions
1548:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1549:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1550:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1551:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Peripherals control functions #####
1552:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1553:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1554:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
1555:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     ================================================
1556:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1557:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only
1558:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           from the CPU, and addressed in 32-bit, 16-bit or 8-bit mode. Its
1559:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           content is retained even in Standby or VBAT mode when the low power
1560:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           backup regulator is enabled. It can be considered as an internal
1561:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           EEPROM when VBAT is always present. You can use the
1562:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableBkUpReg() function to enable the low power backup
1563:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           regulator.
1564:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to
1565:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD) the backup SRAM is powered from VDD which replaces the VBAT power
1566:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           supply to save battery life.
1567:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read
1568:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private
1569:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through
1570:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to
1571:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           level 0 is requested.
1572:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash
1573:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           programming manual.
1574:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to have a tradeoff
1575:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           between performance and power consumption when the device does not
1576:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           operate at the maximum frequency. This is done through
1577:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ControlVoltageScaling(VOS) function which configure the VOS
1578:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           bit in PWR_D3CR register.
1579:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to operate in Low Power
1580:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           mode when the system enters STOP mode to further reduce power
1581:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           consumption.
1582:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           This is done through HAL_PWREx_ControlStopModeVoltageScaling(SVOS)
1583:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           function which configure the SVOS bit in PWR_CR1 register.
1584:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           The selected SVOS4 and SVOS5 levels add an additional startup delay
1585:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           when exiting from system Stop mode.
1586:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     -@- Refer to the product datasheets for more details.
1587:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1588:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** USB Regulator configuration ***
1589:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
1590:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1591:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB transceivers are supplied from a dedicated VDD33USB supply
1592:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           that can be provided either by the integrated USB regulator, or by an
1593:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           external USB supply.
1594:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is enabled by HAL_PWREx_EnableUSBReg() function, the
1595:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD33USB is then provided from the USB regulator.
1596:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the USB regulator is enabled, the VDD33USB supply level detector
1597:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           shall be enabled through  HAL_PWREx_EnableUSBVoltageDetector()
ARM GAS  /tmp/ccewlP9t.s 			page 70


1598:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1599:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is disabled through HAL_PWREx_DisableUSBReg()
1600:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           function and VDD33USB can be provided from an external supply. In this
1601:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           case VDD33USB and VDD50USB shall be connected together.
1602:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1603:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT battery charging ***
1604:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================
1605:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1606:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When VDD is present, the external battery connected to VBAT can be
1607:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           charged through an internal resistance. VBAT charging can be performed
1608:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           either through a 5 KOhm resistor or through a 1.5 KOhm resistor.
1609:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is enabled by HAL_PWREx_EnableBatteryCharging
1610:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           (ResistorValue) function with:
1611:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) ResistorValue:
1612:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_5: 5 KOhm resistor.
1613:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_1_5: 1.5 KOhm resistor.
1614:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is disabled by HAL_PWREx_DisableBatteryCharging()
1615:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1616:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1617:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1618:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1619:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1620:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1621:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1622:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Backup Regulator.
1623:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1624:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1625:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
1626:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1295              		.loc 1 1626 1 is_stmt 1 view -0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 0
 1298              		@ frame_needed = 0, uses_anonymous_args = 0
 1299 0000 10B5     		push	{r4, lr}
 1300              	.LCFI9:
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 4, -8
 1303              		.cfi_offset 14, -4
1627:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1304              		.loc 1 1627 3 view .LVU287
1628:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1629:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Backup regulator */
1630:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_BREN);
 1305              		.loc 1 1630 3 view .LVU288
 1306 0002 0B4A     		ldr	r2, .L119
 1307 0004 9368     		ldr	r3, [r2, #8]
 1308 0006 43F00103 		orr	r3, r3, #1
 1309 000a 9360     		str	r3, [r2, #8]
1631:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1632:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1633:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1310              		.loc 1 1633 3 view .LVU289
 1311              		.loc 1 1633 15 is_stmt 0 view .LVU290
 1312 000c FFF7FEFF 		bl	HAL_GetTick
 1313              	.LVL65:
 1314 0010 0446     		mov	r4, r0
 1315              	.LVL66:
ARM GAS  /tmp/ccewlP9t.s 			page 71


1634:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1635:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */
1636:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 1316              		.loc 1 1636 3 is_stmt 1 view .LVU291
 1317              	.L113:
 1318              		.loc 1 1636 9 view .LVU292
 1319              		.loc 1 1636 10 is_stmt 0 view .LVU293
 1320 0012 074B     		ldr	r3, .L119
 1321 0014 9B68     		ldr	r3, [r3, #8]
 1322              		.loc 1 1636 9 view .LVU294
 1323 0016 13F4803F 		tst	r3, #65536
 1324 001a 07D1     		bne	.L118
1637:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1638:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1325              		.loc 1 1638 5 is_stmt 1 view .LVU295
 1326              		.loc 1 1638 10 is_stmt 0 view .LVU296
 1327 001c FFF7FEFF 		bl	HAL_GetTick
 1328              	.LVL67:
 1329              		.loc 1 1638 24 view .LVU297
 1330 0020 001B     		subs	r0, r0, r4
 1331              		.loc 1 1638 8 view .LVU298
 1332 0022 B0F57A7F 		cmp	r0, #1000
 1333 0026 F4D9     		bls	.L113
1639:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1640:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1334              		.loc 1 1640 14 view .LVU299
 1335 0028 0120     		movs	r0, #1
 1336 002a 00E0     		b	.L114
 1337              	.L118:
1641:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1642:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1643:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1644:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1338              		.loc 1 1644 10 view .LVU300
 1339 002c 0020     		movs	r0, #0
 1340              	.L114:
1645:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1341              		.loc 1 1645 1 view .LVU301
 1342 002e 10BD     		pop	{r4, pc}
 1343              	.LVL68:
 1344              	.L120:
 1345              		.loc 1 1645 1 view .LVU302
 1346              		.align	2
 1347              	.L119:
 1348 0030 00480258 		.word	1476544512
 1349              		.cfi_endproc
 1350              	.LFE164:
 1352              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
 1353              		.align	1
 1354              		.global	HAL_PWREx_DisableBkUpReg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1359              	HAL_PWREx_DisableBkUpReg:
 1360              	.LFB165:
1646:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1647:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
ARM GAS  /tmp/ccewlP9t.s 			page 72


1648:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Backup Regulator.
1649:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1650:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1651:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
1652:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1361              		.loc 1 1652 1 is_stmt 1 view -0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365 0000 10B5     		push	{r4, lr}
 1366              	.LCFI10:
 1367              		.cfi_def_cfa_offset 8
 1368              		.cfi_offset 4, -8
 1369              		.cfi_offset 14, -4
1653:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1370              		.loc 1 1653 3 view .LVU304
1654:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1655:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Backup regulator */
1656:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
 1371              		.loc 1 1656 3 view .LVU305
 1372 0002 0B4A     		ldr	r2, .L128
 1373 0004 9368     		ldr	r3, [r2, #8]
 1374 0006 23F00103 		bic	r3, r3, #1
 1375 000a 9360     		str	r3, [r2, #8]
1657:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1658:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1659:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1376              		.loc 1 1659 3 view .LVU306
 1377              		.loc 1 1659 15 is_stmt 0 view .LVU307
 1378 000c FFF7FEFF 		bl	HAL_GetTick
 1379              	.LVL69:
 1380 0010 0446     		mov	r4, r0
 1381              	.LVL70:
1660:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1661:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is reset */
1662:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 1382              		.loc 1 1662 3 is_stmt 1 view .LVU308
 1383              	.L122:
 1384              		.loc 1 1662 9 view .LVU309
 1385              		.loc 1 1662 10 is_stmt 0 view .LVU310
 1386 0012 074B     		ldr	r3, .L128
 1387 0014 9B68     		ldr	r3, [r3, #8]
 1388              		.loc 1 1662 9 view .LVU311
 1389 0016 13F4803F 		tst	r3, #65536
 1390 001a 07D0     		beq	.L127
1663:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1664:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1391              		.loc 1 1664 5 is_stmt 1 view .LVU312
 1392              		.loc 1 1664 10 is_stmt 0 view .LVU313
 1393 001c FFF7FEFF 		bl	HAL_GetTick
 1394              	.LVL71:
 1395              		.loc 1 1664 24 view .LVU314
 1396 0020 001B     		subs	r0, r0, r4
 1397              		.loc 1 1664 8 view .LVU315
 1398 0022 B0F57A7F 		cmp	r0, #1000
 1399 0026 F4D9     		bls	.L122
1665:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
ARM GAS  /tmp/ccewlP9t.s 			page 73


1666:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1400              		.loc 1 1666 14 view .LVU316
 1401 0028 0120     		movs	r0, #1
 1402 002a 00E0     		b	.L123
 1403              	.L127:
1667:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1668:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1669:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1670:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1404              		.loc 1 1670 10 view .LVU317
 1405 002c 0020     		movs	r0, #0
 1406              	.L123:
1671:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1407              		.loc 1 1671 1 view .LVU318
 1408 002e 10BD     		pop	{r4, pc}
 1409              	.LVL72:
 1410              	.L129:
 1411              		.loc 1 1671 1 view .LVU319
 1412              		.align	2
 1413              	.L128:
 1414 0030 00480258 		.word	1476544512
 1415              		.cfi_endproc
 1416              	.LFE165:
 1418              		.section	.text.HAL_PWREx_EnableUSBReg,"ax",%progbits
 1419              		.align	1
 1420              		.global	HAL_PWREx_EnableUSBReg
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1425              	HAL_PWREx_EnableUSBReg:
 1426              	.LFB166:
1672:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1673:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1674:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB Regulator.
1675:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1676:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1677:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
1678:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1427              		.loc 1 1678 1 is_stmt 1 view -0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431 0000 10B5     		push	{r4, lr}
 1432              	.LCFI11:
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 4, -8
 1435              		.cfi_offset 14, -4
1679:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1436              		.loc 1 1679 3 view .LVU321
1680:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1681:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB regulator */
1682:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1437              		.loc 1 1682 3 view .LVU322
 1438 0002 0B4A     		ldr	r2, .L137
 1439 0004 D368     		ldr	r3, [r2, #12]
 1440 0006 43F00073 		orr	r3, r3, #33554432
 1441 000a D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccewlP9t.s 			page 74


1683:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1684:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1685:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1442              		.loc 1 1685 3 view .LVU323
 1443              		.loc 1 1685 15 is_stmt 0 view .LVU324
 1444 000c FFF7FEFF 		bl	HAL_GetTick
 1445              	.LVL73:
 1446 0010 0446     		mov	r4, r0
 1447              	.LVL74:
1686:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1687:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is set */
1688:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
 1448              		.loc 1 1688 3 is_stmt 1 view .LVU325
 1449              	.L131:
 1450              		.loc 1 1688 9 view .LVU326
 1451              		.loc 1 1688 10 is_stmt 0 view .LVU327
 1452 0012 074B     		ldr	r3, .L137
 1453 0014 DB68     		ldr	r3, [r3, #12]
 1454              		.loc 1 1688 9 view .LVU328
 1455 0016 13F0806F 		tst	r3, #67108864
 1456 001a 07D1     		bne	.L136
1689:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1690:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1457              		.loc 1 1690 5 is_stmt 1 view .LVU329
 1458              		.loc 1 1690 10 is_stmt 0 view .LVU330
 1459 001c FFF7FEFF 		bl	HAL_GetTick
 1460              	.LVL75:
 1461              		.loc 1 1690 24 view .LVU331
 1462 0020 001B     		subs	r0, r0, r4
 1463              		.loc 1 1690 8 view .LVU332
 1464 0022 B0F57A7F 		cmp	r0, #1000
 1465 0026 F4D9     		bls	.L131
1691:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1692:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1466              		.loc 1 1692 14 view .LVU333
 1467 0028 0120     		movs	r0, #1
 1468 002a 00E0     		b	.L132
 1469              	.L136:
1693:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1694:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1695:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1696:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1470              		.loc 1 1696 10 view .LVU334
 1471 002c 0020     		movs	r0, #0
 1472              	.L132:
1697:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1473              		.loc 1 1697 1 view .LVU335
 1474 002e 10BD     		pop	{r4, pc}
 1475              	.LVL76:
 1476              	.L138:
 1477              		.loc 1 1697 1 view .LVU336
 1478              		.align	2
 1479              	.L137:
 1480 0030 00480258 		.word	1476544512
 1481              		.cfi_endproc
 1482              	.LFE166:
 1484              		.section	.text.HAL_PWREx_DisableUSBReg,"ax",%progbits
ARM GAS  /tmp/ccewlP9t.s 			page 75


 1485              		.align	1
 1486              		.global	HAL_PWREx_DisableUSBReg
 1487              		.syntax unified
 1488              		.thumb
 1489              		.thumb_func
 1491              	HAL_PWREx_DisableUSBReg:
 1492              	.LFB167:
1698:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1699:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1700:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB Regulator.
1701:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1702:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1703:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
1704:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1493              		.loc 1 1704 1 is_stmt 1 view -0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497 0000 10B5     		push	{r4, lr}
 1498              	.LCFI12:
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 4, -8
 1501              		.cfi_offset 14, -4
1705:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1502              		.loc 1 1705 3 view .LVU338
1706:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1707:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB regulator */
1708:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1503              		.loc 1 1708 3 view .LVU339
 1504 0002 0B4A     		ldr	r2, .L146
 1505 0004 D368     		ldr	r3, [r2, #12]
 1506 0006 23F00073 		bic	r3, r3, #33554432
 1507 000a D360     		str	r3, [r2, #12]
1709:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1710:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1711:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1508              		.loc 1 1711 3 view .LVU340
 1509              		.loc 1 1711 15 is_stmt 0 view .LVU341
 1510 000c FFF7FEFF 		bl	HAL_GetTick
 1511              	.LVL77:
 1512 0010 0446     		mov	r4, r0
 1513              	.LVL78:
1712:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1713:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is reset */
1714:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
 1514              		.loc 1 1714 3 is_stmt 1 view .LVU342
 1515              	.L140:
 1516              		.loc 1 1714 8 view .LVU343
 1517              		.loc 1 1714 9 is_stmt 0 view .LVU344
 1518 0012 074B     		ldr	r3, .L146
 1519 0014 DB68     		ldr	r3, [r3, #12]
 1520              		.loc 1 1714 8 view .LVU345
 1521 0016 13F0806F 		tst	r3, #67108864
 1522 001a 07D0     		beq	.L145
1715:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1716:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1523              		.loc 1 1716 5 is_stmt 1 view .LVU346
ARM GAS  /tmp/ccewlP9t.s 			page 76


 1524              		.loc 1 1716 10 is_stmt 0 view .LVU347
 1525 001c FFF7FEFF 		bl	HAL_GetTick
 1526              	.LVL79:
 1527              		.loc 1 1716 24 view .LVU348
 1528 0020 001B     		subs	r0, r0, r4
 1529              		.loc 1 1716 8 view .LVU349
 1530 0022 B0F57A7F 		cmp	r0, #1000
 1531 0026 F4D9     		bls	.L140
1717:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1718:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1532              		.loc 1 1718 14 view .LVU350
 1533 0028 0120     		movs	r0, #1
 1534 002a 00E0     		b	.L141
 1535              	.L145:
1719:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1720:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1721:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1722:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1536              		.loc 1 1722 10 view .LVU351
 1537 002c 0020     		movs	r0, #0
 1538              	.L141:
1723:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1539              		.loc 1 1723 1 view .LVU352
 1540 002e 10BD     		pop	{r4, pc}
 1541              	.LVL80:
 1542              	.L147:
 1543              		.loc 1 1723 1 view .LVU353
 1544              		.align	2
 1545              	.L146:
 1546 0030 00480258 		.word	1476544512
 1547              		.cfi_endproc
 1548              	.LFE167:
 1550              		.section	.text.HAL_PWREx_EnableUSBVoltageDetector,"ax",%progbits
 1551              		.align	1
 1552              		.global	HAL_PWREx_EnableUSBVoltageDetector
 1553              		.syntax unified
 1554              		.thumb
 1555              		.thumb_func
 1557              	HAL_PWREx_EnableUSBVoltageDetector:
 1558              	.LFB168:
1724:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1725:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1726:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB voltage level detector.
1727:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1728:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1729:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableUSBVoltageDetector (void)
1730:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1559              		.loc 1 1730 1 is_stmt 1 view -0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 1563              		@ link register save eliminated.
1731:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB voltage detector */
1732:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 1564              		.loc 1 1732 3 view .LVU355
 1565 0000 024A     		ldr	r2, .L149
 1566 0002 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccewlP9t.s 			page 77


 1567 0004 43F08073 		orr	r3, r3, #16777216
 1568 0008 D360     		str	r3, [r2, #12]
1733:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1569              		.loc 1 1733 1 is_stmt 0 view .LVU356
 1570 000a 7047     		bx	lr
 1571              	.L150:
 1572              		.align	2
 1573              	.L149:
 1574 000c 00480258 		.word	1476544512
 1575              		.cfi_endproc
 1576              	.LFE168:
 1578              		.section	.text.HAL_PWREx_DisableUSBVoltageDetector,"ax",%progbits
 1579              		.align	1
 1580              		.global	HAL_PWREx_DisableUSBVoltageDetector
 1581              		.syntax unified
 1582              		.thumb
 1583              		.thumb_func
 1585              	HAL_PWREx_DisableUSBVoltageDetector:
 1586              	.LFB169:
1734:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1735:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1736:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB voltage level detector.
1737:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1738:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1739:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableUSBVoltageDetector (void)
1740:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1587              		.loc 1 1740 1 is_stmt 1 view -0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 1591              		@ link register save eliminated.
1741:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB voltage detector */
1742:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 1592              		.loc 1 1742 3 view .LVU358
 1593 0000 024A     		ldr	r2, .L152
 1594 0002 D368     		ldr	r3, [r2, #12]
 1595 0004 23F08073 		bic	r3, r3, #16777216
 1596 0008 D360     		str	r3, [r2, #12]
1743:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1597              		.loc 1 1743 1 is_stmt 0 view .LVU359
 1598 000a 7047     		bx	lr
 1599              	.L153:
 1600              		.align	2
 1601              	.L152:
 1602 000c 00480258 		.word	1476544512
 1603              		.cfi_endproc
 1604              	.LFE169:
 1606              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
 1607              		.align	1
 1608              		.global	HAL_PWREx_EnableBatteryCharging
 1609              		.syntax unified
 1610              		.thumb
 1611              		.thumb_func
 1613              	HAL_PWREx_EnableBatteryCharging:
 1614              	.LVL81:
 1615              	.LFB170:
1744:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccewlP9t.s 			page 78


1745:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1746:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Battery charging.
1747:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When VDD is present, charge the external battery through an internal
1748:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         resistor.
1749:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  ResistorValue : Specifies the charging resistor.
1750:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1751:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
1752:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
1753:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1754:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1755:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
1756:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1616              		.loc 1 1756 1 is_stmt 1 view -0
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 0
 1619              		@ frame_needed = 0, uses_anonymous_args = 0
 1620              		@ link register save eliminated.
1757:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1758:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));
 1621              		.loc 1 1758 3 view .LVU361
1759:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1760:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Specify the charging resistor */
1761:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
 1622              		.loc 1 1761 3 view .LVU362
 1623 0000 054A     		ldr	r2, .L155
 1624 0002 D368     		ldr	r3, [r2, #12]
 1625 0004 23F40073 		bic	r3, r3, #512
 1626 0008 0343     		orrs	r3, r3, r0
 1627 000a D360     		str	r3, [r2, #12]
1762:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1763:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Battery charging */
1764:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_VBE);
 1628              		.loc 1 1764 3 view .LVU363
 1629 000c D368     		ldr	r3, [r2, #12]
 1630 000e 43F48073 		orr	r3, r3, #256
 1631 0012 D360     		str	r3, [r2, #12]
1765:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1632              		.loc 1 1765 1 is_stmt 0 view .LVU364
 1633 0014 7047     		bx	lr
 1634              	.L156:
 1635 0016 00BF     		.align	2
 1636              	.L155:
 1637 0018 00480258 		.word	1476544512
 1638              		.cfi_endproc
 1639              	.LFE170:
 1641              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
 1642              		.align	1
 1643              		.global	HAL_PWREx_DisableBatteryCharging
 1644              		.syntax unified
 1645              		.thumb
 1646              		.thumb_func
 1648              	HAL_PWREx_DisableBatteryCharging:
 1649              	.LFB171:
1766:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1767:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1768:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Battery charging.
1769:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
ARM GAS  /tmp/ccewlP9t.s 			page 79


1770:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1771:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging (void)
1772:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1650              		.loc 1 1772 1 is_stmt 1 view -0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 1654              		@ link register save eliminated.
1773:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Battery charging */
1774:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
 1655              		.loc 1 1774 3 view .LVU366
 1656 0000 024A     		ldr	r2, .L158
 1657 0002 D368     		ldr	r3, [r2, #12]
 1658 0004 23F48073 		bic	r3, r3, #256
 1659 0008 D360     		str	r3, [r2, #12]
1775:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1660              		.loc 1 1775 1 is_stmt 0 view .LVU367
 1661 000a 7047     		bx	lr
 1662              	.L159:
 1663              		.align	2
 1664              	.L158:
 1665 000c 00480258 		.word	1476544512
 1666              		.cfi_endproc
 1667              	.LFE171:
 1669              		.section	.text.HAL_PWREx_EnableMonitoring,"ax",%progbits
 1670              		.align	1
 1671              		.global	HAL_PWREx_EnableMonitoring
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1676              	HAL_PWREx_EnableMonitoring:
 1677              	.LFB172:
1776:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1777:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_BOOSTE)
1778:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1779:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the booster to guarantee the analog switch AC performance when
1780:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the VDD supply voltage is below 2V7.
1781:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The VDD supply voltage can be monitored through the PVD and the PLS
1782:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         field bits.
1783:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1784:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1785:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAnalogBooster (void)
1786:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1787:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog voltage */
1788:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1789:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1790:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable VDDA booster */
1791:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1792:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1793:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1794:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1795:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the analog booster.
1796:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1797:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1798:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAnalogBooster (void)
1799:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1800:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable VDDA booster */
ARM GAS  /tmp/ccewlP9t.s 			page 80


1801:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1802:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1803:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog voltage */
1804:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1805:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1806:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_BOOSTE) */
1807:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1808:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1809:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1810:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1811:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group4 Power Monitoring functions
1812:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power Monitoring functions
1813:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1814:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1815:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1816:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Power Monitoring functions #####
1817:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1818:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1819:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT and Temperature supervision ***
1820:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     ========================================
1821:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1822:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT battery voltage supply can be monitored by comparing it with
1823:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           two threshold levels: VBAThigh and VBATlow. VBATH flag and VBATL flags
1824:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           in the PWR control register 2 (PWR_CR2), indicate if VBAT is higher or
1825:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           lower than the threshold.
1826:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The temperature can be monitored by comparing it with two threshold
1827:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels, TEMPhigh and TEMPlow. TEMPH and TEMPL flags, in the PWR
1828:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           control register 2 (PWR_CR2), indicate whether the device temperature
1829:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           is higher or lower than the threshold.
1830:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT and the temperature monitoring is enabled by
1831:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableMonitoring() function and disabled by
1832:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_DisableMonitoring() function.
1833:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetVBATLevel() function returns the VBAT level which can
1834:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           be : PWR_VBAT_BELOW_LOW_THRESHOLD or PWR_VBAT_ABOVE_HIGH_THRESHOLD or
1835:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD.
1836:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetTemperatureLevel() function returns the Temperature
1837:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           level which can be :
1838:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BELOW_LOW_THRESHOLD or PWR_TEMP_ABOVE_HIGH_THRESHOLD or
1839:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD.
1840:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1841:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** AVD configuration ***
1842:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     =========================
1843:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1844:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is used to monitor the VDDA power supply by comparing it to a
1845:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           threshold selected by the AVD Level (ALS[3:0] bits in the PWR_CR1
1846:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           register).
1847:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) A AVDO flag is available to indicate if VDDA is higher or lower
1848:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           than the AVD threshold. This event is internally connected to the EXTI
1849:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           line 16 to generate an interrupt if enabled.
1850:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           It is configurable through __HAL_PWR_AVD_EXTI_ENABLE_IT() macro.
1851:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is stopped in System Standby mode.
1852:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1853:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1854:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1855:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1856:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1857:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
ARM GAS  /tmp/ccewlP9t.s 			page 81


1858:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the VBAT and temperature monitoring.
1859:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1860:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1861:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMonitoring (void)
1862:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1678              		.loc 1 1862 1 is_stmt 1 view -0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
1863:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the VBAT and Temperature monitoring */
1864:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_MONEN);
 1683              		.loc 1 1864 3 view .LVU369
 1684 0000 024A     		ldr	r2, .L161
 1685 0002 9368     		ldr	r3, [r2, #8]
 1686 0004 43F01003 		orr	r3, r3, #16
 1687 0008 9360     		str	r3, [r2, #8]
1865:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1688              		.loc 1 1865 1 is_stmt 0 view .LVU370
 1689 000a 7047     		bx	lr
 1690              	.L162:
 1691              		.align	2
 1692              	.L161:
 1693 000c 00480258 		.word	1476544512
 1694              		.cfi_endproc
 1695              	.LFE172:
 1697              		.section	.text.HAL_PWREx_DisableMonitoring,"ax",%progbits
 1698              		.align	1
 1699              		.global	HAL_PWREx_DisableMonitoring
 1700              		.syntax unified
 1701              		.thumb
 1702              		.thumb_func
 1704              	HAL_PWREx_DisableMonitoring:
 1705              	.LFB173:
1866:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1867:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1868:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the VBAT and temperature monitoring.
1869:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1870:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1871:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMonitoring (void)
1872:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1706              		.loc 1 1872 1 is_stmt 1 view -0
 1707              		.cfi_startproc
 1708              		@ args = 0, pretend = 0, frame = 0
 1709              		@ frame_needed = 0, uses_anonymous_args = 0
 1710              		@ link register save eliminated.
1873:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the VBAT and Temperature monitoring */
1874:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
 1711              		.loc 1 1874 3 view .LVU372
 1712 0000 024A     		ldr	r2, .L164
 1713 0002 9368     		ldr	r3, [r2, #8]
 1714 0004 23F01003 		bic	r3, r3, #16
 1715 0008 9360     		str	r3, [r2, #8]
1875:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1716              		.loc 1 1875 1 is_stmt 0 view .LVU373
 1717 000a 7047     		bx	lr
 1718              	.L165:
ARM GAS  /tmp/ccewlP9t.s 			page 82


 1719              		.align	2
 1720              	.L164:
 1721 000c 00480258 		.word	1476544512
 1722              		.cfi_endproc
 1723              	.LFE173:
 1725              		.section	.text.HAL_PWREx_GetTemperatureLevel,"ax",%progbits
 1726              		.align	1
 1727              		.global	HAL_PWREx_GetTemperatureLevel
 1728              		.syntax unified
 1729              		.thumb
 1730              		.thumb_func
 1732              	HAL_PWREx_GetTemperatureLevel:
 1733              	.LFB174:
1876:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1877:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1878:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the junction temperature is between, above or below
1879:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1880:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval Temperature level.
1881:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1882:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetTemperatureLevel (void)
1883:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1734              		.loc 1 1883 1 is_stmt 1 view -0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 0, uses_anonymous_args = 0
 1738              		@ link register save eliminated.
1884:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tempLevel, regValue;
 1739              		.loc 1 1884 3 view .LVU375
1885:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1886:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the temperature flags */
1887:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
 1740              		.loc 1 1887 3 view .LVU376
 1741              		.loc 1 1887 14 is_stmt 0 view .LVU377
 1742 0000 054B     		ldr	r3, .L169
 1743 0002 9868     		ldr	r0, [r3, #8]
 1744              		.loc 1 1887 12 view .LVU378
 1745 0004 00F44000 		and	r0, r0, #12582912
 1746              	.LVL82:
1888:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1889:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is below the threshold */
1890:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_TEMPL)
 1747              		.loc 1 1890 3 is_stmt 1 view .LVU379
 1748              		.loc 1 1890 6 is_stmt 0 view .LVU380
 1749 0008 B0F5800F 		cmp	r0, #4194304
 1750 000c 03D0     		beq	.L166
1891:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1892:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
1893:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1894:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is above the threshold */
1895:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_TEMPH)
 1751              		.loc 1 1895 8 is_stmt 1 view .LVU381
 1752              		.loc 1 1895 11 is_stmt 0 view .LVU382
 1753 000e B0F5000F 		cmp	r0, #8388608
 1754 0012 00D0     		beq	.L166
1896:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1897:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
1898:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccewlP9t.s 			page 83


1899:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The temperature is between the thresholds */
1900:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1901:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1902:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 1755              		.loc 1 1902 15 view .LVU383
 1756 0014 0020     		movs	r0, #0
 1757              	.LVL83:
1903:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1904:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1905:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return tempLevel;
 1758              		.loc 1 1905 3 is_stmt 1 view .LVU384
 1759              	.L166:
1906:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1760              		.loc 1 1906 1 is_stmt 0 view .LVU385
 1761 0016 7047     		bx	lr
 1762              	.L170:
 1763              		.align	2
 1764              	.L169:
 1765 0018 00480258 		.word	1476544512
 1766              		.cfi_endproc
 1767              	.LFE174:
 1769              		.section	.text.HAL_PWREx_GetVBATLevel,"ax",%progbits
 1770              		.align	1
 1771              		.global	HAL_PWREx_GetVBATLevel
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1776              	HAL_PWREx_GetVBATLevel:
 1777              	.LFB175:
1907:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1908:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1909:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the Battery voltage level is between, above or below
1910:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1911:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval VBAT level.
1912:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1913:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVBATLevel (void)
1914:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1778              		.loc 1 1914 1 is_stmt 1 view -0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
1915:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t VBATLevel, regValue;
 1783              		.loc 1 1915 3 view .LVU387
1916:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1917:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the VBAT flags */
1918:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
 1784              		.loc 1 1918 3 view .LVU388
 1785              		.loc 1 1918 14 is_stmt 0 view .LVU389
 1786 0000 054B     		ldr	r3, .L174
 1787 0002 9868     		ldr	r0, [r3, #8]
 1788              		.loc 1 1918 12 view .LVU390
 1789 0004 00F44010 		and	r0, r0, #3145728
 1790              	.LVL84:
1919:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1920:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is below the threshold */
1921:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_VBATL)
ARM GAS  /tmp/ccewlP9t.s 			page 84


 1791              		.loc 1 1921 3 is_stmt 1 view .LVU391
 1792              		.loc 1 1921 6 is_stmt 0 view .LVU392
 1793 0008 B0F5801F 		cmp	r0, #1048576
 1794 000c 03D0     		beq	.L171
1922:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1923:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
1924:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1925:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is above the threshold */
1926:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_VBATH)
 1795              		.loc 1 1926 8 is_stmt 1 view .LVU393
 1796              		.loc 1 1926 11 is_stmt 0 view .LVU394
 1797 000e B0F5001F 		cmp	r0, #2097152
 1798 0012 00D0     		beq	.L171
1927:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1928:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
1929:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1930:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The VBAT is between the thresholds */
1931:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1932:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1933:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 1799              		.loc 1 1933 15 view .LVU395
 1800 0014 0020     		movs	r0, #0
 1801              	.LVL85:
1934:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1935:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1936:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return VBATLevel;
 1802              		.loc 1 1936 3 is_stmt 1 view .LVU396
 1803              	.L171:
1937:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1804              		.loc 1 1937 1 is_stmt 0 view .LVU397
 1805 0016 7047     		bx	lr
 1806              	.L175:
 1807              		.align	2
 1808              	.L174:
 1809 0018 00480258 		.word	1476544512
 1810              		.cfi_endproc
 1811              	.LFE175:
 1813              		.section	.text.HAL_PWREx_ConfigAVD,"ax",%progbits
 1814              		.align	1
 1815              		.global	HAL_PWREx_ConfigAVD
 1816              		.syntax unified
 1817              		.thumb
 1818              		.thumb_func
 1820              	HAL_PWREx_ConfigAVD:
 1821              	.LVL86:
 1822              	.LFB176:
1938:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1939:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CSR1_MMCVDO)
1940:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1941:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the VDDMMC voltage level.
1942:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The VDDMMC voltage level.
1943:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1944:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** PWREx_MMC_VoltageLevel HAL_PWREx_GetMMCVoltage (void)
1945:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1946:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   PWREx_MMC_VoltageLevel mmc_voltage;
1947:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1948:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check voltage detector output on VDDMMC value */
ARM GAS  /tmp/ccewlP9t.s 			page 85


1949:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_MMCVDO_Msk) == 0U)
1950:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1951:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_BELOW_1V2;
1952:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1953:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1954:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1955:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_EQUAL_ABOVE_1V2;
1956:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1957:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1958:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   return mmc_voltage;
1959:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1960:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CSR1_MMCVDO) */
1961:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1962:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1963:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the event mode and the voltage threshold detected by the
1964:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Analog Voltage Detector (AVD).
1965:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sConfigAVD : Pointer to an PWREx_AVDTypeDef structure that contains
1966:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      the configuration information for the AVD.
1967:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
1968:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         more details about the voltage threshold corresponding to each
1969:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         detection level.
1970:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1971:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx through PWR_Exported_Macro provided by this
1972:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         driver. All combination are allowed: wake up only Cortex-M7, wake up
1973:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
1974:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1975:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1976:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
1977:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1823              		.loc 1 1977 1 is_stmt 1 view -0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827              		@ link register save eliminated.
1978:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1979:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
 1828              		.loc 1 1979 3 view .LVU399
1980:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));
 1829              		.loc 1 1980 3 view .LVU400
1981:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1982:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the ALS[18:17] bits according to AVDLevel value */
1983:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
 1830              		.loc 1 1983 3 view .LVU401
 1831 0000 244A     		ldr	r2, .L181
 1832 0002 1368     		ldr	r3, [r2]
 1833 0004 23F4C023 		bic	r3, r3, #393216
 1834 0008 0168     		ldr	r1, [r0]
 1835 000a 0B43     		orrs	r3, r3, r1
 1836 000c 1360     		str	r3, [r2]
1984:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1985:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear any previous config */
1986:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1987:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
 1837              		.loc 1 1987 3 view .LVU402
 1838 000e 4FF0B043 		mov	r3, #1476395008
 1839 0012 D3F88420 		ldr	r2, [r3, #132]
 1840 0016 22F48032 		bic	r2, r2, #65536
ARM GAS  /tmp/ccewlP9t.s 			page 86


 1841 001a C3F88420 		str	r2, [r3, #132]
1988:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_IT ();
 1842              		.loc 1 1988 3 view .LVU403
 1843 001e D3F88020 		ldr	r2, [r3, #128]
 1844 0022 22F48032 		bic	r2, r2, #65536
 1845 0026 C3F88020 		str	r2, [r3, #128]
1989:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
1990:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1991:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
 1846              		.loc 1 1991 3 view .LVU404
 1847 002a 1A68     		ldr	r2, [r3]
 1848 002c 22F48032 		bic	r2, r2, #65536
 1849 0030 1A60     		str	r2, [r3]
1992:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
 1850              		.loc 1 1992 3 view .LVU405
 1851 0032 5A68     		ldr	r2, [r3, #4]
 1852 0034 22F48032 		bic	r2, r2, #65536
 1853 0038 5A60     		str	r2, [r3, #4]
1993:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1994:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1995:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the interrupt mode */
1996:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
 1854              		.loc 1 1996 3 view .LVU406
 1855              		.loc 1 1996 18 is_stmt 0 view .LVU407
 1856 003a 4368     		ldr	r3, [r0, #4]
 1857              		.loc 1 1996 6 view .LVU408
 1858 003c 13F4803F 		tst	r3, #65536
 1859 0040 07D0     		beq	.L177
1997:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1998:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_IT ();
 1860              		.loc 1 1998 5 is_stmt 1 view .LVU409
 1861 0042 4FF0B042 		mov	r2, #1476395008
 1862 0046 D2F88030 		ldr	r3, [r2, #128]
 1863 004a 43F48033 		orr	r3, r3, #65536
 1864 004e C2F88030 		str	r3, [r2, #128]
 1865              	.L177:
1999:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2000:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2001:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the event mode */
2002:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
 1866              		.loc 1 2002 3 view .LVU410
 1867              		.loc 1 2002 18 is_stmt 0 view .LVU411
 1868 0052 4368     		ldr	r3, [r0, #4]
 1869              		.loc 1 2002 6 view .LVU412
 1870 0054 13F4003F 		tst	r3, #131072
 1871 0058 07D0     		beq	.L178
2003:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2004:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
 1872              		.loc 1 2004 5 is_stmt 1 view .LVU413
 1873 005a 4FF0B042 		mov	r2, #1476395008
 1874 005e D2F88430 		ldr	r3, [r2, #132]
 1875 0062 43F48033 		orr	r3, r3, #65536
 1876 0066 C2F88430 		str	r3, [r2, #132]
 1877              	.L178:
2005:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2006:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
2007:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccewlP9t.s 			page 87


2008:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Rising edge configuration */
2009:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
 1878              		.loc 1 2009 3 view .LVU414
 1879              		.loc 1 2009 18 is_stmt 0 view .LVU415
 1880 006a 4368     		ldr	r3, [r0, #4]
 1881              		.loc 1 2009 6 view .LVU416
 1882 006c 13F0010F 		tst	r3, #1
 1883 0070 05D0     		beq	.L179
2010:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2011:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
 1884              		.loc 1 2011 5 is_stmt 1 view .LVU417
 1885 0072 4FF0B042 		mov	r2, #1476395008
 1886 0076 1368     		ldr	r3, [r2]
 1887 0078 43F48033 		orr	r3, r3, #65536
 1888 007c 1360     		str	r3, [r2]
 1889              	.L179:
2012:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2013:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2014:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Falling edge configuration */
2015:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
 1890              		.loc 1 2015 3 view .LVU418
 1891              		.loc 1 2015 18 is_stmt 0 view .LVU419
 1892 007e 4368     		ldr	r3, [r0, #4]
 1893              		.loc 1 2015 6 view .LVU420
 1894 0080 13F0020F 		tst	r3, #2
 1895 0084 05D0     		beq	.L176
2016:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2017:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
 1896              		.loc 1 2017 5 is_stmt 1 view .LVU421
 1897 0086 4FF0B042 		mov	r2, #1476395008
 1898 008a 5368     		ldr	r3, [r2, #4]
 1899 008c 43F48033 		orr	r3, r3, #65536
 1900 0090 5360     		str	r3, [r2, #4]
 1901              	.L176:
2018:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2019:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1902              		.loc 1 2019 1 is_stmt 0 view .LVU422
 1903 0092 7047     		bx	lr
 1904              	.L182:
 1905              		.align	2
 1906              	.L181:
 1907 0094 00480258 		.word	1476544512
 1908              		.cfi_endproc
 1909              	.LFE176:
 1911              		.section	.text.HAL_PWREx_EnableAVD,"ax",%progbits
 1912              		.align	1
 1913              		.global	HAL_PWREx_EnableAVD
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1918              	HAL_PWREx_EnableAVD:
 1919              	.LFB177:
2020:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2021:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2022:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Analog Voltage Detector (AVD).
2023:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2024:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/ccewlP9t.s 			page 88


2025:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAVD (void)
2026:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1920              		.loc 1 2026 1 is_stmt 1 view -0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 0
 1923              		@ frame_needed = 0, uses_anonymous_args = 0
 1924              		@ link register save eliminated.
2027:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog Voltage Detector */
2028:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
 1925              		.loc 1 2028 3 view .LVU424
 1926 0000 024A     		ldr	r2, .L184
 1927 0002 1368     		ldr	r3, [r2]
 1928 0004 43F48033 		orr	r3, r3, #65536
 1929 0008 1360     		str	r3, [r2]
2029:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1930              		.loc 1 2029 1 is_stmt 0 view .LVU425
 1931 000a 7047     		bx	lr
 1932              	.L185:
 1933              		.align	2
 1934              	.L184:
 1935 000c 00480258 		.word	1476544512
 1936              		.cfi_endproc
 1937              	.LFE177:
 1939              		.section	.text.HAL_PWREx_DisableAVD,"ax",%progbits
 1940              		.align	1
 1941              		.global	HAL_PWREx_DisableAVD
 1942              		.syntax unified
 1943              		.thumb
 1944              		.thumb_func
 1946              	HAL_PWREx_DisableAVD:
 1947              	.LFB178:
2030:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2031:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2032:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Analog Voltage Detector(AVD).
2033:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2034:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2035:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAVD (void)
2036:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1948              		.loc 1 2036 1 is_stmt 1 view -0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
2037:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog Voltage Detector */
2038:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
 1953              		.loc 1 2038 3 view .LVU427
 1954 0000 024A     		ldr	r2, .L187
 1955 0002 1368     		ldr	r3, [r2]
 1956 0004 23F48033 		bic	r3, r3, #65536
 1957 0008 1360     		str	r3, [r2]
2039:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1958              		.loc 1 2039 1 is_stmt 0 view .LVU428
 1959 000a 7047     		bx	lr
 1960              	.L188:
 1961              		.align	2
 1962              	.L187:
 1963 000c 00480258 		.word	1476544512
ARM GAS  /tmp/ccewlP9t.s 			page 89


 1964              		.cfi_endproc
 1965              	.LFE178:
 1967              		.section	.text.HAL_PWREx_AVDCallback,"ax",%progbits
 1968              		.align	1
 1969              		.weak	HAL_PWREx_AVDCallback
 1970              		.syntax unified
 1971              		.thumb
 1972              		.thumb_func
 1974              	HAL_PWREx_AVDCallback:
 1975              	.LFB180:
2040:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2041:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2042:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR PVD/AVD interrupt request.
2043:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the PVD_AVD_IRQHandler().
2044:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
2045:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2046:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_AVD_IRQHandler (void)
2047:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
2048:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
2049:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
2050:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2051:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2052:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2053:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2054:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2055:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR D1/CD EXTI flag */
2056:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
2057:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2058:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2059:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2060:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2061:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         if(__HAL_PWR_GET_FLAG (PWR_FLAG_AVDO) == 0U)
2062:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
2063:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           /* Clear PWR EXTI D1/CD pending bit */
2064:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
2065:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
2066:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2067:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2068:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2069:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2070:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2071:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2072:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTID2_GET_FLAG () != 0U)
2073:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2074:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2075:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2076:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2077:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         if(__HAL_PWR_GET_FLAG (PWR_FLAG_AVDO) == 0U)
2078:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
2079:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           /* Clear PWR EXTI D2 pending bit */
2080:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           __HAL_PWR_PVD_EXTID2_CLEAR_FLAG ();
2081:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
2082:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2083:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2084:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2085:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2086:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccewlP9t.s 			page 90


2087:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Analog Voltage Detector is enabled (AVD) */
2088:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
2089:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2090:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2091:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2092:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2093:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2094:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D1/CD flag */
2095:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
2096:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2097:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2098:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2099:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2100:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         if(__HAL_PWR_GET_FLAG (PWR_FLAG_PVDO) == 0U)
2101:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
2102:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           /* Clear PWR EXTI D1/CD pending bit */
2103:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
2104:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
2105:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2106:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2107:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2108:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2109:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2110:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2111:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTID2_GET_FLAG () != 0U)
2112:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2113:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2114:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2115:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2116:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         if(__HAL_PWR_GET_FLAG (PWR_FLAG_PVDO) == 0U)
2117:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
2118:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           /* Clear PWR EXTI D2 pending bit */
2119:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****           __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
2120:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
2121:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2122:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2123:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2124:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2125:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
2126:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2127:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2128:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR AVD interrupt callback.
2129:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2130:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2131:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_AVDCallback (void)
2132:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1976              		.loc 1 2132 1 is_stmt 1 view -0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980              		@ link register save eliminated.
2133:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2134:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWR_AVDCallback can be implemented in the user file
2135:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2136:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1981              		.loc 1 2136 1 view .LVU430
 1982 0000 7047     		bx	lr
ARM GAS  /tmp/ccewlP9t.s 			page 91


 1983              		.cfi_endproc
 1984              	.LFE180:
 1986              		.section	.text.HAL_PWREx_PVD_AVD_IRQHandler,"ax",%progbits
 1987              		.align	1
 1988              		.global	HAL_PWREx_PVD_AVD_IRQHandler
 1989              		.syntax unified
 1990              		.thumb
 1991              		.thumb_func
 1993              	HAL_PWREx_PVD_AVD_IRQHandler:
 1994              	.LFB179:
2047:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
 1995              		.loc 1 2047 1 view -0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999 0000 08B5     		push	{r3, lr}
 2000              	.LCFI13:
 2001              		.cfi_def_cfa_offset 8
 2002              		.cfi_offset 3, -8
 2003              		.cfi_offset 14, -4
2049:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2004              		.loc 1 2049 3 view .LVU432
2049:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2005              		.loc 1 2049 7 is_stmt 0 view .LVU433
 2006 0002 1C4B     		ldr	r3, .L196
 2007 0004 1B68     		ldr	r3, [r3]
2049:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2008              		.loc 1 2049 6 view .LVU434
 2009 0006 13F0100F 		tst	r3, #16
 2010 000a 06D0     		beq	.L191
2056:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2011              		.loc 1 2056 7 is_stmt 1 view .LVU435
2056:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2012              		.loc 1 2056 11 is_stmt 0 view .LVU436
 2013 000c 4FF0B043 		mov	r3, #1476395008
 2014 0010 D3F88830 		ldr	r3, [r3, #136]
2056:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2015              		.loc 1 2056 10 view .LVU437
 2016 0014 13F4803F 		tst	r3, #65536
 2017 0018 0CD1     		bne	.L194
 2018              	.L191:
2088:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2019              		.loc 1 2088 3 is_stmt 1 view .LVU438
2088:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2020              		.loc 1 2088 7 is_stmt 0 view .LVU439
 2021 001a 164B     		ldr	r3, .L196
 2022 001c 1B68     		ldr	r3, [r3]
2088:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2023              		.loc 1 2088 6 view .LVU440
 2024 001e 13F4803F 		tst	r3, #65536
 2025 0022 06D0     		beq	.L190
2095:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2026              		.loc 1 2095 7 is_stmt 1 view .LVU441
2095:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2027              		.loc 1 2095 11 is_stmt 0 view .LVU442
 2028 0024 4FF0B043 		mov	r3, #1476395008
 2029 0028 D3F88830 		ldr	r3, [r3, #136]
ARM GAS  /tmp/ccewlP9t.s 			page 92


2095:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2030              		.loc 1 2095 10 view .LVU443
 2031 002c 13F4803F 		tst	r3, #65536
 2032 0030 10D1     		bne	.L195
 2033              	.L190:
2125:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2034              		.loc 1 2125 1 view .LVU444
 2035 0032 08BD     		pop	{r3, pc}
 2036              	.L194:
2059:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2037              		.loc 1 2059 9 is_stmt 1 view .LVU445
 2038 0034 FFF7FEFF 		bl	HAL_PWR_PVDCallback
 2039              	.LVL87:
2061:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 2040              		.loc 1 2061 9 view .LVU446
2061:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 2041              		.loc 1 2061 12 is_stmt 0 view .LVU447
 2042 0038 0E4B     		ldr	r3, .L196
 2043 003a 5B68     		ldr	r3, [r3, #4]
2061:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 2044              		.loc 1 2061 11 view .LVU448
 2045 003c 13F4803F 		tst	r3, #65536
 2046 0040 EBD1     		bne	.L191
2064:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 2047              		.loc 1 2064 11 is_stmt 1 view .LVU449
 2048 0042 4FF0B042 		mov	r2, #1476395008
 2049 0046 D2F88830 		ldr	r3, [r2, #136]
 2050 004a 43F48033 		orr	r3, r3, #65536
 2051 004e C2F88830 		str	r3, [r2, #136]
 2052 0052 E2E7     		b	.L191
 2053              	.L195:
2098:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2054              		.loc 1 2098 9 view .LVU450
 2055 0054 FFF7FEFF 		bl	HAL_PWREx_AVDCallback
 2056              	.LVL88:
2100:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 2057              		.loc 1 2100 9 view .LVU451
2100:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 2058              		.loc 1 2100 12 is_stmt 0 view .LVU452
 2059 0058 064B     		ldr	r3, .L196
 2060 005a 5B68     		ldr	r3, [r3, #4]
2100:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 2061              		.loc 1 2100 11 view .LVU453
 2062 005c 13F0100F 		tst	r3, #16
 2063 0060 E7D1     		bne	.L190
2103:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 2064              		.loc 1 2103 11 is_stmt 1 view .LVU454
 2065 0062 4FF0B042 		mov	r2, #1476395008
 2066 0066 D2F88830 		ldr	r3, [r2, #136]
 2067 006a 43F48033 		orr	r3, r3, #65536
 2068 006e C2F88830 		str	r3, [r2, #136]
2125:../../Drivers/stm32h7xx_hal_driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2069              		.loc 1 2125 1 is_stmt 0 view .LVU455
 2070 0072 DEE7     		b	.L190
 2071              	.L197:
 2072              		.align	2
 2073              	.L196:
ARM GAS  /tmp/ccewlP9t.s 			page 93


 2074 0074 00480258 		.word	1476544512
 2075              		.cfi_endproc
 2076              	.LFE179:
 2078              		.text
 2079              	.Letext0:
 2080              		.file 3 "/home/joseluiz/Programs/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/arm-none-eabi/include
 2081              		.file 4 "/home/joseluiz/Programs/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/arm-none-eabi/include
 2082              		.file 5 "../../Drivers/CMSIS/Include/core_cm7.h"
 2083              		.file 6 "../../Drivers/cmsis_device_h7/Include/stm32h743xx.h"
 2084              		.file 7 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_def.h"
 2085              		.file 8 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_pwr_ex.h"
 2086              		.file 9 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_pwr.h"
 2087              		.file 10 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/ccewlP9t.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_pwr_ex.c
     /tmp/ccewlP9t.s:19     .text.HAL_PWREx_ConfigSupply:0000000000000000 $t
     /tmp/ccewlP9t.s:25     .text.HAL_PWREx_ConfigSupply:0000000000000000 HAL_PWREx_ConfigSupply
     /tmp/ccewlP9t.s:119    .text.HAL_PWREx_ConfigSupply:0000000000000050 $d
     /tmp/ccewlP9t.s:124    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 $t
     /tmp/ccewlP9t.s:130    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 HAL_PWREx_GetSupplyConfig
     /tmp/ccewlP9t.s:147    .text.HAL_PWREx_GetSupplyConfig:000000000000000c $d
     /tmp/ccewlP9t.s:152    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 $t
     /tmp/ccewlP9t.s:158    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 HAL_PWREx_ControlVoltageScaling
     /tmp/ccewlP9t.s:351    .text.HAL_PWREx_ControlVoltageScaling:00000000000000cc $d
     /tmp/ccewlP9t.s:357    .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/ccewlP9t.s:363    .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/ccewlP9t.s:380    .text.HAL_PWREx_GetVoltageRange:000000000000000c $d
     /tmp/ccewlP9t.s:385    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 $t
     /tmp/ccewlP9t.s:391    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 HAL_PWREx_ControlStopModeVoltageScaling
     /tmp/ccewlP9t.s:415    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000010 $d
     /tmp/ccewlP9t.s:420    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 $t
     /tmp/ccewlP9t.s:426    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 HAL_PWREx_GetStopModeVoltageRange
     /tmp/ccewlP9t.s:443    .text.HAL_PWREx_GetStopModeVoltageRange:000000000000000c $d
     /tmp/ccewlP9t.s:448    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 $t
     /tmp/ccewlP9t.s:454    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 HAL_PWREx_EnterSTOPMode
     /tmp/ccewlP9t.s:583    .text.HAL_PWREx_EnterSTOPMode:0000000000000060 $d
     /tmp/ccewlP9t.s:589    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 $t
     /tmp/ccewlP9t.s:595    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 HAL_PWREx_ClearPendingEvent
     /tmp/ccewlP9t.s:615    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccewlP9t.s:621    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 HAL_PWREx_EnterSTANDBYMode
     /tmp/ccewlP9t.s:673    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000038 $d
     /tmp/ccewlP9t.s:679    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 $t
     /tmp/ccewlP9t.s:685    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 HAL_PWREx_ConfigD3Domain
     /tmp/ccewlP9t.s:705    .text.HAL_PWREx_ConfigD3Domain:0000000000000010 $d
     /tmp/ccewlP9t.s:710    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 $t
     /tmp/ccewlP9t.s:716    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/ccewlP9t.s:733    .text.HAL_PWREx_EnableFlashPowerDown:000000000000000c $d
     /tmp/ccewlP9t.s:738    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 $t
     /tmp/ccewlP9t.s:744    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 HAL_PWREx_DisableFlashPowerDown
     /tmp/ccewlP9t.s:761    .text.HAL_PWREx_DisableFlashPowerDown:000000000000000c $d
     /tmp/ccewlP9t.s:766    .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccewlP9t.s:772    .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 HAL_PWREx_EnableWakeUpPin
     /tmp/ccewlP9t.s:938    .text.HAL_PWREx_EnableWakeUpPin:000000000000008c $d
     /tmp/ccewlP9t.s:943    .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccewlP9t.s:949    .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 HAL_PWREx_DisableWakeUpPin
     /tmp/ccewlP9t.s:968    .text.HAL_PWREx_DisableWakeUpPin:000000000000000c $d
     /tmp/ccewlP9t.s:973    .text.HAL_PWREx_GetWakeupFlag:0000000000000000 $t
     /tmp/ccewlP9t.s:979    .text.HAL_PWREx_GetWakeupFlag:0000000000000000 HAL_PWREx_GetWakeupFlag
     /tmp/ccewlP9t.s:1000   .text.HAL_PWREx_GetWakeupFlag:0000000000000008 $d
     /tmp/ccewlP9t.s:1005   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 $t
     /tmp/ccewlP9t.s:1011   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 HAL_PWREx_ClearWakeupFlag
     /tmp/ccewlP9t.s:1046   .text.HAL_PWREx_ClearWakeupFlag:0000000000000018 $d
     /tmp/ccewlP9t.s:1051   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 $t
     /tmp/ccewlP9t.s:1057   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 HAL_PWREx_WKUP1_Callback
     /tmp/ccewlP9t.s:1070   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 $t
     /tmp/ccewlP9t.s:1076   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 HAL_PWREx_WKUP2_Callback
     /tmp/ccewlP9t.s:1089   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 $t
     /tmp/ccewlP9t.s:1095   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 HAL_PWREx_WKUP3_Callback
     /tmp/ccewlP9t.s:1108   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 $t
     /tmp/ccewlP9t.s:1114   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 HAL_PWREx_WKUP4_Callback
ARM GAS  /tmp/ccewlP9t.s 			page 95


     /tmp/ccewlP9t.s:1127   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 $t
     /tmp/ccewlP9t.s:1133   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 HAL_PWREx_WKUP5_Callback
     /tmp/ccewlP9t.s:1146   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 $t
     /tmp/ccewlP9t.s:1152   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 HAL_PWREx_WKUP6_Callback
     /tmp/ccewlP9t.s:1165   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 $t
     /tmp/ccewlP9t.s:1171   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 HAL_PWREx_WAKEUP_PIN_IRQHandler
     /tmp/ccewlP9t.s:1282   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000094 $d
     /tmp/ccewlP9t.s:1287   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 $t
     /tmp/ccewlP9t.s:1293   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 HAL_PWREx_EnableBkUpReg
     /tmp/ccewlP9t.s:1348   .text.HAL_PWREx_EnableBkUpReg:0000000000000030 $d
     /tmp/ccewlP9t.s:1353   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 $t
     /tmp/ccewlP9t.s:1359   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 HAL_PWREx_DisableBkUpReg
     /tmp/ccewlP9t.s:1414   .text.HAL_PWREx_DisableBkUpReg:0000000000000030 $d
     /tmp/ccewlP9t.s:1419   .text.HAL_PWREx_EnableUSBReg:0000000000000000 $t
     /tmp/ccewlP9t.s:1425   .text.HAL_PWREx_EnableUSBReg:0000000000000000 HAL_PWREx_EnableUSBReg
     /tmp/ccewlP9t.s:1480   .text.HAL_PWREx_EnableUSBReg:0000000000000030 $d
     /tmp/ccewlP9t.s:1485   .text.HAL_PWREx_DisableUSBReg:0000000000000000 $t
     /tmp/ccewlP9t.s:1491   .text.HAL_PWREx_DisableUSBReg:0000000000000000 HAL_PWREx_DisableUSBReg
     /tmp/ccewlP9t.s:1546   .text.HAL_PWREx_DisableUSBReg:0000000000000030 $d
     /tmp/ccewlP9t.s:1551   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 $t
     /tmp/ccewlP9t.s:1557   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 HAL_PWREx_EnableUSBVoltageDetector
     /tmp/ccewlP9t.s:1574   .text.HAL_PWREx_EnableUSBVoltageDetector:000000000000000c $d
     /tmp/ccewlP9t.s:1579   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 $t
     /tmp/ccewlP9t.s:1585   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 HAL_PWREx_DisableUSBVoltageDetector
     /tmp/ccewlP9t.s:1602   .text.HAL_PWREx_DisableUSBVoltageDetector:000000000000000c $d
     /tmp/ccewlP9t.s:1607   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 $t
     /tmp/ccewlP9t.s:1613   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 HAL_PWREx_EnableBatteryCharging
     /tmp/ccewlP9t.s:1637   .text.HAL_PWREx_EnableBatteryCharging:0000000000000018 $d
     /tmp/ccewlP9t.s:1642   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 $t
     /tmp/ccewlP9t.s:1648   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 HAL_PWREx_DisableBatteryCharging
     /tmp/ccewlP9t.s:1665   .text.HAL_PWREx_DisableBatteryCharging:000000000000000c $d
     /tmp/ccewlP9t.s:1670   .text.HAL_PWREx_EnableMonitoring:0000000000000000 $t
     /tmp/ccewlP9t.s:1676   .text.HAL_PWREx_EnableMonitoring:0000000000000000 HAL_PWREx_EnableMonitoring
     /tmp/ccewlP9t.s:1693   .text.HAL_PWREx_EnableMonitoring:000000000000000c $d
     /tmp/ccewlP9t.s:1698   .text.HAL_PWREx_DisableMonitoring:0000000000000000 $t
     /tmp/ccewlP9t.s:1704   .text.HAL_PWREx_DisableMonitoring:0000000000000000 HAL_PWREx_DisableMonitoring
     /tmp/ccewlP9t.s:1721   .text.HAL_PWREx_DisableMonitoring:000000000000000c $d
     /tmp/ccewlP9t.s:1726   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 $t
     /tmp/ccewlP9t.s:1732   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 HAL_PWREx_GetTemperatureLevel
     /tmp/ccewlP9t.s:1765   .text.HAL_PWREx_GetTemperatureLevel:0000000000000018 $d
     /tmp/ccewlP9t.s:1770   .text.HAL_PWREx_GetVBATLevel:0000000000000000 $t
     /tmp/ccewlP9t.s:1776   .text.HAL_PWREx_GetVBATLevel:0000000000000000 HAL_PWREx_GetVBATLevel
     /tmp/ccewlP9t.s:1809   .text.HAL_PWREx_GetVBATLevel:0000000000000018 $d
     /tmp/ccewlP9t.s:1814   .text.HAL_PWREx_ConfigAVD:0000000000000000 $t
     /tmp/ccewlP9t.s:1820   .text.HAL_PWREx_ConfigAVD:0000000000000000 HAL_PWREx_ConfigAVD
     /tmp/ccewlP9t.s:1907   .text.HAL_PWREx_ConfigAVD:0000000000000094 $d
     /tmp/ccewlP9t.s:1912   .text.HAL_PWREx_EnableAVD:0000000000000000 $t
     /tmp/ccewlP9t.s:1918   .text.HAL_PWREx_EnableAVD:0000000000000000 HAL_PWREx_EnableAVD
     /tmp/ccewlP9t.s:1935   .text.HAL_PWREx_EnableAVD:000000000000000c $d
     /tmp/ccewlP9t.s:1940   .text.HAL_PWREx_DisableAVD:0000000000000000 $t
     /tmp/ccewlP9t.s:1946   .text.HAL_PWREx_DisableAVD:0000000000000000 HAL_PWREx_DisableAVD
     /tmp/ccewlP9t.s:1963   .text.HAL_PWREx_DisableAVD:000000000000000c $d
     /tmp/ccewlP9t.s:1968   .text.HAL_PWREx_AVDCallback:0000000000000000 $t
     /tmp/ccewlP9t.s:1974   .text.HAL_PWREx_AVDCallback:0000000000000000 HAL_PWREx_AVDCallback
     /tmp/ccewlP9t.s:1987   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 $t
     /tmp/ccewlP9t.s:1993   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 HAL_PWREx_PVD_AVD_IRQHandler
     /tmp/ccewlP9t.s:2074   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000074 $d
ARM GAS  /tmp/ccewlP9t.s 			page 96



UNDEFINED SYMBOLS
HAL_GetTick
HAL_PWR_PVDCallback
