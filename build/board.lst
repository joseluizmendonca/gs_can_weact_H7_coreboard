ARM GAS  /tmp/ccRYAMGh.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"board.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.task_my_program,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	task_my_program:
  25              	.LVL0:
  26              	.LFB151:
  27              		.file 1 "Src/board.c"
   1:Src/board.c   **** /*
   2:Src/board.c   **** 
   3:Src/board.c   **** The MIT License (MIT)
   4:Src/board.c   **** 
   5:Src/board.c   **** Copyright (c) 2022 Ryan Edwards
   6:Src/board.c   **** 
   7:Src/board.c   **** Permission is hereby granted, free of charge, to any person obtaining a copy
   8:Src/board.c   **** of this software and associated documentation files (the "Software"), to deal
   9:Src/board.c   **** in the Software without restriction, including without limitation the rights
  10:Src/board.c   **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:Src/board.c   **** copies of the Software, and to permit persons to whom the Software is
  12:Src/board.c   **** furnished to do so, subject to the following conditions:
  13:Src/board.c   **** 
  14:Src/board.c   **** The above copyright notice and this permission notice shall be included in
  15:Src/board.c   **** all copies or substantial portions of the Software.
  16:Src/board.c   **** 
  17:Src/board.c   **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Src/board.c   **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:Src/board.c   **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:Src/board.c   **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:Src/board.c   **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:Src/board.c   **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  23:Src/board.c   **** THE SOFTWARE.
  24:Src/board.c   **** 
  25:Src/board.c   **** */
  26:Src/board.c   **** 
  27:Src/board.c   **** /* Includes ------------------------------------------------------------------*/
  28:Src/board.c   **** #include "board.h"
  29:Src/board.c   **** #include "FreeRTOS.h"
  30:Src/board.c   **** #include "queue.h"
  31:Src/board.c   **** #include "task.h"
ARM GAS  /tmp/ccRYAMGh.s 			page 2


  32:Src/board.c   **** #include "usbd_gs_can.h"
  33:Src/board.c   **** #include "can.h"
  34:Src/board.c   **** #include "led.h"
  35:Src/board.c   **** 
  36:Src/board.c   **** #define TASK_MY_PROGRAM_STACK_SIZE (512 / sizeof(portSTACK_TYPE))
  37:Src/board.c   **** #define TASK_MY_PROGRAM_PRIORITY   (tskIDLE_PRIORITY + 3)
  38:Src/board.c   **** 
  39:Src/board.c   **** extern void main_usbd_gs_can_set_channel_cb(USBD_HandleTypeDef *hUSB);
  40:Src/board.c   **** 
  41:Src/board.c   **** FDCAN_HandleTypeDef hfdcan1;
  42:Src/board.c   **** FDCAN_HandleTypeDef hfdcan2;
  43:Src/board.c   **** LED_HandleTypeDef hled1;
  44:Src/board.c   **** 
  45:Src/board.c   **** extern USBD_GS_CAN_HandleTypeDef hGS_CAN;
  46:Src/board.c   **** extern TIM_HandleTypeDef htim2;
  47:Src/board.c   **** 
  48:Src/board.c   **** static TaskHandle_t xCreatedMyProgramTask;
  49:Src/board.c   **** static bool host_channel_is_active;
  50:Src/board.c   **** 
  51:Src/board.c   **** static void task_my_program(void *argument);
  52:Src/board.c   **** 
  53:Src/board.c   **** /**
  54:Src/board.c   ****   * @brief System Clock Configuration
  55:Src/board.c   ****   * @retval None
  56:Src/board.c   ****   */
  57:Src/board.c   **** void SystemClock_Config(void)
  58:Src/board.c   **** {
  59:Src/board.c   **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  60:Src/board.c   **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  61:Src/board.c   **** 
  62:Src/board.c   **** 	/** Supply configuration update enable
  63:Src/board.c   **** 	*/
  64:Src/board.c   **** 	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
  65:Src/board.c   **** 
  66:Src/board.c   **** 	/** Configure the main internal regulator output voltage
  67:Src/board.c   **** 	*/
  68:Src/board.c   **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  69:Src/board.c   **** 
  70:Src/board.c   **** 	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
  71:Src/board.c   **** 
  72:Src/board.c   **** 	/** Initializes the RCC Oscillators according to the specified parameters
  73:Src/board.c   **** 	* in the RCC_OscInitTypeDef structure.
  74:Src/board.c   **** 	*/
  75:Src/board.c   **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
  76:Src/board.c   **** 	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  77:Src/board.c   **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  78:Src/board.c   **** 	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  79:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  80:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  81:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLM = 4;
  82:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLN = 20;
  83:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLP = 2;
  84:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLQ = 8;
  85:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLR = 2;
  86:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  87:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  88:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLFRACN = 0;
ARM GAS  /tmp/ccRYAMGh.s 			page 3


  89:Src/board.c   **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  90:Src/board.c   **** 	{
  91:Src/board.c   **** 		Error_Handler();
  92:Src/board.c   **** 	}
  93:Src/board.c   **** 
  94:Src/board.c   **** 	/** Initializes the CPU, AHB and APB buses clocks
  95:Src/board.c   **** 	*/
  96:Src/board.c   **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  97:Src/board.c   **** 								  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
  98:Src/board.c   **** 								  |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  99:Src/board.c   **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 100:Src/board.c   **** 	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 101:Src/board.c   **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 102:Src/board.c   **** 	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 103:Src/board.c   **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 104:Src/board.c   **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 105:Src/board.c   **** 	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 106:Src/board.c   **** 
 107:Src/board.c   **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 108:Src/board.c   **** 	{
 109:Src/board.c   **** 		Error_Handler();
 110:Src/board.c   **** 	}
 111:Src/board.c   **** }
 112:Src/board.c   **** 
 113:Src/board.c   **** /** Configure pins
 114:Src/board.c   **** */
 115:Src/board.c   **** void MX_GPIO_Init(void)
 116:Src/board.c   **** {
 117:Src/board.c   **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
 118:Src/board.c   **** 
 119:Src/board.c   **** 	/* GPIO Ports Clock Enable */
 120:Src/board.c   **** 	__HAL_RCC_GPIOE_CLK_ENABLE();
 121:Src/board.c   **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 122:Src/board.c   **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 123:Src/board.c   **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 124:Src/board.c   **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 125:Src/board.c   **** 
 126:Src/board.c   **** 	/*Configure GPIO pin Output Level */
 127:Src/board.c   **** 	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 128:Src/board.c   **** 
 129:Src/board.c   **** 	/*Configure GPIO pin : USER_BTN_K1_Pin */
 130:Src/board.c   **** 	GPIO_InitStruct.Pin = USER_BTN_K1_Pin;
 131:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 132:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_PULLUP;
 133:Src/board.c   **** 	HAL_GPIO_Init(USER_BTN_K1_GPIO_Port, &GPIO_InitStruct);
 134:Src/board.c   **** 
 135:Src/board.c   **** 	/*Configure GPIO pin : LED1_Pin */
 136:Src/board.c   **** 	GPIO_InitStruct.Pin = LED1_Pin;
 137:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 138:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 139:Src/board.c   **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 140:Src/board.c   **** 	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 141:Src/board.c   **** 
 142:Src/board.c   **** 	/*Configure GPIO pin : USER_BTN_K2_Pin */
 143:Src/board.c   **** 	GPIO_InitStruct.Pin = USER_BTN_K2_Pin;
 144:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 145:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_PULLUP;
ARM GAS  /tmp/ccRYAMGh.s 			page 4


 146:Src/board.c   **** 	HAL_GPIO_Init(USER_BTN_K2_GPIO_Port, &GPIO_InitStruct);
 147:Src/board.c   **** }
 148:Src/board.c   **** 
 149:Src/board.c   **** static void task_my_program(void *argument)
 150:Src/board.c   **** {
  28              		.loc 1 150 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 150 1 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
 151:Src/board.c   **** 	UNUSED(argument);
  40              		.loc 1 151 2 is_stmt 1 view .LVU2
 152:Src/board.c   **** 
 153:Src/board.c   **** 	uint8_t prev_pressed_state = GPIO_PIN_SET;
  41              		.loc 1 153 2 view .LVU3
  42              	.LVL1:
  43              		.loc 1 153 10 is_stmt 0 view .LVU4
  44 0002 0125     		movs	r5, #1
  45 0004 13E0     		b	.L4
  46              	.LVL2:
  47              	.L8:
 154:Src/board.c   **** 	static struct gs_host_frame_object frame_object;
 155:Src/board.c   **** 	/* Infinite loop */
 156:Src/board.c   **** 	for (;;) {
 157:Src/board.c   **** 		/* if GPIO is pressed then send*/
 158:Src/board.c   **** 		if (HAL_GPIO_ReadPin(USER_BTN_K1_GPIO_Port, USER_BTN_K1_Pin) == GPIO_PIN_RESET && prev_pressed_st
 159:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_RESET;
 160:Src/board.c   **** 
 161:Src/board.c   **** 			frame_object.frame.can_dlc = 8;
 162:Src/board.c   **** 			frame_object.frame.can_id = 0x123;
 163:Src/board.c   **** 			frame_object.frame.channel = 0;
 164:Src/board.c   **** 			frame_object.frame.echo_id = 0xFFFFFFFF;
 165:Src/board.c   **** 			frame_object.frame.flags = 0;
 166:Src/board.c   **** 			frame_object.frame.classic_can->data[0] = 0x11;
 167:Src/board.c   **** 			frame_object.frame.classic_can->data[1] = 0x22;
 168:Src/board.c   **** 			frame_object.frame.classic_can->data[2] = 0x34;
 169:Src/board.c   **** 			frame_object.frame.classic_can->data[3] = 0x44;
 170:Src/board.c   **** 			frame_object.frame.classic_can->data[4] = 0x55;
 171:Src/board.c   **** 			frame_object.frame.classic_can->data[5] = 0x66;
 172:Src/board.c   **** 			frame_object.frame.classic_can->data[6] = 0x77;
 173:Src/board.c   **** 			frame_object.frame.classic_can->data[7] = 0x88;
 174:Src/board.c   **** 			frame_object.frame.classic_can_ts->timestamp_us = __HAL_TIM_GET_COUNTER(&htim2);
 175:Src/board.c   **** 			if (host_channel_is_active) {
 176:Src/board.c   **** 				xQueueSendToBack(hGS_CAN.queue_to_hostHandle, &frame_object.frame, 0);
  48              		.loc 1 176 5 is_stmt 1 view .LVU5
  49 0006 0023     		movs	r3, #0
  50 0008 1A46     		mov	r2, r3
  51 000a 2149     		ldr	r1, .L9
  52 000c 2148     		ldr	r0, .L9+4
  53 000e D0F8B000 		ldr	r0, [r0, #176]
ARM GAS  /tmp/ccRYAMGh.s 			page 5


  54 0012 FFF7FEFF 		bl	xQueueGenericSend
  55              	.LVL3:
 159:Src/board.c   **** 
  56              		.loc 1 159 23 is_stmt 0 view .LVU6
  57 0016 2546     		mov	r5, r4
  58              	.LVL4:
  59              	.L2:
 177:Src/board.c   **** 			}
 178:Src/board.c   **** 		}
 179:Src/board.c   **** 
 180:Src/board.c   **** 		if (HAL_GPIO_ReadPin(USER_BTN_K1_GPIO_Port, USER_BTN_K1_Pin) == GPIO_PIN_SET) {
  60              		.loc 1 180 3 is_stmt 1 view .LVU7
  61              		.loc 1 180 7 is_stmt 0 view .LVU8
  62 0018 0821     		movs	r1, #8
  63 001a 1F48     		ldr	r0, .L9+8
  64 001c FFF7FEFF 		bl	HAL_GPIO_ReadPin
  65              	.LVL5:
  66 0020 0446     		mov	r4, r0
  67              		.loc 1 180 6 view .LVU9
  68 0022 0128     		cmp	r0, #1
  69 0024 32D1     		bne	.L7
  70              	.L3:
  71              	.LVL6:
 181:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_SET;
 182:Src/board.c   **** 		}
 183:Src/board.c   **** 
 184:Src/board.c   **** 		vTaskDelay(1);
  72              		.loc 1 184 3 is_stmt 1 view .LVU10
  73 0026 0120     		movs	r0, #1
  74 0028 FFF7FEFF 		bl	vTaskDelay
  75              	.LVL7:
 156:Src/board.c   **** 		/* if GPIO is pressed then send*/
  76              		.loc 1 156 8 view .LVU11
 158:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_RESET;
  77              		.loc 1 158 6 is_stmt 0 view .LVU12
  78 002c 2546     		mov	r5, r4
  79              	.LVL8:
  80              	.L4:
 154:Src/board.c   **** 	/* Infinite loop */
  81              		.loc 1 154 2 is_stmt 1 view .LVU13
 156:Src/board.c   **** 		/* if GPIO is pressed then send*/
  82              		.loc 1 156 2 view .LVU14
 158:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_RESET;
  83              		.loc 1 158 3 view .LVU15
 158:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_RESET;
  84              		.loc 1 158 7 is_stmt 0 view .LVU16
  85 002e 0821     		movs	r1, #8
  86 0030 1948     		ldr	r0, .L9+8
  87 0032 FFF7FEFF 		bl	HAL_GPIO_ReadPin
  88              	.LVL9:
 158:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_RESET;
  89              		.loc 1 158 6 view .LVU17
  90 0036 0446     		mov	r4, r0
  91 0038 0028     		cmp	r0, #0
  92 003a EDD1     		bne	.L2
 158:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_RESET;
  93              		.loc 1 158 82 discriminator 1 view .LVU18
ARM GAS  /tmp/ccRYAMGh.s 			page 6


  94 003c 002D     		cmp	r5, #0
  95 003e EBD0     		beq	.L2
 159:Src/board.c   **** 
  96              		.loc 1 159 4 is_stmt 1 view .LVU19
  97              	.LVL10:
 161:Src/board.c   **** 			frame_object.frame.can_id = 0x123;
  98              		.loc 1 161 4 view .LVU20
 161:Src/board.c   **** 			frame_object.frame.can_id = 0x123;
  99              		.loc 1 161 31 is_stmt 0 view .LVU21
 100 0040 134B     		ldr	r3, .L9
 101 0042 0822     		movs	r2, #8
 102 0044 1A72     		strb	r2, [r3, #8]
 162:Src/board.c   **** 			frame_object.frame.channel = 0;
 103              		.loc 1 162 4 is_stmt 1 view .LVU22
 162:Src/board.c   **** 			frame_object.frame.channel = 0;
 104              		.loc 1 162 30 is_stmt 0 view .LVU23
 105 0046 40F22312 		movw	r2, #291
 106 004a 5A60     		str	r2, [r3, #4]
 163:Src/board.c   **** 			frame_object.frame.echo_id = 0xFFFFFFFF;
 107              		.loc 1 163 4 is_stmt 1 view .LVU24
 163:Src/board.c   **** 			frame_object.frame.echo_id = 0xFFFFFFFF;
 108              		.loc 1 163 31 is_stmt 0 view .LVU25
 109 004c 0022     		movs	r2, #0
 110 004e 5A72     		strb	r2, [r3, #9]
 164:Src/board.c   **** 			frame_object.frame.flags = 0;
 111              		.loc 1 164 4 is_stmt 1 view .LVU26
 164:Src/board.c   **** 			frame_object.frame.flags = 0;
 112              		.loc 1 164 31 is_stmt 0 view .LVU27
 113 0050 4FF0FF31 		mov	r1, #-1
 114 0054 1960     		str	r1, [r3]
 165:Src/board.c   **** 			frame_object.frame.classic_can->data[0] = 0x11;
 115              		.loc 1 165 4 is_stmt 1 view .LVU28
 165:Src/board.c   **** 			frame_object.frame.classic_can->data[0] = 0x11;
 116              		.loc 1 165 29 is_stmt 0 view .LVU29
 117 0056 9A72     		strb	r2, [r3, #10]
 166:Src/board.c   **** 			frame_object.frame.classic_can->data[1] = 0x22;
 118              		.loc 1 166 4 is_stmt 1 view .LVU30
 166:Src/board.c   **** 			frame_object.frame.classic_can->data[1] = 0x22;
 119              		.loc 1 166 44 is_stmt 0 view .LVU31
 120 0058 1122     		movs	r2, #17
 121 005a 1A73     		strb	r2, [r3, #12]
 167:Src/board.c   **** 			frame_object.frame.classic_can->data[2] = 0x34;
 122              		.loc 1 167 4 is_stmt 1 view .LVU32
 167:Src/board.c   **** 			frame_object.frame.classic_can->data[2] = 0x34;
 123              		.loc 1 167 44 is_stmt 0 view .LVU33
 124 005c 2222     		movs	r2, #34
 125 005e 5A73     		strb	r2, [r3, #13]
 168:Src/board.c   **** 			frame_object.frame.classic_can->data[3] = 0x44;
 126              		.loc 1 168 4 is_stmt 1 view .LVU34
 168:Src/board.c   **** 			frame_object.frame.classic_can->data[3] = 0x44;
 127              		.loc 1 168 44 is_stmt 0 view .LVU35
 128 0060 3422     		movs	r2, #52
 129 0062 9A73     		strb	r2, [r3, #14]
 169:Src/board.c   **** 			frame_object.frame.classic_can->data[4] = 0x55;
 130              		.loc 1 169 4 is_stmt 1 view .LVU36
 169:Src/board.c   **** 			frame_object.frame.classic_can->data[4] = 0x55;
 131              		.loc 1 169 44 is_stmt 0 view .LVU37
ARM GAS  /tmp/ccRYAMGh.s 			page 7


 132 0064 4422     		movs	r2, #68
 133 0066 DA73     		strb	r2, [r3, #15]
 170:Src/board.c   **** 			frame_object.frame.classic_can->data[5] = 0x66;
 134              		.loc 1 170 4 is_stmt 1 view .LVU38
 170:Src/board.c   **** 			frame_object.frame.classic_can->data[5] = 0x66;
 135              		.loc 1 170 44 is_stmt 0 view .LVU39
 136 0068 5522     		movs	r2, #85
 137 006a 1A74     		strb	r2, [r3, #16]
 171:Src/board.c   **** 			frame_object.frame.classic_can->data[6] = 0x77;
 138              		.loc 1 171 4 is_stmt 1 view .LVU40
 171:Src/board.c   **** 			frame_object.frame.classic_can->data[6] = 0x77;
 139              		.loc 1 171 44 is_stmt 0 view .LVU41
 140 006c 6622     		movs	r2, #102
 141 006e 5A74     		strb	r2, [r3, #17]
 172:Src/board.c   **** 			frame_object.frame.classic_can->data[7] = 0x88;
 142              		.loc 1 172 4 is_stmt 1 view .LVU42
 172:Src/board.c   **** 			frame_object.frame.classic_can->data[7] = 0x88;
 143              		.loc 1 172 44 is_stmt 0 view .LVU43
 144 0070 7722     		movs	r2, #119
 145 0072 9A74     		strb	r2, [r3, #18]
 173:Src/board.c   **** 			frame_object.frame.classic_can_ts->timestamp_us = __HAL_TIM_GET_COUNTER(&htim2);
 146              		.loc 1 173 4 is_stmt 1 view .LVU44
 173:Src/board.c   **** 			frame_object.frame.classic_can_ts->timestamp_us = __HAL_TIM_GET_COUNTER(&htim2);
 147              		.loc 1 173 44 is_stmt 0 view .LVU45
 148 0074 8822     		movs	r2, #136
 149 0076 DA74     		strb	r2, [r3, #19]
 174:Src/board.c   **** 			if (host_channel_is_active) {
 150              		.loc 1 174 4 is_stmt 1 view .LVU46
 174:Src/board.c   **** 			if (host_channel_is_active) {
 151              		.loc 1 174 54 is_stmt 0 view .LVU47
 152 0078 084A     		ldr	r2, .L9+12
 153 007a 1268     		ldr	r2, [r2]
 154 007c 526A     		ldr	r2, [r2, #36]
 174:Src/board.c   **** 			if (host_channel_is_active) {
 155              		.loc 1 174 52 view .LVU48
 156 007e 5A61     		str	r2, [r3, #20]
 175:Src/board.c   **** 				xQueueSendToBack(hGS_CAN.queue_to_hostHandle, &frame_object.frame, 0);
 157              		.loc 1 175 4 is_stmt 1 view .LVU49
 175:Src/board.c   **** 				xQueueSendToBack(hGS_CAN.queue_to_hostHandle, &frame_object.frame, 0);
 158              		.loc 1 175 8 is_stmt 0 view .LVU50
 159 0080 074B     		ldr	r3, .L9+16
 160 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 175:Src/board.c   **** 				xQueueSendToBack(hGS_CAN.queue_to_hostHandle, &frame_object.frame, 0);
 161              		.loc 1 175 7 view .LVU51
 162 0084 002B     		cmp	r3, #0
 163 0086 BED1     		bne	.L8
 159:Src/board.c   **** 
 164              		.loc 1 159 23 view .LVU52
 165 0088 0546     		mov	r5, r0
 166 008a C5E7     		b	.L2
 167              	.LVL11:
 168              	.L7:
 180:Src/board.c   **** 			prev_pressed_state = GPIO_PIN_SET;
 169              		.loc 1 180 6 view .LVU53
 170 008c 2C46     		mov	r4, r5
 171 008e CAE7     		b	.L3
 172              	.L10:
ARM GAS  /tmp/ccRYAMGh.s 			page 8


 173              		.align	2
 174              	.L9:
 175 0090 00000000 		.word	.LANCHOR0
 176 0094 00000000 		.word	hGS_CAN
 177 0098 00100258 		.word	1476530176
 178 009c 00000000 		.word	htim2
 179 00a0 00000000 		.word	.LANCHOR1
 180              		.cfi_endproc
 181              	.LFE151:
 183              		.section	.text.SystemClock_Config,"ax",%progbits
 184              		.align	1
 185              		.global	SystemClock_Config
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 190              	SystemClock_Config:
 191              	.LFB149:
  58:Src/board.c   **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 192              		.loc 1 58 1 is_stmt 1 view -0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 112
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196 0000 00B5     		push	{lr}
 197              	.LCFI1:
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 14, -4
 200 0002 9DB0     		sub	sp, sp, #116
 201              	.LCFI2:
 202              		.cfi_def_cfa_offset 120
  59:Src/board.c   **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 203              		.loc 1 59 2 view .LVU55
  59:Src/board.c   **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 204              		.loc 1 59 21 is_stmt 0 view .LVU56
 205 0004 4C22     		movs	r2, #76
 206 0006 0021     		movs	r1, #0
 207 0008 09A8     		add	r0, sp, #36
 208 000a FFF7FEFF 		bl	memset
 209              	.LVL12:
  60:Src/board.c   **** 
 210              		.loc 1 60 2 is_stmt 1 view .LVU57
  60:Src/board.c   **** 
 211              		.loc 1 60 21 is_stmt 0 view .LVU58
 212 000e 2022     		movs	r2, #32
 213 0010 0021     		movs	r1, #0
 214 0012 01A8     		add	r0, sp, #4
 215 0014 FFF7FEFF 		bl	memset
 216              	.LVL13:
  64:Src/board.c   **** 
 217              		.loc 1 64 2 is_stmt 1 view .LVU59
 218 0018 0220     		movs	r0, #2
 219 001a FFF7FEFF 		bl	HAL_PWREx_ConfigSupply
 220              	.LVL14:
  68:Src/board.c   **** 
 221              		.loc 1 68 2 view .LVU60
 222              	.LBB2:
  68:Src/board.c   **** 
 223              		.loc 1 68 2 view .LVU61
ARM GAS  /tmp/ccRYAMGh.s 			page 9


 224 001e 0023     		movs	r3, #0
 225 0020 0093     		str	r3, [sp]
  68:Src/board.c   **** 
 226              		.loc 1 68 2 view .LVU62
  68:Src/board.c   **** 
 227              		.loc 1 68 2 view .LVU63
 228 0022 294B     		ldr	r3, .L18
 229 0024 DA6A     		ldr	r2, [r3, #44]
 230 0026 22F00102 		bic	r2, r2, #1
 231 002a DA62     		str	r2, [r3, #44]
  68:Src/board.c   **** 
 232              		.loc 1 68 2 view .LVU64
 233 002c DB6A     		ldr	r3, [r3, #44]
 234 002e 03F00103 		and	r3, r3, #1
 235 0032 0093     		str	r3, [sp]
  68:Src/board.c   **** 
 236              		.loc 1 68 2 view .LVU65
 237 0034 254A     		ldr	r2, .L18+4
 238 0036 9369     		ldr	r3, [r2, #24]
 239 0038 23F44043 		bic	r3, r3, #49152
 240 003c 43F48043 		orr	r3, r3, #16384
 241 0040 9361     		str	r3, [r2, #24]
  68:Src/board.c   **** 
 242              		.loc 1 68 2 view .LVU66
 243 0042 9369     		ldr	r3, [r2, #24]
 244 0044 03F44043 		and	r3, r3, #49152
 245 0048 0093     		str	r3, [sp]
  68:Src/board.c   **** 
 246              		.loc 1 68 2 view .LVU67
 247 004a 009B     		ldr	r3, [sp]
 248              	.LBE2:
  68:Src/board.c   **** 
 249              		.loc 1 68 2 view .LVU68
  70:Src/board.c   **** 
 250              		.loc 1 70 2 view .LVU69
 251              	.L12:
  70:Src/board.c   **** 
 252              		.loc 1 70 48 discriminator 1 view .LVU70
  70:Src/board.c   **** 
 253              		.loc 1 70 8 discriminator 1 view .LVU71
  70:Src/board.c   **** 
 254              		.loc 1 70 10 is_stmt 0 discriminator 1 view .LVU72
 255 004c 1F4B     		ldr	r3, .L18+4
 256 004e 9B69     		ldr	r3, [r3, #24]
  70:Src/board.c   **** 
 257              		.loc 1 70 8 discriminator 1 view .LVU73
 258 0050 13F4005F 		tst	r3, #8192
 259 0054 FAD0     		beq	.L12
  75:Src/board.c   **** 	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 260              		.loc 1 75 2 is_stmt 1 view .LVU74
  75:Src/board.c   **** 	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 261              		.loc 1 75 35 is_stmt 0 view .LVU75
 262 0056 2223     		movs	r3, #34
 263 0058 0993     		str	r3, [sp, #36]
  76:Src/board.c   **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 264              		.loc 1 76 2 is_stmt 1 view .LVU76
  76:Src/board.c   **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  /tmp/ccRYAMGh.s 			page 10


 265              		.loc 1 76 29 is_stmt 0 view .LVU77
 266 005a 0123     		movs	r3, #1
 267 005c 0C93     		str	r3, [sp, #48]
  77:Src/board.c   **** 	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 268              		.loc 1 77 2 is_stmt 1 view .LVU78
  77:Src/board.c   **** 	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 269              		.loc 1 77 40 is_stmt 0 view .LVU79
 270 005e 4022     		movs	r2, #64
 271 0060 0D92     		str	r2, [sp, #52]
  78:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 272              		.loc 1 78 2 is_stmt 1 view .LVU80
  78:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 273              		.loc 1 78 31 is_stmt 0 view .LVU81
 274 0062 0F93     		str	r3, [sp, #60]
  79:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 275              		.loc 1 79 2 is_stmt 1 view .LVU82
  79:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 276              		.loc 1 79 33 is_stmt 0 view .LVU83
 277 0064 0222     		movs	r2, #2
 278 0066 1292     		str	r2, [sp, #72]
  80:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLM = 4;
 279              		.loc 1 80 2 is_stmt 1 view .LVU84
  80:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLM = 4;
 280              		.loc 1 80 34 is_stmt 0 view .LVU85
 281 0068 0023     		movs	r3, #0
 282 006a 1393     		str	r3, [sp, #76]
  81:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLN = 20;
 283              		.loc 1 81 2 is_stmt 1 view .LVU86
  81:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLN = 20;
 284              		.loc 1 81 29 is_stmt 0 view .LVU87
 285 006c 0421     		movs	r1, #4
 286 006e 1491     		str	r1, [sp, #80]
  82:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLP = 2;
 287              		.loc 1 82 2 is_stmt 1 view .LVU88
  82:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLP = 2;
 288              		.loc 1 82 29 is_stmt 0 view .LVU89
 289 0070 1421     		movs	r1, #20
 290 0072 1591     		str	r1, [sp, #84]
  83:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLQ = 8;
 291              		.loc 1 83 2 is_stmt 1 view .LVU90
  83:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLQ = 8;
 292              		.loc 1 83 29 is_stmt 0 view .LVU91
 293 0074 1692     		str	r2, [sp, #88]
  84:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLR = 2;
 294              		.loc 1 84 2 is_stmt 1 view .LVU92
  84:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLR = 2;
 295              		.loc 1 84 29 is_stmt 0 view .LVU93
 296 0076 0821     		movs	r1, #8
 297 0078 1791     		str	r1, [sp, #92]
  85:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 298              		.loc 1 85 2 is_stmt 1 view .LVU94
  85:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 299              		.loc 1 85 29 is_stmt 0 view .LVU95
 300 007a 1892     		str	r2, [sp, #96]
  86:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 301              		.loc 1 86 2 is_stmt 1 view .LVU96
  86:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
ARM GAS  /tmp/ccRYAMGh.s 			page 11


 302              		.loc 1 86 31 is_stmt 0 view .LVU97
 303 007c 0C22     		movs	r2, #12
 304 007e 1992     		str	r2, [sp, #100]
  87:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 305              		.loc 1 87 2 is_stmt 1 view .LVU98
  87:Src/board.c   **** 	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 306              		.loc 1 87 34 is_stmt 0 view .LVU99
 307 0080 1A93     		str	r3, [sp, #104]
  88:Src/board.c   **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 308              		.loc 1 88 2 is_stmt 1 view .LVU100
  88:Src/board.c   **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 309              		.loc 1 88 33 is_stmt 0 view .LVU101
 310 0082 1B93     		str	r3, [sp, #108]
  89:Src/board.c   **** 	{
 311              		.loc 1 89 2 is_stmt 1 view .LVU102
  89:Src/board.c   **** 	{
 312              		.loc 1 89 6 is_stmt 0 view .LVU103
 313 0084 09A8     		add	r0, sp, #36
 314 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 315              	.LVL15:
  89:Src/board.c   **** 	{
 316              		.loc 1 89 5 view .LVU104
 317 008a B0B9     		cbnz	r0, .L16
 318              	.L13:
  96:Src/board.c   **** 								  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
 319              		.loc 1 96 2 is_stmt 1 view .LVU105
  96:Src/board.c   **** 								  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
 320              		.loc 1 96 30 is_stmt 0 view .LVU106
 321 008c 3F23     		movs	r3, #63
 322 008e 0193     		str	r3, [sp, #4]
  99:Src/board.c   **** 	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 323              		.loc 1 99 2 is_stmt 1 view .LVU107
  99:Src/board.c   **** 	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 324              		.loc 1 99 33 is_stmt 0 view .LVU108
 325 0090 0323     		movs	r3, #3
 326 0092 0293     		str	r3, [sp, #8]
 100:Src/board.c   **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 327              		.loc 1 100 2 is_stmt 1 view .LVU109
 100:Src/board.c   **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 328              		.loc 1 100 34 is_stmt 0 view .LVU110
 329 0094 0023     		movs	r3, #0
 330 0096 0393     		str	r3, [sp, #12]
 101:Src/board.c   **** 	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 331              		.loc 1 101 2 is_stmt 1 view .LVU111
 101:Src/board.c   **** 	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 332              		.loc 1 101 34 is_stmt 0 view .LVU112
 333 0098 0823     		movs	r3, #8
 334 009a 0493     		str	r3, [sp, #16]
 102:Src/board.c   **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 335              		.loc 1 102 2 is_stmt 1 view .LVU113
 102:Src/board.c   **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 336              		.loc 1 102 35 is_stmt 0 view .LVU114
 337 009c 4023     		movs	r3, #64
 338 009e 0593     		str	r3, [sp, #20]
 103:Src/board.c   **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 339              		.loc 1 103 2 is_stmt 1 view .LVU115
 103:Src/board.c   **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
ARM GAS  /tmp/ccRYAMGh.s 			page 12


 340              		.loc 1 103 35 is_stmt 0 view .LVU116
 341 00a0 0693     		str	r3, [sp, #24]
 104:Src/board.c   **** 	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 342              		.loc 1 104 2 is_stmt 1 view .LVU117
 104:Src/board.c   **** 	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 343              		.loc 1 104 35 is_stmt 0 view .LVU118
 344 00a2 4FF48062 		mov	r2, #1024
 345 00a6 0792     		str	r2, [sp, #28]
 105:Src/board.c   **** 
 346              		.loc 1 105 2 is_stmt 1 view .LVU119
 105:Src/board.c   **** 
 347              		.loc 1 105 35 is_stmt 0 view .LVU120
 348 00a8 0893     		str	r3, [sp, #32]
 107:Src/board.c   **** 	{
 349              		.loc 1 107 2 is_stmt 1 view .LVU121
 107:Src/board.c   **** 	{
 350              		.loc 1 107 6 is_stmt 0 view .LVU122
 351 00aa 0121     		movs	r1, #1
 352 00ac 01A8     		add	r0, sp, #4
 353 00ae FFF7FEFF 		bl	HAL_RCC_ClockConfig
 354              	.LVL16:
 107:Src/board.c   **** 	{
 355              		.loc 1 107 5 view .LVU123
 356 00b2 28B9     		cbnz	r0, .L17
 357              	.L11:
 111:Src/board.c   **** 
 358              		.loc 1 111 1 view .LVU124
 359 00b4 1DB0     		add	sp, sp, #116
 360              	.LCFI3:
 361              		.cfi_remember_state
 362              		.cfi_def_cfa_offset 4
 363              		@ sp needed
 364 00b6 5DF804FB 		ldr	pc, [sp], #4
 365              	.L16:
 366              	.LCFI4:
 367              		.cfi_restore_state
  91:Src/board.c   **** 	}
 368              		.loc 1 91 3 is_stmt 1 view .LVU125
 369 00ba FFF7FEFF 		bl	Error_Handler
 370              	.LVL17:
 371 00be E5E7     		b	.L13
 372              	.L17:
 109:Src/board.c   **** 	}
 373              		.loc 1 109 3 view .LVU126
 374 00c0 FFF7FEFF 		bl	Error_Handler
 375              	.LVL18:
 111:Src/board.c   **** 
 376              		.loc 1 111 1 is_stmt 0 view .LVU127
 377 00c4 F6E7     		b	.L11
 378              	.L19:
 379 00c6 00BF     		.align	2
 380              	.L18:
 381 00c8 00040058 		.word	1476396032
 382 00cc 00480258 		.word	1476544512
 383              		.cfi_endproc
 384              	.LFE149:
 386              		.section	.text.MX_GPIO_Init,"ax",%progbits
ARM GAS  /tmp/ccRYAMGh.s 			page 13


 387              		.align	1
 388              		.global	MX_GPIO_Init
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 393              	MX_GPIO_Init:
 394              	.LFB150:
 116:Src/board.c   **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
 395              		.loc 1 116 1 is_stmt 1 view -0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 40
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399 0000 70B5     		push	{r4, r5, r6, lr}
 400              	.LCFI5:
 401              		.cfi_def_cfa_offset 16
 402              		.cfi_offset 4, -16
 403              		.cfi_offset 5, -12
 404              		.cfi_offset 6, -8
 405              		.cfi_offset 14, -4
 406 0002 8AB0     		sub	sp, sp, #40
 407              	.LCFI6:
 408              		.cfi_def_cfa_offset 56
 117:Src/board.c   **** 
 409              		.loc 1 117 2 view .LVU129
 117:Src/board.c   **** 
 410              		.loc 1 117 19 is_stmt 0 view .LVU130
 411 0004 0024     		movs	r4, #0
 412 0006 0594     		str	r4, [sp, #20]
 413 0008 0694     		str	r4, [sp, #24]
 414 000a 0794     		str	r4, [sp, #28]
 415 000c 0894     		str	r4, [sp, #32]
 416 000e 0994     		str	r4, [sp, #36]
 120:Src/board.c   **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 417              		.loc 1 120 2 is_stmt 1 view .LVU131
 418              	.LBB3:
 120:Src/board.c   **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 419              		.loc 1 120 2 view .LVU132
 120:Src/board.c   **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 420              		.loc 1 120 2 view .LVU133
 421 0010 2F4B     		ldr	r3, .L22
 422 0012 D3F8E020 		ldr	r2, [r3, #224]
 423 0016 42F01002 		orr	r2, r2, #16
 424 001a C3F8E020 		str	r2, [r3, #224]
 120:Src/board.c   **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 425              		.loc 1 120 2 view .LVU134
 426 001e D3F8E020 		ldr	r2, [r3, #224]
 427 0022 02F01002 		and	r2, r2, #16
 428 0026 0092     		str	r2, [sp]
 120:Src/board.c   **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 429              		.loc 1 120 2 view .LVU135
 430 0028 009A     		ldr	r2, [sp]
 431              	.LBE3:
 120:Src/board.c   **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 432              		.loc 1 120 2 view .LVU136
 121:Src/board.c   **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 433              		.loc 1 121 2 view .LVU137
 434              	.LBB4:
ARM GAS  /tmp/ccRYAMGh.s 			page 14


 121:Src/board.c   **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 435              		.loc 1 121 2 view .LVU138
 121:Src/board.c   **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 436              		.loc 1 121 2 view .LVU139
 437 002a D3F8E020 		ldr	r2, [r3, #224]
 438 002e 42F00102 		orr	r2, r2, #1
 439 0032 C3F8E020 		str	r2, [r3, #224]
 121:Src/board.c   **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 440              		.loc 1 121 2 view .LVU140
 441 0036 D3F8E020 		ldr	r2, [r3, #224]
 442 003a 02F00102 		and	r2, r2, #1
 443 003e 0192     		str	r2, [sp, #4]
 121:Src/board.c   **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 444              		.loc 1 121 2 view .LVU141
 445 0040 019A     		ldr	r2, [sp, #4]
 446              	.LBE4:
 121:Src/board.c   **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 447              		.loc 1 121 2 view .LVU142
 122:Src/board.c   **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 448              		.loc 1 122 2 view .LVU143
 449              	.LBB5:
 122:Src/board.c   **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 450              		.loc 1 122 2 view .LVU144
 122:Src/board.c   **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 451              		.loc 1 122 2 view .LVU145
 452 0042 D3F8E020 		ldr	r2, [r3, #224]
 453 0046 42F00402 		orr	r2, r2, #4
 454 004a C3F8E020 		str	r2, [r3, #224]
 122:Src/board.c   **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 455              		.loc 1 122 2 view .LVU146
 456 004e D3F8E020 		ldr	r2, [r3, #224]
 457 0052 02F00402 		and	r2, r2, #4
 458 0056 0292     		str	r2, [sp, #8]
 122:Src/board.c   **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 459              		.loc 1 122 2 view .LVU147
 460 0058 029A     		ldr	r2, [sp, #8]
 461              	.LBE5:
 122:Src/board.c   **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 462              		.loc 1 122 2 view .LVU148
 123:Src/board.c   **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 463              		.loc 1 123 2 view .LVU149
 464              	.LBB6:
 123:Src/board.c   **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 465              		.loc 1 123 2 view .LVU150
 123:Src/board.c   **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 466              		.loc 1 123 2 view .LVU151
 467 005a D3F8E020 		ldr	r2, [r3, #224]
 468 005e 42F00202 		orr	r2, r2, #2
 469 0062 C3F8E020 		str	r2, [r3, #224]
 123:Src/board.c   **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 470              		.loc 1 123 2 view .LVU152
 471 0066 D3F8E020 		ldr	r2, [r3, #224]
 472 006a 02F00202 		and	r2, r2, #2
 473 006e 0392     		str	r2, [sp, #12]
 123:Src/board.c   **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 474              		.loc 1 123 2 view .LVU153
 475 0070 039A     		ldr	r2, [sp, #12]
ARM GAS  /tmp/ccRYAMGh.s 			page 15


 476              	.LBE6:
 123:Src/board.c   **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 477              		.loc 1 123 2 view .LVU154
 124:Src/board.c   **** 
 478              		.loc 1 124 2 view .LVU155
 479              	.LBB7:
 124:Src/board.c   **** 
 480              		.loc 1 124 2 view .LVU156
 124:Src/board.c   **** 
 481              		.loc 1 124 2 view .LVU157
 482 0072 D3F8E020 		ldr	r2, [r3, #224]
 483 0076 42F00802 		orr	r2, r2, #8
 484 007a C3F8E020 		str	r2, [r3, #224]
 124:Src/board.c   **** 
 485              		.loc 1 124 2 view .LVU158
 486 007e D3F8E030 		ldr	r3, [r3, #224]
 487 0082 03F00803 		and	r3, r3, #8
 488 0086 0493     		str	r3, [sp, #16]
 124:Src/board.c   **** 
 489              		.loc 1 124 2 view .LVU159
 490 0088 049B     		ldr	r3, [sp, #16]
 491              	.LBE7:
 124:Src/board.c   **** 
 492              		.loc 1 124 2 view .LVU160
 127:Src/board.c   **** 
 493              		.loc 1 127 2 view .LVU161
 494 008a 124E     		ldr	r6, .L22+4
 495 008c 2246     		mov	r2, r4
 496 008e 0221     		movs	r1, #2
 497 0090 3046     		mov	r0, r6
 498 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 499              	.LVL19:
 130:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 500              		.loc 1 130 2 view .LVU162
 130:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 501              		.loc 1 130 22 is_stmt 0 view .LVU163
 502 0096 0823     		movs	r3, #8
 503 0098 0593     		str	r3, [sp, #20]
 131:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_PULLUP;
 504              		.loc 1 131 2 is_stmt 1 view .LVU164
 131:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_PULLUP;
 505              		.loc 1 131 23 is_stmt 0 view .LVU165
 506 009a 0694     		str	r4, [sp, #24]
 132:Src/board.c   **** 	HAL_GPIO_Init(USER_BTN_K1_GPIO_Port, &GPIO_InitStruct);
 507              		.loc 1 132 2 is_stmt 1 view .LVU166
 132:Src/board.c   **** 	HAL_GPIO_Init(USER_BTN_K1_GPIO_Port, &GPIO_InitStruct);
 508              		.loc 1 132 23 is_stmt 0 view .LVU167
 509 009c 0125     		movs	r5, #1
 510 009e 0795     		str	r5, [sp, #28]
 133:Src/board.c   **** 
 511              		.loc 1 133 2 is_stmt 1 view .LVU168
 512 00a0 05A9     		add	r1, sp, #20
 513 00a2 0D48     		ldr	r0, .L22+8
 514 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 515              	.LVL20:
 136:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 516              		.loc 1 136 2 view .LVU169
ARM GAS  /tmp/ccRYAMGh.s 			page 16


 136:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 517              		.loc 1 136 22 is_stmt 0 view .LVU170
 518 00a8 0223     		movs	r3, #2
 519 00aa 0593     		str	r3, [sp, #20]
 137:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 520              		.loc 1 137 2 is_stmt 1 view .LVU171
 137:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 521              		.loc 1 137 23 is_stmt 0 view .LVU172
 522 00ac 0695     		str	r5, [sp, #24]
 138:Src/board.c   **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 523              		.loc 1 138 2 is_stmt 1 view .LVU173
 138:Src/board.c   **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 524              		.loc 1 138 23 is_stmt 0 view .LVU174
 525 00ae 0794     		str	r4, [sp, #28]
 139:Src/board.c   **** 	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 526              		.loc 1 139 2 is_stmt 1 view .LVU175
 139:Src/board.c   **** 	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 527              		.loc 1 139 24 is_stmt 0 view .LVU176
 528 00b0 0894     		str	r4, [sp, #32]
 140:Src/board.c   **** 
 529              		.loc 1 140 2 is_stmt 1 view .LVU177
 530 00b2 05A9     		add	r1, sp, #20
 531 00b4 3046     		mov	r0, r6
 532 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 533              	.LVL21:
 143:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 534              		.loc 1 143 2 view .LVU178
 143:Src/board.c   **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 535              		.loc 1 143 22 is_stmt 0 view .LVU179
 536 00ba 2023     		movs	r3, #32
 537 00bc 0593     		str	r3, [sp, #20]
 144:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_PULLUP;
 538              		.loc 1 144 2 is_stmt 1 view .LVU180
 144:Src/board.c   **** 	GPIO_InitStruct.Pull = GPIO_PULLUP;
 539              		.loc 1 144 23 is_stmt 0 view .LVU181
 540 00be 0694     		str	r4, [sp, #24]
 145:Src/board.c   **** 	HAL_GPIO_Init(USER_BTN_K2_GPIO_Port, &GPIO_InitStruct);
 541              		.loc 1 145 2 is_stmt 1 view .LVU182
 145:Src/board.c   **** 	HAL_GPIO_Init(USER_BTN_K2_GPIO_Port, &GPIO_InitStruct);
 542              		.loc 1 145 23 is_stmt 0 view .LVU183
 543 00c0 0795     		str	r5, [sp, #28]
 146:Src/board.c   **** }
 544              		.loc 1 146 2 is_stmt 1 view .LVU184
 545 00c2 05A9     		add	r1, sp, #20
 546 00c4 0548     		ldr	r0, .L22+12
 547 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 548              	.LVL22:
 147:Src/board.c   **** 
 549              		.loc 1 147 1 is_stmt 0 view .LVU185
 550 00ca 0AB0     		add	sp, sp, #40
 551              	.LCFI7:
 552              		.cfi_def_cfa_offset 16
 553              		@ sp needed
 554 00cc 70BD     		pop	{r4, r5, r6, pc}
 555              	.L23:
 556 00ce 00BF     		.align	2
 557              	.L22:
ARM GAS  /tmp/ccRYAMGh.s 			page 17


 558 00d0 00440258 		.word	1476543488
 559 00d4 00000258 		.word	1476526080
 560 00d8 00100258 		.word	1476530176
 561 00dc 00080258 		.word	1476528128
 562              		.cfi_endproc
 563              	.LFE150:
 565              		.section	.text.main_init_cb,"ax",%progbits
 566              		.align	1
 567              		.global	main_init_cb
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 572              	main_init_cb:
 573              	.LFB152:
 185:Src/board.c   **** 	}
 186:Src/board.c   **** }
 187:Src/board.c   **** 
 188:Src/board.c   **** void main_init_cb(void)
 189:Src/board.c   **** {
 574              		.loc 1 189 1 is_stmt 1 view -0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578 0000 10B5     		push	{r4, lr}
 579              	.LCFI8:
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 4, -8
 582              		.cfi_offset 14, -4
 583 0002 82B0     		sub	sp, sp, #8
 584              	.LCFI9:
 585              		.cfi_def_cfa_offset 16
 190:Src/board.c   **** 	hGS_CAN.channels[0] = &hfdcan1;
 586              		.loc 1 190 2 view .LVU187
 587              		.loc 1 190 22 is_stmt 0 view .LVU188
 588 0004 0D4C     		ldr	r4, .L26
 589 0006 0E48     		ldr	r0, .L26+4
 590 0008 C4F8A400 		str	r0, [r4, #164]
 191:Src/board.c   **** 	hGS_CAN.channels[1] = &hfdcan2;
 591              		.loc 1 191 2 is_stmt 1 view .LVU189
 592              		.loc 1 191 22 is_stmt 0 view .LVU190
 593 000c 0D4B     		ldr	r3, .L26+8
 594 000e C4F8A830 		str	r3, [r4, #168]
 192:Src/board.c   **** 	can_init(hGS_CAN.channels[0], FDCAN1);
 595              		.loc 1 192 2 is_stmt 1 view .LVU191
 596 0012 0D49     		ldr	r1, .L26+12
 597 0014 FFF7FEFF 		bl	can_init
 598              	.LVL23:
 193:Src/board.c   **** 	can_init(hGS_CAN.channels[1], FDCAN2);
 599              		.loc 1 193 2 view .LVU192
 600 0018 0C49     		ldr	r1, .L26+16
 601 001a D4F8A800 		ldr	r0, [r4, #168]
 602 001e FFF7FEFF 		bl	can_init
 603              	.LVL24:
 194:Src/board.c   **** 	led_init(&hled1, LED1_GPIO_Port, LED1_Pin, LED_MODE_INACTIVE, LED_ACTIVE_LOW);
 604              		.loc 1 194 2 view .LVU193
 605 0022 0024     		movs	r4, #0
 606 0024 0094     		str	r4, [sp]
ARM GAS  /tmp/ccRYAMGh.s 			page 18


 607 0026 2346     		mov	r3, r4
 608 0028 0222     		movs	r2, #2
 609 002a 0949     		ldr	r1, .L26+20
 610 002c 0948     		ldr	r0, .L26+24
 611 002e FFF7FEFF 		bl	led_init
 612              	.LVL25:
 195:Src/board.c   **** 	host_channel_is_active = false;
 613              		.loc 1 195 2 view .LVU194
 614              		.loc 1 195 25 is_stmt 0 view .LVU195
 615 0032 094B     		ldr	r3, .L26+28
 616 0034 1C70     		strb	r4, [r3]
 196:Src/board.c   **** }
 617              		.loc 1 196 1 view .LVU196
 618 0036 02B0     		add	sp, sp, #8
 619              	.LCFI10:
 620              		.cfi_def_cfa_offset 8
 621              		@ sp needed
 622 0038 10BD     		pop	{r4, pc}
 623              	.L27:
 624 003a 00BF     		.align	2
 625              	.L26:
 626 003c 00000000 		.word	hGS_CAN
 627 0040 00000000 		.word	.LANCHOR2
 628 0044 00000000 		.word	.LANCHOR3
 629 0048 00A00040 		.word	1073782784
 630 004c 00A40040 		.word	1073783808
 631 0050 00000258 		.word	1476526080
 632 0054 00000000 		.word	.LANCHOR4
 633 0058 00000000 		.word	.LANCHOR1
 634              		.cfi_endproc
 635              	.LFE152:
 637              		.section	.rodata.main_rtos_init_cb.str1.4,"aMS",%progbits,1
 638              		.align	2
 639              	.LC0:
 640 0000 4D795072 		.ascii	"MyProgTask\000"
 640      6F675461 
 640      736B00
 641              		.section	.text.main_rtos_init_cb,"ax",%progbits
 642              		.align	1
 643              		.global	main_rtos_init_cb
 644              		.syntax unified
 645              		.thumb
 646              		.thumb_func
 648              	main_rtos_init_cb:
 649              	.LFB153:
 197:Src/board.c   **** 
 198:Src/board.c   **** void main_rtos_init_cb(void)
 199:Src/board.c   **** {
 650              		.loc 1 199 1 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654 0000 00B5     		push	{lr}
 655              	.LCFI11:
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 14, -4
 658 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRYAMGh.s 			page 19


 659              	.LCFI12:
 660              		.cfi_def_cfa_offset 16
 200:Src/board.c   **** 	xTaskCreate(task_my_program, "MyProgTask", TASK_MY_PROGRAM_STACK_SIZE, NULL,
 661              		.loc 1 200 2 view .LVU198
 662 0004 064B     		ldr	r3, .L30
 663 0006 0193     		str	r3, [sp, #4]
 664 0008 0323     		movs	r3, #3
 665 000a 0093     		str	r3, [sp]
 666 000c 0023     		movs	r3, #0
 667 000e 8022     		movs	r2, #128
 668 0010 0449     		ldr	r1, .L30+4
 669 0012 0548     		ldr	r0, .L30+8
 670 0014 FFF7FEFF 		bl	xTaskCreate
 671              	.LVL26:
 201:Src/board.c   **** 				TASK_MY_PROGRAM_PRIORITY, &xCreatedMyProgramTask);
 202:Src/board.c   **** }
 672              		.loc 1 202 1 is_stmt 0 view .LVU199
 673 0018 03B0     		add	sp, sp, #12
 674              	.LCFI13:
 675              		.cfi_def_cfa_offset 4
 676              		@ sp needed
 677 001a 5DF804FB 		ldr	pc, [sp], #4
 678              	.L31:
 679 001e 00BF     		.align	2
 680              	.L30:
 681 0020 00000000 		.word	.LANCHOR5
 682 0024 00000000 		.word	.LC0
 683 0028 00000000 		.word	task_my_program
 684              		.cfi_endproc
 685              	.LFE153:
 687              		.section	.text.main_task_cb,"ax",%progbits
 688              		.align	1
 689              		.global	main_task_cb
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 694              	main_task_cb:
 695              	.LFB154:
 203:Src/board.c   **** 
 204:Src/board.c   **** void main_task_cb(void)
 205:Src/board.c   **** {
 696              		.loc 1 205 1 is_stmt 1 view -0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700 0000 08B5     		push	{r3, lr}
 701              	.LCFI14:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 3, -8
 704              		.cfi_offset 14, -4
 206:Src/board.c   **** 	/* update all the LEDs */
 207:Src/board.c   **** 	led_update(&hled1);
 705              		.loc 1 207 2 view .LVU201
 706 0002 0248     		ldr	r0, .L34
 707 0004 FFF7FEFF 		bl	led_update
 708              	.LVL27:
 208:Src/board.c   **** }
ARM GAS  /tmp/ccRYAMGh.s 			page 20


 709              		.loc 1 208 1 is_stmt 0 view .LVU202
 710 0008 08BD     		pop	{r3, pc}
 711              	.L35:
 712 000a 00BF     		.align	2
 713              	.L34:
 714 000c 00000000 		.word	.LANCHOR4
 715              		.cfi_endproc
 716              	.LFE154:
 718              		.section	.text.can_on_enable_cb,"ax",%progbits
 719              		.align	1
 720              		.global	can_on_enable_cb
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 725              	can_on_enable_cb:
 726              	.LVL28:
 727              	.LFB155:
 209:Src/board.c   **** 
 210:Src/board.c   **** void can_on_enable_cb(uint8_t channel)
 211:Src/board.c   **** {
 728              		.loc 1 211 1 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		.loc 1 211 1 is_stmt 0 view .LVU204
 733 0000 08B5     		push	{r3, lr}
 734              	.LCFI15:
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 3, -8
 737              		.cfi_offset 14, -4
 212:Src/board.c   **** 	UNUSED(channel);
 738              		.loc 1 212 2 is_stmt 1 view .LVU205
 213:Src/board.c   **** 	led_set_active(&hled1);
 739              		.loc 1 213 2 view .LVU206
 740 0002 0348     		ldr	r0, .L38
 741              	.LVL29:
 742              		.loc 1 213 2 is_stmt 0 view .LVU207
 743 0004 FFF7FEFF 		bl	led_set_active
 744              	.LVL30:
 214:Src/board.c   **** 	host_channel_is_active = true;
 745              		.loc 1 214 2 is_stmt 1 view .LVU208
 746              		.loc 1 214 25 is_stmt 0 view .LVU209
 747 0008 024B     		ldr	r3, .L38+4
 748 000a 0122     		movs	r2, #1
 749 000c 1A70     		strb	r2, [r3]
 215:Src/board.c   **** }
 750              		.loc 1 215 1 view .LVU210
 751 000e 08BD     		pop	{r3, pc}
 752              	.L39:
 753              		.align	2
 754              	.L38:
 755 0010 00000000 		.word	.LANCHOR4
 756 0014 00000000 		.word	.LANCHOR1
 757              		.cfi_endproc
 758              	.LFE155:
 760              		.section	.text.can_on_disable_cb,"ax",%progbits
 761              		.align	1
ARM GAS  /tmp/ccRYAMGh.s 			page 21


 762              		.global	can_on_disable_cb
 763              		.syntax unified
 764              		.thumb
 765              		.thumb_func
 767              	can_on_disable_cb:
 768              	.LVL31:
 769              	.LFB156:
 216:Src/board.c   **** 
 217:Src/board.c   **** void can_on_disable_cb(uint8_t channel)
 218:Src/board.c   **** {
 770              		.loc 1 218 1 is_stmt 1 view -0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              		.loc 1 218 1 is_stmt 0 view .LVU212
 775 0000 08B5     		push	{r3, lr}
 776              	.LCFI16:
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 3, -8
 779              		.cfi_offset 14, -4
 219:Src/board.c   **** 	UNUSED(channel);
 780              		.loc 1 219 2 is_stmt 1 view .LVU213
 220:Src/board.c   **** 	led_set_inactive(&hled1);
 781              		.loc 1 220 2 view .LVU214
 782 0002 0348     		ldr	r0, .L42
 783              	.LVL32:
 784              		.loc 1 220 2 is_stmt 0 view .LVU215
 785 0004 FFF7FEFF 		bl	led_set_inactive
 786              	.LVL33:
 221:Src/board.c   **** 	host_channel_is_active = false;
 787              		.loc 1 221 2 is_stmt 1 view .LVU216
 788              		.loc 1 221 25 is_stmt 0 view .LVU217
 789 0008 024B     		ldr	r3, .L42+4
 790 000a 0022     		movs	r2, #0
 791 000c 1A70     		strb	r2, [r3]
 222:Src/board.c   **** }
 792              		.loc 1 222 1 view .LVU218
 793 000e 08BD     		pop	{r3, pc}
 794              	.L43:
 795              		.align	2
 796              	.L42:
 797 0010 00000000 		.word	.LANCHOR4
 798 0014 00000000 		.word	.LANCHOR1
 799              		.cfi_endproc
 800              	.LFE156:
 802              		.section	.text.can_on_tx_cb,"ax",%progbits
 803              		.align	1
 804              		.global	can_on_tx_cb
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 809              	can_on_tx_cb:
 810              	.LVL34:
 811              	.LFB157:
 223:Src/board.c   **** 
 224:Src/board.c   **** void can_on_tx_cb(uint8_t channel, struct gs_host_frame *frame)
 225:Src/board.c   **** {
ARM GAS  /tmp/ccRYAMGh.s 			page 22


 812              		.loc 1 225 1 is_stmt 1 view -0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 0
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816              		.loc 1 225 1 is_stmt 0 view .LVU220
 817 0000 08B5     		push	{r3, lr}
 818              	.LCFI17:
 819              		.cfi_def_cfa_offset 8
 820              		.cfi_offset 3, -8
 821              		.cfi_offset 14, -4
 226:Src/board.c   **** 	UNUSED(channel);
 822              		.loc 1 226 2 is_stmt 1 view .LVU221
 227:Src/board.c   **** 	UNUSED(frame);
 823              		.loc 1 227 2 view .LVU222
 228:Src/board.c   **** 	led_indicate_rxtx(&hled1);
 824              		.loc 1 228 2 view .LVU223
 825 0002 0248     		ldr	r0, .L46
 826              	.LVL35:
 827              		.loc 1 228 2 is_stmt 0 view .LVU224
 828 0004 FFF7FEFF 		bl	led_indicate_rxtx
 829              	.LVL36:
 229:Src/board.c   **** }
 830              		.loc 1 229 1 view .LVU225
 831 0008 08BD     		pop	{r3, pc}
 832              	.L47:
 833 000a 00BF     		.align	2
 834              	.L46:
 835 000c 00000000 		.word	.LANCHOR4
 836              		.cfi_endproc
 837              	.LFE157:
 839              		.section	.text.can_on_rx_cb,"ax",%progbits
 840              		.align	1
 841              		.global	can_on_rx_cb
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 846              	can_on_rx_cb:
 847              	.LVL37:
 848              	.LFB158:
 230:Src/board.c   **** 
 231:Src/board.c   **** void can_on_rx_cb(uint8_t channel, struct gs_host_frame *frame)
 232:Src/board.c   **** {
 849              		.loc 1 232 1 is_stmt 1 view -0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 0, uses_anonymous_args = 0
 853              		.loc 1 232 1 is_stmt 0 view .LVU227
 854 0000 08B5     		push	{r3, lr}
 855              	.LCFI18:
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 3, -8
 858              		.cfi_offset 14, -4
 233:Src/board.c   **** 	UNUSED(channel);
 859              		.loc 1 233 2 is_stmt 1 view .LVU228
 234:Src/board.c   **** 	UNUSED(frame);
 860              		.loc 1 234 2 view .LVU229
 235:Src/board.c   **** 	led_indicate_rxtx(&hled1);
ARM GAS  /tmp/ccRYAMGh.s 			page 23


 861              		.loc 1 235 2 view .LVU230
 862 0002 0248     		ldr	r0, .L50
 863              	.LVL38:
 864              		.loc 1 235 2 is_stmt 0 view .LVU231
 865 0004 FFF7FEFF 		bl	led_indicate_rxtx
 866              	.LVL39:
 236:Src/board.c   **** }
 867              		.loc 1 236 1 view .LVU232
 868 0008 08BD     		pop	{r3, pc}
 869              	.L51:
 870 000a 00BF     		.align	2
 871              	.L50:
 872 000c 00000000 		.word	.LANCHOR4
 873              		.cfi_endproc
 874              	.LFE158:
 876              		.section	.text.can_identify_cb,"ax",%progbits
 877              		.align	1
 878              		.global	can_identify_cb
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 883              	can_identify_cb:
 884              	.LVL40:
 885              	.LFB159:
 237:Src/board.c   **** 
 238:Src/board.c   **** void can_identify_cb(uint32_t do_identify)
 239:Src/board.c   **** {
 886              		.loc 1 239 1 is_stmt 1 view -0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              		.loc 1 239 1 is_stmt 0 view .LVU234
 891 0000 08B5     		push	{r3, lr}
 892              	.LCFI19:
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 3, -8
 895              		.cfi_offset 14, -4
 240:Src/board.c   **** 	if (do_identify) {
 896              		.loc 1 240 2 is_stmt 1 view .LVU235
 897              		.loc 1 240 5 is_stmt 0 view .LVU236
 898 0002 20B1     		cbz	r0, .L53
 241:Src/board.c   **** 		led_blink_start(&hled1, 250);
 899              		.loc 1 241 3 is_stmt 1 view .LVU237
 900 0004 FA21     		movs	r1, #250
 901 0006 0448     		ldr	r0, .L56
 902              	.LVL41:
 903              		.loc 1 241 3 is_stmt 0 view .LVU238
 904 0008 FFF7FEFF 		bl	led_blink_start
 905              	.LVL42:
 906              	.L52:
 242:Src/board.c   **** 	}
 243:Src/board.c   **** 	else {
 244:Src/board.c   **** 		led_blink_stop(&hled1);
 245:Src/board.c   **** 	}
 246:Src/board.c   **** }
 907              		.loc 1 246 1 view .LVU239
 908 000c 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccRYAMGh.s 			page 24


 909              	.LVL43:
 910              	.L53:
 244:Src/board.c   **** 	}
 911              		.loc 1 244 3 is_stmt 1 view .LVU240
 912 000e 0248     		ldr	r0, .L56
 913              	.LVL44:
 244:Src/board.c   **** 	}
 914              		.loc 1 244 3 is_stmt 0 view .LVU241
 915 0010 FFF7FEFF 		bl	led_blink_stop
 916              	.LVL45:
 917              		.loc 1 246 1 view .LVU242
 918 0014 FAE7     		b	.L52
 919              	.L57:
 920 0016 00BF     		.align	2
 921              	.L56:
 922 0018 00000000 		.word	.LANCHOR4
 923              		.cfi_endproc
 924              	.LFE159:
 926              		.global	hled1
 927              		.global	hfdcan2
 928              		.global	hfdcan1
 929              		.section	.bss.frame_object.0,"aw",%nobits
 930              		.align	2
 931              		.set	.LANCHOR0,. + 0
 934              	frame_object.0:
 935 0000 00000000 		.space	80
 935      00000000 
 935      00000000 
 935      00000000 
 935      00000000 
 936              		.section	.bss.hfdcan1,"aw",%nobits
 937              		.align	2
 938              		.set	.LANCHOR2,. + 0
 941              	hfdcan1:
 942 0000 00000000 		.space	160
 942      00000000 
 942      00000000 
 942      00000000 
 942      00000000 
 943              		.section	.bss.hfdcan2,"aw",%nobits
 944              		.align	2
 945              		.set	.LANCHOR3,. + 0
 948              	hfdcan2:
 949 0000 00000000 		.space	160
 949      00000000 
 949      00000000 
 949      00000000 
 949      00000000 
 950              		.section	.bss.hled1,"aw",%nobits
 951              		.align	2
 952              		.set	.LANCHOR4,. + 0
 955              	hled1:
 956 0000 00000000 		.space	24
 956      00000000 
 956      00000000 
 956      00000000 
 956      00000000 
ARM GAS  /tmp/ccRYAMGh.s 			page 25


 957              		.section	.bss.host_channel_is_active,"aw",%nobits
 958              		.set	.LANCHOR1,. + 0
 961              	host_channel_is_active:
 962 0000 00       		.space	1
 963              		.section	.bss.xCreatedMyProgramTask,"aw",%nobits
 964              		.align	2
 965              		.set	.LANCHOR5,. + 0
 968              	xCreatedMyProgramTask:
 969 0000 00000000 		.space	4
 970              		.text
 971              	.Letext0:
 972              		.file 2 "/home/joseluiz/Programs/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/arm-none-eabi/include
 973              		.file 3 "/home/joseluiz/Programs/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/arm-none-eabi/include
 974              		.file 4 "../../Drivers/cmsis_device_h7/Include/stm32h743xx.h"
 975              		.file 5 "../../Drivers/cmsis_device_h7/Include/stm32h7xx.h"
 976              		.file 6 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_def.h"
 977              		.file 7 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_rcc.h"
 978              		.file 8 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_gpio.h"
 979              		.file 9 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_dma.h"
 980              		.file 10 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_fdcan.h"
 981              		.file 11 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_tim.h"
 982              		.file 12 "../../Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 983              		.file 13 "../../Middlewares/Third_Party/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
 984              		.file 14 "../../Middlewares/Third_Party/FreeRTOS/include/task.h"
 985              		.file 15 "../../Middlewares/Third_Party/FreeRTOS/include/queue.h"
 986              		.file 16 "../../Core/Inc/gs_usb.h"
 987              		.file 17 "../../Core/Inc/usbd_gs_can.h"
 988              		.file 18 "../../Core/Inc/led.h"
 989              		.file 19 "../../Core/Inc/can.h"
 990              		.file 20 "../../Drivers/stm32h7xx_hal_driver/Inc/stm32h7xx_hal_pwr_ex.h"
 991              		.file 21 "../../Core/Inc/main.h"
 992              		.file 22 "<built-in>"
ARM GAS  /tmp/ccRYAMGh.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 board.c
     /tmp/ccRYAMGh.s:19     .text.task_my_program:0000000000000000 $t
     /tmp/ccRYAMGh.s:24     .text.task_my_program:0000000000000000 task_my_program
     /tmp/ccRYAMGh.s:175    .text.task_my_program:0000000000000090 $d
     /tmp/ccRYAMGh.s:184    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccRYAMGh.s:190    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccRYAMGh.s:381    .text.SystemClock_Config:00000000000000c8 $d
     /tmp/ccRYAMGh.s:387    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccRYAMGh.s:393    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccRYAMGh.s:558    .text.MX_GPIO_Init:00000000000000d0 $d
     /tmp/ccRYAMGh.s:566    .text.main_init_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:572    .text.main_init_cb:0000000000000000 main_init_cb
     /tmp/ccRYAMGh.s:626    .text.main_init_cb:000000000000003c $d
     /tmp/ccRYAMGh.s:638    .rodata.main_rtos_init_cb.str1.4:0000000000000000 $d
     /tmp/ccRYAMGh.s:642    .text.main_rtos_init_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:648    .text.main_rtos_init_cb:0000000000000000 main_rtos_init_cb
     /tmp/ccRYAMGh.s:681    .text.main_rtos_init_cb:0000000000000020 $d
     /tmp/ccRYAMGh.s:688    .text.main_task_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:694    .text.main_task_cb:0000000000000000 main_task_cb
     /tmp/ccRYAMGh.s:714    .text.main_task_cb:000000000000000c $d
     /tmp/ccRYAMGh.s:719    .text.can_on_enable_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:725    .text.can_on_enable_cb:0000000000000000 can_on_enable_cb
     /tmp/ccRYAMGh.s:755    .text.can_on_enable_cb:0000000000000010 $d
     /tmp/ccRYAMGh.s:761    .text.can_on_disable_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:767    .text.can_on_disable_cb:0000000000000000 can_on_disable_cb
     /tmp/ccRYAMGh.s:797    .text.can_on_disable_cb:0000000000000010 $d
     /tmp/ccRYAMGh.s:803    .text.can_on_tx_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:809    .text.can_on_tx_cb:0000000000000000 can_on_tx_cb
     /tmp/ccRYAMGh.s:835    .text.can_on_tx_cb:000000000000000c $d
     /tmp/ccRYAMGh.s:840    .text.can_on_rx_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:846    .text.can_on_rx_cb:0000000000000000 can_on_rx_cb
     /tmp/ccRYAMGh.s:872    .text.can_on_rx_cb:000000000000000c $d
     /tmp/ccRYAMGh.s:877    .text.can_identify_cb:0000000000000000 $t
     /tmp/ccRYAMGh.s:883    .text.can_identify_cb:0000000000000000 can_identify_cb
     /tmp/ccRYAMGh.s:922    .text.can_identify_cb:0000000000000018 $d
     /tmp/ccRYAMGh.s:955    .bss.hled1:0000000000000000 hled1
     /tmp/ccRYAMGh.s:948    .bss.hfdcan2:0000000000000000 hfdcan2
     /tmp/ccRYAMGh.s:941    .bss.hfdcan1:0000000000000000 hfdcan1
     /tmp/ccRYAMGh.s:930    .bss.frame_object.0:0000000000000000 $d
     /tmp/ccRYAMGh.s:934    .bss.frame_object.0:0000000000000000 frame_object.0
     /tmp/ccRYAMGh.s:937    .bss.hfdcan1:0000000000000000 $d
     /tmp/ccRYAMGh.s:944    .bss.hfdcan2:0000000000000000 $d
     /tmp/ccRYAMGh.s:951    .bss.hled1:0000000000000000 $d
     /tmp/ccRYAMGh.s:961    .bss.host_channel_is_active:0000000000000000 host_channel_is_active
     /tmp/ccRYAMGh.s:962    .bss.host_channel_is_active:0000000000000000 $d
     /tmp/ccRYAMGh.s:964    .bss.xCreatedMyProgramTask:0000000000000000 $d
     /tmp/ccRYAMGh.s:968    .bss.xCreatedMyProgramTask:0000000000000000 xCreatedMyProgramTask

UNDEFINED SYMBOLS
xQueueGenericSend
HAL_GPIO_ReadPin
vTaskDelay
hGS_CAN
htim2
memset
HAL_PWREx_ConfigSupply
ARM GAS  /tmp/ccRYAMGh.s 			page 27


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
Error_Handler
HAL_GPIO_WritePin
HAL_GPIO_Init
can_init
led_init
xTaskCreate
led_update
led_set_active
led_set_inactive
led_indicate_rxtx
led_blink_start
led_blink_stop
